// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the GlobalParameters class.
//

namespace Herwig {

inline GlobalParameters::GlobalParameters() :
  _effectiveGluonMass( 0.750*GeV ), 
  _hadronizationScale( 0.5*GeV ), 
  _stringFragmentationMode( 0 ),
  _softUnderlyingEventMode( 0 ),
  _minVirtuality2( 0.1*GeV2 ),
  _maxDisplacement( 1.0e-10*millimeter )
{}

inline GlobalParameters::GlobalParameters(const GlobalParameters & x)
  : Interfaced(x),
    _effectiveGluonMass( x._effectiveGluonMass ),
    _hadronizationScale( x._hadronizationScale ), 
    _stringFragmentationMode( x._stringFragmentationMode ),
    _softUnderlyingEventMode( x._softUnderlyingEventMode ),
    _minVirtuality2( x._minVirtuality2 ),
    _maxDisplacement( x._maxDisplacement ) 
{}

inline IBPtr GlobalParameters::clone() const {
  return new_ptr(*this);
}

inline IBPtr GlobalParameters::fullclone() const {
  return new_ptr(*this);
}

inline Energy GlobalParameters::effectiveGluonMass() const {
  return _effectiveGluonMass;
}


inline Energy GlobalParameters::hadronizationScale() const {
  return _hadronizationScale;
}


inline bool GlobalParameters::isThePEGStringFragmentationON() const {
  return _stringFragmentationMode;
}


inline bool GlobalParameters::isSoftUnderlyingEventON() const {
  return _softUnderlyingEventMode;
}


inline Energy2 GlobalParameters::minVirtuality2() const {
  return _minVirtuality2;
}


inline Length GlobalParameters::maxDisplacement() const {
  return _maxDisplacement;
}


inline double GlobalParameters::conversionFactorGeVtoMillimeter() const {
  return hbarc / ( GeV * millimeter );
}

}
