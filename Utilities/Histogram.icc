// -*- C++ -*-
//
// Histogram.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the Histogram class.
//

namespace Herwig {

inline Histogram::Histogram(double lower, double upper, unsigned int nbin) 
  : _globalStats(), _havedata(false), _bins(nbin+2),_prefactor(1.),_total(0.)
{
  if (upper<lower)
    swap(upper,lower);

  _bins[0].limit=-1.e100;
  double limit(lower);
  double width((upper-lower)/nbin);
  for(unsigned int ix=1; ix <= nbin; ++ix)
    {
      _bins[ix].limit=limit;
      limit += width;
    }
  _bins.back().limit=limit;
}

inline Histogram::Histogram(vector<double> limits)
  : _globalStats(), _havedata(false), _bins(limits.size()+1), _prefactor(1.),_total(0.)
{
  _bins[0].limit=-1.e100;
  for (size_t i=1; i<=limits.size(); ++i)
    _bins[i].limit=limits[i-1];
}

inline Histogram::Histogram(vector<double> limits, vector<double> data,
			    vector<double> dataerror)
  : _globalStats(), _havedata(true), _bins(limits.size()+1), _prefactor(1.),_total(0.)
{
  _bins[0].limit=-1.e100;
  for (size_t i=1; i<=limits.size(); ++i)
    _bins[i].limit=limits[i-1];

  // no data goes into _bins[0] or _bins.back()!
  for (size_t i=1; i<=min(limits.size()-1,data.size()); ++i)
    _bins[i].data=data[i-1];

  for (size_t i=1; i<=min(limits.size()-1,dataerror.size()); ++i)
    _bins[i].dataerror=dataerror[i-1];
}

inline IBPtr Histogram::clone() const {
  return new_ptr(*this);
}

inline IBPtr Histogram::fullclone() const {
  return new_ptr(*this);
}

inline void Histogram::operator+=(double input) {
  addWeighted(input,1.0);
}

inline void Histogram::addWeighted(double input, double weight) {
  if(isnan(input)) return;
  unsigned int ibin;
  for(ibin=1; ibin<_bins.size(); ++ibin) {
    if(input<_bins[ibin].limit)
      break;
  }
  _bins[ibin-1].contents   += weight;
  _bins[ibin-1].contentsSq += sqr(weight);
  _globalStats += weight * input;
  _total += weight;
}

inline unsigned int Histogram::numberOfBins() const { 
  return _bins.size()-2;
}

inline double Histogram::prefactor() const {
  return _prefactor;
}

inline void   Histogram::prefactor(double in) {
  _prefactor=in;
}

inline const Statistic & Histogram::globalStatistics() const {
  return _globalStats;
}
}

