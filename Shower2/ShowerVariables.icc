// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ShowerVariables class.
//

namespace Herwig {


inline ShowerVariables::ShowerVariables(const ShowerVariables & x)
  : Interfaced(x), _multiScaleShowerMode(x._multiScaleShowerMode),
    _cutoffQCDMassScale( x._cutoffQCDMassScale ),
    _cutoffQEDMassScale( x._cutoffQEDMassScale ),
    _cutoffEWKMassScale( x._cutoffEWKMassScale ),
    _kinCutoffScale( x._kinCutoffScale ),
    _meCorrMode( x._meCorrMode ),
    _qqgPSMode(x._qqgPSMode),
    _stopShowerAtMassScale( x._stopShowerAtMassScale ),
    _vetoAbovePtScale( x._vetoAbovePtScale ), 
    _vetoBelowPtScale( x._vetoBelowPtScale ),
    _particlesDecayInShower( x._particlesDecayInShower ),
    _inputparticlesDecayInShower(x._inputparticlesDecayInShower),
    _a(x._a),_b(x._b),_c(x._c),_gluonMass(x._gluonMass),
    _globalParameters(x._globalParameters),
    _initialenhance(x._initialenhance),
    _finalenhance(x._finalenhance)
{}

inline IBPtr ShowerVariables::clone() const {
  return new_ptr(*this);
}

inline IBPtr ShowerVariables::fullclone() const {
  return new_ptr(*this);
}

inline int ShowerVariables::isMultiScaleShowerON() const {
  return _multiScaleShowerMode;
}

inline Energy ShowerVariables::
cutoffMassScale(const ShowerIndex::InteractionType interaction) const {
  Energy cutoff = Energy();
  switch ( interaction ) {
  case ShowerIndex::QCD : cutoff = _cutoffQCDMassScale; break; 
  case ShowerIndex::QED : cutoff = _cutoffQEDMassScale; break; 
  case ShowerIndex::EWK : cutoff = _cutoffEWKMassScale; break; 
  default: throw Exception() << "Invalid ShowerIndex in "
			     << "ShowerVariables::cutoffMassScale()" 
			     << Exception::abortnow;
  }
  return cutoff;
}

inline Energy ShowerVariables::
cutoffQScale(const ShowerIndex::InteractionType interaction) const {
  return convertMassScaleToQScale( cutoffMassScale( interaction ) );
}

inline void ShowerVariables::doinit() throw(InitException) {
  Interfaced::doinit();
  // copy particles to decay before showering from input vector to the 
  // set used in the simulation
  _particlesDecayInShower.insert(_inputparticlesDecayInShower.begin(),
				 _inputparticlesDecayInShower.end());
}
  
inline bool ShowerVariables::decayInShower(const long id) const {
  return ( _particlesDecayInShower.find( abs(id) ) != 
	   _particlesDecayInShower.end() ); 
}

inline Energy ShowerVariables::convertMassScaleToQScale(const Energy inputMassScale) const {
  // ***LOOKHERE***: convert on the fly:  Mass Scale -> Q Scale
  return inputMassScale * 1.0;   // To be changed
}

inline Energy ShowerVariables::convertQScaleToMassScale(const Energy inputQScale) const {
  // ***LOOKHERE***: convert on the fly:  Q scale -> Mass scale
  return inputQScale * 1.0;   // To be changed
}

// inline Energy ShowerVariables::stopShowerAtMassScale() const {
//   return _stopShowerAtMassScale;
// }

// inline void ShowerVariables::stopShowerAtMassScale(const Energy inputStopShowerAtMassScale) {
//   _stopShowerAtMassScale = inputStopShowerAtMassScale;
// }

// inline Energy ShowerVariables::stopShowerAtQScale() const {
//   return convertMassScaleToQScale(_stopShowerAtMassScale);
// }

// inline void ShowerVariables::stopShowerAtQScale(const Energy inputStopShowerAtQScale) {
//   _stopShowerAtMassScale = convertQScaleToMassScale(inputStopShowerAtQScale);
// }

inline Energy ShowerVariables::kinScale() const {
  return _kinCutoffScale;
}

inline bool ShowerVariables::MECOn() const {
  return _meCorrMode > 0; 
}

inline bool ShowerVariables::hardMEC() const {
  return (_meCorrMode == 1 || _meCorrMode == 2); 
}

inline bool ShowerVariables::softMEC() const {
  return (_meCorrMode == 1 || _meCorrMode > 2); 
}

inline bool ShowerVariables::asyPS() const {
  return (_qqgPSMode > 0); 
}

inline bool ShowerVariables::rndPS() const {
  return (_qqgPSMode == 2); 
}


// inline Energy ShowerVariables::vetoAbovePtScale() const {
//   return _vetoAbovePtScale;
// }
// inline void ShowerVariables::vetoAbovePtScale(const Energy inputVetoAbovePtScale) {
//   _vetoAbovePtScale = inputVetoAbovePtScale;
// }

// inline Energy ShowerVariables::vetoBelowPtScale() const {
//   return _vetoBelowPtScale;
// }

// inline void ShowerVariables::vetoBelowPtScale(const Energy inputVetoBelowPtScale) {
//   _vetoBelowPtScale = inputVetoBelowPtScale;
// }

inline tcPDFPtr ShowerVariables::currentPDF() const {
  return _pdf;
}

inline void ShowerVariables::setCurrentPDF(tcPDFPtr in) {
  _pdf=in;
}

inline Ptr<BeamParticleData>::const_pointer ShowerVariables::beamParticle() const
{return _beam;}

inline void ShowerVariables::setBeamParticle(Ptr<BeamParticleData>::const_pointer in)
{_beam=in;}

inline Energy ShowerVariables::kinematicCutOff(Energy scale,Energy mq) const {
  return max((scale -_a*mq)/_b,_c);
}

inline Energy ShowerVariables::gluonMass() const {return _gluonMass;}

inline void ShowerVariables::gluonMass(Energy in){_gluonMass=in;}

inline GlobalParametersPtr ShowerVariables::globalParameters() const
{return _globalParameters;}

inline void ShowerVariables::setGluonMass(bool final)
{
  if(final)
    {	
      if(_globalParameters->isThePEGStringFragmentationON())
	_gluonMass=0.;
      else
	_gluonMass=_globalParameters->effectiveGluonMass();
    }
  else
    {
      // set the gluon mass to be used in the reconstruction
      if(_globalParameters->isThePEGStringFragmentationON()||
	 isMultiScaleShowerON())
	_gluonMass=0.;
      else
	_gluonMass=_globalParameters->effectiveGluonMass();
    }
}

inline double ShowerVariables::initialStateRadiationEnhancementFactor() const
{return _initialenhance;}

inline double ShowerVariables::finalStateRadiationEnhancementFactor() const
{return _finalenhance;}

inline void ShowerVariables::initialStateRadiationEnhancementFactor(double in)
{_initialenhance=in;}

inline void ShowerVariables::finalStateRadiationEnhancementFactor(double in)
{_finalenhance=in;}

}
