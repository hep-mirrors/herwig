// -*- C++ -*-
//
// LEPFourJetsAnalysis.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the LEPFourJetsAnalysis class.
//

namespace Herwig {

inline IBPtr LEPFourJetsAnalysis::clone() const {
  return new_ptr(*this);
}

inline IBPtr LEPFourJetsAnalysis::fullclone() const {
  return new_ptr(*this);
}

inline double LEPFourJetsAnalysis::cosChiBZ(vector<Lorentz5Momentum> p) {
  if (p.size() == 4) {
    Vector3<Energy2> v1 = p[0].vect().cross(p[1].vect());
    Vector3<Energy2> v2 = p[2].vect().cross(p[3].vect());
    return cos(v1.angle(v2)); 
  } 
  else return 123;
}

inline double LEPFourJetsAnalysis::cosPhiKSW(vector<Lorentz5Momentum> p) {
  if (p.size() == 4) {
    Vector3<Energy2> v1 = p[0].vect().cross(p[3].vect());
    Vector3<Energy2> v2 = p[1].vect().cross(p[2].vect());
    double alpha1 = v1.angle(v2);
    v1 = p[0].vect().cross(p[2].vect());
    v2 = p[1].vect().cross(p[3].vect());
    double alpha2 = v1.angle(v2);
    return cos((alpha1+alpha2)/2.);
  } 
  else return 123; 
}

inline double LEPFourJetsAnalysis::cosThetaNR(vector<Lorentz5Momentum> p) {
  if (p.size() == 4) {
    Vector3<Energy> v1 = p[0].vect() - p[1].vect();
    Vector3<Energy> v2 = p[2].vect() - p[3].vect();
    return cos(v1.angle(v2));
  }
  else return 123; 
}

inline double LEPFourJetsAnalysis::cosAlpha34(std::vector<Lorentz5Momentum> p) {
  if (p.size() == 4)
    return cos(p[2].vect().angle(p[3].vect()));
  else 
    return 123; 
}

}
