// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SimpleLHCAnalysis class.
//

namespace Herwig {

inline SimpleLHCAnalysis::SimpleLHCAnalysis() :
  _ptZ(4,Histogram(0.,250.,250)), 
  _ptWp(4,Histogram(0.,250.,250)), 
  _ptWm(4,Histogram(0.,250.,250)), 
  _mZ(0.,250.,250), _mWp(0.,250.,250), _mWm(0.,250.,250), 
  _rapZ(-10.,10.,100),_rapWp(-10.,10.,100),_rapWm(-10.,10.,100),
  _phiZ(-3.2,3.2,100),_phiWp(-3.2,3.2,100),_phiWm(-3.2,3.2,100) {}

inline IBPtr SimpleLHCAnalysis::clone() const {
  return new_ptr(*this);
}

inline IBPtr SimpleLHCAnalysis::fullclone() const {
  return new_ptr(*this);
}

inline void SimpleLHCAnalysis::dofinish() {
  AnalysisHandler::dofinish();
  string fname = generator()->filename() + string("-") + name() + string(".top");
  ofstream outfile(fname.c_str());
  string title;
  using namespace HistogramOptions;
  for(unsigned int ix=0;ix<4;++ix)
    {
      if(ix==0){title="pt of Z for all masses ";}
      else if(ix==1){title="pt of Z for mass 40-80 GeV";}
      else if(ix==2){title="pt of Z for mass 80-100 GeV";}
      else if(ix==3){title="pt of Z for mass 100- GeV";}
      _ptZ[ix].topdrawOutput(outfile,Frame,"BLACK",title);
      _ptZ[ix].topdrawOutput(outfile,Frame|Ylog,"BLACK",title);
      if(ix==0){title="pt of Wp for all masses ";}
      else if(ix==1){title="pt of Wp for mass 40-80 GeV";}
      else if(ix==2){title="pt of Wp for mass 80-100 GeV";}
      else if(ix==3){title="pt of Wp for mass 100- GeV";}
      _ptWp[ix].topdrawOutput(outfile,Frame,"BLACK",title);
      _ptWp[ix].topdrawOutput(outfile,Frame|Ylog,"BLACK",title);
      if(ix==0){title="pt of Wm for all masses ";}
      else if(ix==1){title="pt of Wm for mass 40-80 GeV";}
      else if(ix==2){title="pt of Wm for mass 80-100 GeV";}
      else if(ix==3){title="pt of Wm for mass 100- GeV";}
      _ptWm[ix].topdrawOutput(outfile,Frame,"BLACK",title);
      _ptWm[ix].topdrawOutput(outfile,Frame|Ylog,"BLACK",title);
    }
  _mZ.topdrawOutput(outfile,Frame,"BLACK","Mass of Z");
  _mZ.topdrawOutput(outfile,Frame|Ylog,"BLACK", "Mass of Z");
  _mWp.topdrawOutput(outfile,Frame,"BLACK","Mass of Wp");
  _mWp.topdrawOutput(outfile,Frame|Ylog,"BLACK", "Mass of Wp");
  _mWm.topdrawOutput(outfile,Frame,"BLACK","Mass of Wm");
  _mWm.topdrawOutput(outfile,Frame|Ylog,"BLACK", "Mass of Wm");
  _rapZ.topdrawOutput(outfile,Frame,"BLACK","Rapidity of Z");
  _rapZ.topdrawOutput(outfile,Frame|Ylog,"BLACK","Rapidity of Z");
  _rapWp.topdrawOutput(outfile,Frame,"BLACK","Rapidity of Wp");
  _rapWp.topdrawOutput(outfile,Frame|Ylog,"BLACK","Rapidity of Wp");
  _rapWm.topdrawOutput(outfile,Frame,"BLACK","Rapidity of Wm");
  _rapWm.topdrawOutput(outfile,Frame|Ylog,"BLACK","Rapidity of Wm");

  _phiZ.topdrawOutput(outfile,Frame,"BLACK","Azimuth of Z");
  _phiWp.topdrawOutput(outfile,Frame,"BLACK","Azimuth of Wp");
  _phiWm.topdrawOutput(outfile,Frame,"BLACK","Azimuth of Wm");
}

}
