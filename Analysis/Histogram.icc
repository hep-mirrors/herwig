// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Histogram class.
//

namespace Herwig {

inline Histogram::Histogram(double lower, double upper, unsigned int nbin) 
{
  // change limits if upper<lower
  if (upper<lower)
    {
      double temp(upper);
      upper=lower;
      lower=temp;
    }
  // number of bins
  _nbin=nbin+1;
  for(unsigned int ix=0;ix<_nbin;++ix){_bincontents.push_back(new_ptr(Statistic()));}
  _binlimits.resize(_nbin);
  double limit(lower),width((upper-lower)/nbin);
  for(unsigned int ix=0;ix<_nbin-1;++ix)
    {
      _binlimits[ix]=limit;
      limit += width;
    }
  _binlimits[_nbin-1]=1.e100;
}

inline Histogram::Histogram(vector<double> limits)
{
  _nbin=limits.size()+1;
  for(unsigned int ix=0;ix<_nbin;++ix){_bincontents.push_back(new_ptr(Statistic()));}
  _binlimits=limits;
  _binlimits.push_back(1.e100);
}

inline Histogram::Histogram(vector<double> limits, vector<double> data,
			    vector<double> error)
{
  _nbin=limits.size()+1;
  for(unsigned int ix=0;ix<_nbin;++ix){_bincontents.push_back(new_ptr(Statistic()));}
  _binlimits=limits;
  _binlimits.push_back(1.e100);
  _data=data;
  _error=error;
}

inline Histogram::Histogram(const Histogram & x)
  : Statistic(x), _nbin(x._nbin), _bincontents(x._bincontents),_binlimits(x._binlimits),
    _data(x._data),_error(x._error)
{}

inline IBPtr Histogram::clone() const {
  return new_ptr(*this);
}

inline IBPtr Histogram::fullclone() const {
  return new_ptr(*this);
}

inline void Histogram::doupdate() throw(UpdateException) {
  Statistic::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void Histogram::doinit() throw(InitException) {
  Statistic::doinit();
}

inline void Histogram::dofinish() {
  Statistic::dofinish();
}

inline void Histogram::doinitrun() {
  Statistic::doinitrun();
}

inline void Histogram::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Statistic::rebind(trans);
}

inline IVector Histogram::getReferences() {
  IVector ret = Statistic::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline void Histogram::operator+=(double input)
{
  if(isnan(input)) return;
  unsigned int ibin;
  for(ibin=0;ibin<_nbin;ibin++) 
    {if(input<_binlimits[ibin]) break;}
  (*(_bincontents[ibin]))+=1.;
  Statistic::operator+=(input);
}

inline unsigned int Histogram::numberOfBins(){ return _nbin-1;}

}
