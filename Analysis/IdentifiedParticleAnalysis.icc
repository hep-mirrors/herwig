// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the IdentifiedParticleAnalysis class.
//

namespace Herwig {

inline IBPtr IdentifiedParticleAnalysis::clone() const {
  return new_ptr(*this);
}

inline IBPtr IdentifiedParticleAnalysis::fullclone() const {
  return new_ptr(*this);
}

inline void IdentifiedParticleAnalysis::dofinish() {
  AnalysisHandler::dofinish();
  string fname = CurrentGenerator::current().filename() + string("-") + name() + string(".top");
  ofstream output(fname.c_str());
  generator()->log() << "Output from SingleParticleAnalysis \n";
  // chisq
  double chisq;
  unsigned int npoint;
  // Histogram for the \f$\xi\f$ distribution for all particles from all quarks
  _xpa->normaliseToData();
  _xpa->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for all"
		     << " charged particles from all quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _xpa->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all events(SLD)",
		      "                                                       ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // light quarks
  _xpl->normaliseToData();
  _xpl->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for all"
		     << " charged particles  from light quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _xpl->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all light quark events(SLD)",
		      "                                                                   ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // OPAL
  _udsxp->normaliseToData();
  _udsxp->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for all"
		     << " charged particles  from light quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _udsxp->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all light quark events(OPAL)",
		      "                                                                   ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  _udsxip->normaliseToData();
  _udsxip->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xi distrubtion for all"
		     << " charged particles  from light quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _udsxip->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all light quark events(OPAL)",
		      "                                                                   ",
		      "1/NdN/dX",
		      "       G",
		      "X",
		      "G");
  // charm 
  _xpc->normaliseToData();
  _xpc->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for all"
		     << " charged particles  from charm quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _xpc->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all charm events(SLD)",
		      "                                                             ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // bottom
  _xpb->normaliseToData();
  _xpb->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for all"
		     << " charged particles  from bottom quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _xpb->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of charged particles for all bottom events(SLD)",
		      "                                                              ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // pions all quarks
  _pipma->normaliseToData();
  _pipma->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "pions from all quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _pipma->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of pions for all events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // OPAL pions
  _pipm->normaliseToData();
  _pipm->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the momentum distrubtion for "
		     << "pions from all quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _pipm->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The momentum of pions for all events(OPAL)",
		      "                                          ",
		      "1/NdN/dp/GeV2-13",
		      "            X  X",
		      "p/GeV",
		      " ");
  // light
  _pipml->normaliseToData();
  _pipml->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "pions from light quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _pipml->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of pions for light quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // charm 
  _pipmc->normaliseToData();
  _pipmc->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "pions from charm quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _pipmc->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of pions for charm events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // bottom
  _pipmb->normaliseToData();
  _pipmb->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "pions from bottom quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _pipmb->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of pions for bottom quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // kaons all quarks
  _kpma->normaliseToData();
  _kpma->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "kaons from all quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _kpma->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of kaons for all events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // OPAL kaons
  _kpm->normaliseToData();
  _kpm->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the momentum distrubtion for "
		     << "kaons from all quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _kpm->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The momentum of kaons for all events(OPAL)",
		      "                                                   ",
		      "1/NdN/dp/GeV2-13",
		      "            X  X",
		      "p/GeV",
		      "     ");
  // light
  _kpml->normaliseToData();
  _kpml->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "kaons from light quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _kpml->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of kaons for light quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // charm 
  _kpmc->normaliseToData();
  _kpmc->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "kaons from charm quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _kpmc->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of kaons for charm events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // bottom
  _kpmb->normaliseToData();
  _kpmb->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "kaons from bottom quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _kpmb->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of kaons for bottom quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // protons all quarks
  _ppma->normaliseToData();
  _ppma->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "protons from all quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _ppma->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of protons for all events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // OPAL protons
  _ppm->normaliseToData();
  _ppm->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the momentum distrubtion for "
		     << "protons from all quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _ppm->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The momentum of protons for all events(OPAL)",
		      "                                                   ",
		      "1/NdN/dpGeV2-13",
		      "           X  X",
		      "p/GeV",
		      "     ");
  // light
  _ppml->normaliseToData();
  _ppml->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "protons from light quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _ppml->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of protons for light quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // charm 
  _ppmc->normaliseToData();
  _ppmc->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "protons from charm quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _ppmc->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of protons for charm events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // bottom
  _ppmb->normaliseToData();
  _ppmb->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the xp distrubtion for "
		     << "protons from bottom quarks(SLD) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _ppmb->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of protons for bottom quark events(SLD)",
		      "                                           ",
		      "1/NdN/dx0p1",
		      "        X X",
		      "x0p1",
		      " X X");
  // lambda
  _lpm->normaliseToData();
  _lpm->chiSquared(chisq,npoint);
  generator()->log() << "The chi squared was " << chisq << " for " << npoint 
		     << " degrees of freedom for the momentum distrubtion for "
		     << "lambdas from all quarks(OPAL) " 
		     << " or " << chisq/npoint << "per degree of freedom \n"; 
  _lpm->topdrawOutput(output,true,true,false,true,
		      "RED",
		      "The scaled momentum of lambdas for all events(OPAL)",
		      "                                                   ",
		      "1/NdN/dp/GeV2-13",
		      "            X  X",
		      "p/GeV",
		      "     ");

//  /**
//   *  Histogram for the \f$\xi\f$ distribution for \f$\Lambda\f$ 
//   */
//  HistogramPtr _lpm;


}

inline void IdentifiedParticleAnalysis::doinitrun() {
  AnalysisHandler::doinitrun();
  // SLD data (all charged)
  double xpbins[] = {0.005, 0.008, 0.010, 0.012, 0.014, 
		     0.016, 0.022, 0.027, 0.033, 0.038, 
		     0.044, 0.049, 0.055, 0.060, 0.066, 
		     0.071, 0.077, 0.082, 0.088, 0.099, 
		     0.110, 0.121, 0.143, 0.164, 0.186, 
		     0.208, 0.230, 0.252, 0.274, 0.296, 
		     0.318, 0.351, 0.384, 0.417, 0.450, 
		     0.482, 0.526, 0.570, 0.658, 0.768, 
		     1.000};
  double xpdataa[]={509.2   ,513.9   ,485.5   ,443.4   ,398.7   ,
		    335.8   ,267.2   ,217.8   ,180.7   ,153.2   ,
		    130.6   ,113.4   , 99.09  , 87.57  , 77.56  ,
		    69.78   , 62.84  , 56.72  , 48.90  , 40.78  ,
		    34.39   , 27.35  , 20.53  , 15.64  , 12.25  ,
		    9.67    ,  7.75  , 6.161  , 5.029  , 4.053  ,
		    3.139   , 2.338  , 1.748  , 1.326  , 1.008  ,
		    0.724   , 0.480  , 0.285  , 0.114  , 0.024  };
  double xperrora[]={9.5  ,7.8  ,6.6  ,5.6  ,4.9  ,
		     3.9  ,2.9  ,2.3  ,1.9  ,1.6  ,
		     1.4  ,1.2  ,1.03 ,0.91 ,0.81 ,
		     0.73 ,0.66 ,0.60 ,0.51 ,0.43 ,
		     0.37 ,0.29 ,0.23 ,0.18 ,0.15 ,
		     0.12 ,0.11 ,0.088,0.076,0.065,
		     0.052,0.042,0.034,0.028,0.023,
		     0.018,0.013,0.009,0.005,0.001};
  double xpdatal[] ={507.8 ,505.2 ,465.3 ,421.9 ,371.7 ,
		     315.5 ,250.5 ,200.3 ,167.3 ,140.4 ,
		     121.2 ,105.5 , 91.2 ,81.29 ,72.69 ,
		     65.92 ,58.06 ,53.26 ,45.37 ,38.55 ,
		     32.84 ,26.05 ,19.79 ,15.75 ,12.16 ,
		     10.27 , 8.14 , 6.62 ,5.565 ,4.428 ,
		     3.588 ,2.706 ,2.062 ,1.631 ,1.193 ,
		     0.912 ,0.632 ,0.398 ,0.172 ,0.027};
  double xperrorl[]={ 11.9 ,  9.2 ,  7.5 ,  6.3 ,  5.8 ,
		      4.2 ,  3.2 ,  2.3 ,  2.0 ,  1.6 ,
		      1.3 ,  1.1 ,  1.0 , 0.89 , 0.81 ,
		      0.76 , 0.70 , 0.66 , 0.48 , 0.43 ,
		      0.41 , 0.28 , 0.29 , 0.35 , 0.17 ,
		      0.14 , 0.11 , 0.10 ,0.087 ,0.076 ,
		      0.057 ,0.049 ,0.042 ,0.037 ,0.034 ,
		      0.026 ,0.023 ,0.015 ,0.011 ,0.005 };
  double xpdatac[] ={468.7  ,485.4  ,507.2  ,464.0  ,422.9  ,
		     349.1  ,274.1  ,231.5  ,187.5  ,162.3  ,
		     136.6  ,117.3  , 99.1  ,89.21  ,78.25  ,
		     69.26  ,62.25  ,55.28  ,49.14  ,40.11  ,
		     35.64  ,28.94  ,21.99  ,16.51  ,12.69  ,
		     10.41  , 7.86  , 6.37  ,5.060  ,4.080  ,
		     3.123  ,2.141  ,1.472  ,0.952  ,0.935  ,
		     0.485  ,0.372  ,0.140  ,0.027  ,0.011};
  double xperrorc[]={25.3, 22.6, 20.2, 17.6, 16.9,
		     12.7,  9.5,  7.3,  6.9,  5.2,
		     4.2,  3.6,  3.0, 2.65, 2.42, 
		     2.23, 2.06, 1.93, 1.42, 1.29,
		     1.22, 0.83, 0.86, 1.03, 0.50,
		     0.40, 0.32, 0.28,0.241,0.210,
		     0.156,0.126,0.106,0.090,0.085,
		     0.061,0.055,0.031,0.016,0.010};
  double xpdatab[] ={546.1  ,558.5  ,531.9  ,490.8  ,436.5  ,
		     382.8  ,308.6  ,254.8  ,213.2  ,182.1  ,
		     154.5  ,134.3  ,118.6  ,102.4  ,91.92  ,
		     83.63  ,75.06  ,66.58  ,57.31  ,47.80  ,
		     39.19  ,29.54  ,20.69  ,15.36  ,10.65  ,
		     8.06  , 6.28  , 4.69  ,3.490  ,2.935  ,
		     2.041  ,1.534  ,1.111  ,0.736  ,0.510  ,
		     0.330  ,0.188  ,0.089  ,0.017  ,0.003};
  double xperrorb[]={ 14.2, 10.3,  8.0,  6.3,  6.7,
		      4.4,  3.4,  2.6,  2.1,  1.9, 
		      1.7,  1.6,  1.4,  1.3, 1.22,
		      1.14, 1.10, 1.04, 0.74, 0.71,
		      0.67, 0.48, 0.48, 0.55, 0.26, 
		      0.20, 0.16, 0.13,0.110,0.098,
		      0.068,0.058,0.051,0.042,0.037,
		      0.027,0.022,0.012,0.006,0.002};
  vector<double> bins =vector<double>(xpbins,xpbins+41);
  vector<double> data =vector<double>(xpdataa,xpdataa+40);
  vector<double> error=vector<double>(xperrora,xperrora+40);
  _xpa=new_ptr(Histogram(bins,data,error));
  data =vector<double>(xpdatal,xpdatal+40);
  error=vector<double>(xperrorl,xperrorl+40);
  _xpl=new_ptr(Histogram(bins,data,error));
  data =vector<double>(xpdatac,xpdatac+40);
  error=vector<double>(xperrorc,xperrorc+40);
  _xpc=new_ptr(Histogram(bins,data,error));
  data =vector<double>(xpdatab,xpdatab+40);
  error=vector<double>(xperrorb,xperrorb+40);
  _xpb=new_ptr(Histogram(bins,data,error));
  // SLD pions data
  double pipmbins[] = {0.005, 0.008, 0.010, 0.012, 0.014, 
		       0.016, 0.022, 0.027, 0.033, 0.038, 
		       0.044, 0.049, 0.055, 0.060, 0.066, 
		       0.071, 0.077, 0.082, 0.088, 0.099, 
		       0.110, 0.121, 0.143, 0.164, 0.186, 
		       0.208, 0.230, 0.252, 0.274, 0.296, 
		       0.318, 0.351, 0.384, 0.417, 0.450, 
		       0.482, 0.526, 0.570, 0.658, 0.768, 
		       1.000};
  double pipmdataa[]={ 471.8 , 470.4 , 434.6 , 388.8 , 352.7 ,
		       294.8 , 229.6 , 185.0 , 150.6 , 125.6 ,
		       106.5 , 90.40 , 77.38 , 67.39 , 59.40 ,
		       52.57 , 46.76 , 41.70 , 35.26 , 28.89 ,
		       23.88 , 18.69 , 13.85 , 10.16 , 7.812 ,
		       6.076 , 4.674 , 3.632 , 2.886 , 2.292 ,
		       1.749 , 1.275 , 0.921 , 0.680 , 0.499 ,
		       0.338 , 0.226 , 0.130 ,0.0526 ,0.0113 };
  double pipmerrorastat[]={1.3,    1.1,    1.1,    1.0,    0.9,
			   0.5,    0.5,    0.4,    0.4,    0.4,
			   0.4,   0.35,   0.31,   0.29,   0.27,
			   0.25,   0.24,   0.23,   0.15,   0.13,
			   0.12,   0.08,   0.07,   0.06,  0.050,
			   0.044,  0.039,  0.035,  0.031,  0.028,
			   0.021,  0.018,  0.016,  0.014,  0.013,
			   0.010,  0.009,  0.005, 0.0037, 0.0018};
  double pipmerrorasytm[]={9.2,     6.6,     5.0,     4.0,     3.3,
			   2.2,     1.3,     0.9,     0.7,     0.9,
			   1.1,    1.33,    0.91,    0.70,    0.75,
			   0.60,    0.50,    0.43,    0.36,    0.29, 
			   0.25,    0.19,    0.14,    0.11,   0.069,
			   0.061,   0.053,   0.044,   0.037,   0.031,
			   0.034,   0.028,   0.022,   0.018,   0.014,
			   0.010,   0.007,   0.005,  0.0029,  0.0013};
  double pipmdatal[] ={474.0     ,  467.3    ,  418.2    ,  375.5    ,  327.7    ,
		       275.8    ,  216.0    ,  171.2    ,  140.4    ,  116.4    ,
		       99.9    ,   85.4    ,  72.85    ,  64.51    ,  56.82    ,
		       50.84    ,  45.34    ,  40.71    ,  34.60    ,  28.99    ,
		       24.19    ,  18.97    ,  14.52    ,  11.06    ,   8.67    ,
		       6.79    ,  5.341    ,  4.214    ,  3.452    ,  2.727    ,
		       2.138    ,  1.652    ,  1.164    ,  0.874    ,  0.622    ,
		       0.441    ,  0.300    ,  0.178    ,  0.081    ,  0.016};
  double pipmerrorlstat[]={13.9 , 10.5 ,  8.4 ,  6.9 ,  5.7 ,
			   4.2 ,  3.0 ,  2.2 ,  1.9 ,  1.5 ,
			   1.2 ,  1.0 , 0.89 , 0.79 , 0.72 ,
			   0.66 , 0.61 , 0.56 , 0.40 , 0.35 ,
			   0.31 , 0.22 , 0.17 , 0.14 , 0.12 ,
			   0.10 ,0.085 ,0.073 ,0.064 ,0.056 ,
			   0.042 ,0.036 ,0.031 ,0.027 ,0.024 ,
			   0.019 ,0.017 ,0.010 ,0.007 ,0.003};
  double pipmerrorlsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  double pipmdatac[] ={425.5     ,  440.5    ,  453.8    ,  409.2    ,  372.8    ,
		       306.4    ,  234.6    ,  197.4    ,  155.8    ,  132.5    ,
		       109.3    ,   92.9    ,  77.56    ,  68.23    ,  60.06    ,
		       51.76    ,  45.28    ,  40.04    ,  33.50    ,  27.45    , 
		       22.92    ,  18.73    ,  13.72    ,  10.18    ,   7.53    ,
		       5.76    ,  4.381    ,  3.358    ,  2.487    ,  1.947    ,
		       1.436    ,  0.817    ,  0.614    ,  0.386    ,  0.429    ,
		       0.206    ,  0.142    ,  0.066    ,  0.003    ,  0.003};
  double pipmerrorcstat[]={26.6 , 23.2 , 20.0 , 17.2 , 14.6 , 10.9 ,  8.0 ,  6.2 ,  6.0 ,  4.3 ,  3.5 ,  2.9 , 2.48 , 2.17 , 1.97 , 1.81 , 1.67 , 1.55 , 1.12 , 0.99 , 0.87 , 0.63 , 0.50 , 0.41 , 0.34 , 0.29 ,0.235 ,0.202 ,0.171 ,0.148 ,0.108 ,0.087 ,0.074 ,0.063 ,0.061 ,0.043 ,0.037 ,0.021 ,0.010 ,0.006};
  double pipmerrorcsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			   0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  double pipmdatab[] ={478.1   ,488.4  ,463.7  ,432.2  ,382.4  ,
		       333.3  ,261.7  ,214.2  ,175.2  ,145.4  ,
		       121.4  ,103.3  ,89.24  ,75.47  ,65.97  ,
		       59.39  ,52.11  ,45.86  ,38.29  ,30.57  ,
		       24.34  ,18.21  ,12.27  , 8.25  , 5.83  ,
		       4.14  ,2.984  ,2.303  ,1.642  ,1.365  ,
		       0.886  ,0.631  ,0.490  ,0.276  ,0.187  ,
		       0.111  ,0.045  ,0.039  ,0.011  ,0.003};
  double pipmerrorbstat[]={15.8,  11.9,   9.5,   7.7,   6.5,
			   4.6,   3.3,   2.7,   2.3,   1.9, 
			   1.7,   1.5,  1.36,  1.21,  1.12,
			   1.04,  0.97,  0.90,  0.65,  0.58,
			   0.51,  0.36,  0.28,  0.22,  0.18,
			   0.15, 0.128, 0.110, 0.094, 0.085,
			   0.063, 0.052, 0.047, 0.038, 0.033,
			   0.025, 0.019, 0.010, 0.005, 0.002};
  double pipmerrorbsytm[]={0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
			   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
			   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
			   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  double pipmerrora[40],pipmerrorl[40],pipmerrorc[40],pipmerrorb[40];
  for(unsigned int ix=0;ix<40;++ix)
    {
      pipmerrora[ix]=sqrt(sqr(pipmerrorastat[ix])+sqr(pipmerrorasytm[ix]));
      pipmerrorl[ix]=sqrt(sqr(pipmerrorlstat[ix])+sqr(pipmerrorlsytm[ix]));
      pipmerrorc[ix]=sqrt(sqr(pipmerrorcstat[ix])+sqr(pipmerrorcsytm[ix]));
      pipmerrorb[ix]=sqrt(sqr(pipmerrorbstat[ix])+sqr(pipmerrorbsytm[ix]));
    }
  bins =vector<double>(pipmbins,pipmbins+41);
  data =vector<double>(pipmdataa,pipmdataa+40);
  error=vector<double>(pipmerrora,pipmerrora+40);
  _pipma=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pipmdatal,pipmdatal+40);
  error=vector<double>(pipmerrorl,pipmerrorl+40);
  _pipml=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pipmdatac,pipmdatac+40);
  error=vector<double>(pipmerrorc,pipmerrorc+40);
  _pipmc=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pipmdatab,pipmdatab+40);
  error=vector<double>(pipmerrorb,pipmerrorb+40);
  _pipmb=new_ptr(Histogram(bins,data,error));
  // opal pion data
  double pibinso[] = {0.227, 0.239, 0.251, 0.263, 0.276, 
		      0.290, 0.305, 0.320, 0.336, 0.353, 
		      0.371, 0.390, 0.410, 0.431, 0.453, 
		      0.476, 0.500, 0.525, 0.552, 0.580, 
		      0.610, 0.641, 0.673, 0.708, 0.744, 
		      0.782, 0.822, 0.864, 2.02, 2.12, 
		      2.23, 
		      2.34, 2.59, 2.72, 2.86, 3.01, 
		      3.16, 3.32, 3.49, 3.67, 3.86, 
		      4.06, 4.95, 6.05, 7.39, 9.02, 
		      11.02, 13.46, 16.44, 20.08, 29.95, 
		      45.60};
  double pidatao[]={  9.89   ,  9.98   , 10.37   , 10.38   , 10.42   ,
		      10.40   , 10.53   , 10.66   , 10.53   , 10.56   ,
		      10.46   , 10.23   , 10.29   , 10.02   ,  9.83   ,
		      9.62   ,  9.46   ,  9.23   ,  9.05   ,  8.71   ,
		      8.40   ,  8.12   ,  7.87   ,  7.50   ,  7.26   ,
		      6.95   ,  6.56   ,  0.0	 ,  2.374  ,  2.264  ,
		      2.103  ,  1.944  ,  1.672  ,  1.550  ,  1.420  ,
		      1.328  ,  1.221  ,  1.115  ,  1.035  ,  0.955  ,
		      0.879  ,  0.705  ,  0.478  ,  0.319  ,  0.2052 ,
		      0.1246 ,  0.0717 ,  0.0386 ,  0.0206 ,  0.0058 ,
		      0.0006 };
  double pierrorostat[]={0.07  ,0.07  ,0.07  ,0.07  ,0.07  ,
			 0.07  ,0.06  ,0.06  ,0.06  ,0.06  ,
			 0.06  ,0.06  ,0.06  ,0.05  ,0.05  ,
			 0.05  ,0.05  ,0.05  ,0.05  ,0.04  ,
			 0.04  ,0.04  ,0.04  ,0.04  ,0.03  ,
			 0.03  ,0.04  ,0.0   ,0.031 ,0.013 ,
			 0.018 ,0.010 ,0.009 ,0.013 ,0.008 ,
			 0.008 ,0.008 ,0.007 ,0.007 ,0.006 ,
			 0.006 ,0.003 ,0.002 ,0.001 ,0.0012,
			 0.0008,0.0006,0.0005,0.0004,0.0001,
			 0.0001};
  double pierrorosyst[]={0.29   ,0.29   ,0.31   ,0.31   ,0.31   ,
			 0.31   ,0.31   ,0.31   ,0.31   ,0.31   ,
			 0.31   ,0.30   ,0.30   ,0.29   ,0.29   ,
			 0.28   ,0.28   ,0.27   ,0.26   ,0.25   ,
			 0.25   ,0.24   ,0.23   ,0.22   ,0.21   ,
			 0.20     ,0.20     ,0.0,0.209   ,0.079   ,
			 0.036   ,0.027   ,0.024   ,0.024   ,0.022  ,
			 0.019   ,0.017   ,0.015   ,0.015   ,0.014   ,
			 0.012   ,0.009   ,0.007   ,0.005   ,0.0032  ,
			 0.0024  ,0.0016  ,0.0012  ,0.0013  ,0.0004  ,
			 0.0002 };
  double pierroro[51];
  for(unsigned int ix=0;ix<51;++ix)
    {pierroro[ix]=sqrt(sqr(pierrorostat[ix])+sqr(pierrorosyst[ix]));}
  bins =vector<double>(pibinso,pibinso+52);
  data =vector<double>(pidatao,pidatao+51);
  error=vector<double>(pierroro,pierroro+51);
  _pipm=new_ptr(Histogram(bins,data,error)); 
  // SLD kaons
  double Kbins[] = {0.014, 0.016, 0.022, 0.027, 0.033, 
		    0.038, 0.044, 0.049, 0.055, 0.060, 
		    0.066, 0.071, 0.077, 0.082, 0.088, 
		    0.099, 0.110, 0.121, 0.143, 0.164, 
		    0.186, 0.208, 0.230, 0.252, 0.274, 
		    0.296, 0.318, 0.351, 0.384, 0.417, 
		    0.450, 0.482, 0.526, 0.570, 0.658, 
		    0.768, 1.000};
  double Kdataa[]={28.59 ,  21.57 ,  21.62 ,  19.65 ,  18.02 ,
		   17.27 ,  15.78 , 14.664 , 13.535 , 12.599 ,
		   12.036 , 11.349 , 10.207 ,  9.571 ,  8.671 ,
		   7.784 ,  7.237 ,  5.746 ,  3.959 ,  3.473 , 
		   2.739 ,  2.452 ,  1.903 ,  1.574 ,  1.360 ,
		   1.118 ,  0.890 ,  0.683 ,  0.567 ,  0.433 ,
		   0.351 ,  0.264 ,  0.188 ,  0.122 , 0.0485 ,
		   0.0078};
  double Kerrorastat[]={0.64 ,   0.20 ,   0.19 ,   0.18 ,   0.16 ,
			0.17 ,   0.17 ,  0.194 ,  0.189 ,  0.176 ,
			0.165 ,  0.162 ,  0.164 ,  0.160 ,  0.113 ,
			0.114 ,  0.120 ,  0.089 ,  0.102 ,  0.134 ,
			0.047 ,  0.037 ,  0.030 ,  0.027 ,  0.024 ,
			0.022 ,  0.016 ,  0.014 ,  0.013 ,  0.012 ,
			0.011 ,  0.008 ,  0.008 ,  0.005 , 0.0037 ,
			0.0022};
  double Kerrorasytm[]={9.26,   1.57,   0.80,   0.53,   0.44,
			0.43,   0.47,  0.442,  0.503,  0.558,
			0.635,  0.622,  0.603,  0.566,  0.505,
			0.440,  0.395,  0.369,  0.381,  0.532,
			0.419,  0.163,  0.063,  0.036,  0.026,
			0.020,  0.017,  0.016,  0.015,  0.014,
			0.012,  0.010,  0.008,  0.006, 0.0027,
			0.0011};
  double Kdatal[] ={27.05 ,  20.00 ,  19.74 ,  17.52 ,  16.08 ,
		    15.04 ,  13.54 ,  11.87 ,  11.44 ,  10.64 ,
		    10.24 ,   9.67 ,   8.13 ,   7.98 ,   7.00 ,
		    6.36 ,   5.85 ,   4.89 ,   3.41 ,   2.84 ,
		    2.564 ,  2.401 ,  1.973 ,  1.643 ,  1.481 ,
		    1.211 ,  1.001 ,  0.746 ,  0.666 ,  0.559 ,
		    0.426 ,  0.363 ,  0.261 ,  0.183 ,  0.079 ,
		    0.008};
  double Kerrorlstat[]={1.27 , 0.42 , 0.40 , 0.37 , 0.37 ,
			0.34 , 0.34 , 0.34 , 0.33 , 0.30 ,
			0.29 , 0.29 , 0.27 , 0.28 , 0.19 ,
			0.19 , 0.20 , 0.15 , 0.17 , 0.22 ,
			0.082 ,0.067 ,0.054 ,0.048 ,0.044 ,
			0.039 ,0.029 ,0.025 ,0.023 ,0.022 ,
			0.020 ,0.016 ,0.015 ,0.010 ,0.007 ,
			0.004};
  double Kerrorlsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0};
  double Kdatac[] ={30.92 ,  22.43 ,  22.04 ,  20.82 ,  16.79 ,
		    16.68 ,  16.46 ,  15.81 ,  12.62 ,  12.24 ,
		    11.42 ,  10.95 ,  10.88 ,   9.62 ,   9.84 ,
		    8.08 ,   8.98 ,   6.59 ,   5.50 ,   5.12 ,
		    3.850 ,  3.087 ,  2.074 ,  1.960 ,  1.681 ,
		    1.368 ,  1.043 ,  0.874 ,  0.600 ,  0.408 ,
		    0.408 ,  0.243 ,  0.173 ,  0.064 ,  0.009 ,
		    0.008};
  double Kerrorcstat[]={3.86 , 1.37 , 1.27 , 1.17 , 1.15 ,
			1.15 , 1.06 , 1.08 , 0.99 , 0.92 ,
			0.87 , 0.85 , 0.84 , 0.81 , 0.59 ,
			0.58 , 0.63 , 0.45 , 0.51 , 0.68 ,
			0.245 ,0.190 ,0.145 ,0.132 ,0.119 ,
			0.104 ,0.076 ,0.068 ,0.058 ,0.050 ,
			0.050 ,0.037 ,0.034 ,0.020 ,0.011 ,
			0.008};
  double Kerrorcsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0};
  double Kdatab[] ={30.21 ,  23.06 ,  22.89 ,  21.64 ,  21.36 ,
		    21.36 ,  19.90 ,  18.91 ,  18.46 ,  17.43 ,
		    16.92 ,  15.62 ,  15.11 ,  13.18 ,  12.43 ,
		    11.56 ,   9.96 ,   7.17 ,   4.58 ,   4.20 ,
		    2.541 ,  2.009 ,  1.627 ,  1.116 ,  0.830 ,
		    0.640 ,  0.452 ,  0.337 ,  0.245 ,  0.149 ,
		    0.108 ,  0.057 ,  0.061 ,  0.012 ,  0.002 ,
		    0.001};
  double Kerrorbstat[]={1.99 , 0.62 , 0.60 , 0.55 , 0.53 ,
			0.56 , 0.57 , 0.60 , 0.58 , 0.54 ,
			0.53 , 0.52 , 0.52 , 0.50 , 0.36 ,
			0.37 , 0.38 , 0.27 , 0.29 , 0.36 ,
			0.126 ,0.096 ,0.078 ,0.062 ,0.053 ,
			0.045 ,0.032 ,0.028 ,0.024 ,0.020 ,
			0.018 ,0.012 ,0.013 ,0.005 ,0.003 ,
			0.001};
  double Kerrorbsytm[]={0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,
			0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,
			0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,
			0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0};
  double Kerrora[36],Kerrorl[36],Kerrorc[36],Kerrorb[36];
  for(unsigned int ix=0;ix<36;++ix)
    {
      Kerrora[ix]=sqrt(sqr(Kerrorastat[ix])+sqr(Kerrorasytm[ix]));
      Kerrorl[ix]=sqrt(sqr(Kerrorlstat[ix])+sqr(Kerrorlsytm[ix]));
      Kerrorc[ix]=sqrt(sqr(Kerrorcstat[ix])+sqr(Kerrorcsytm[ix]));
      Kerrorb[ix]=sqrt(sqr(Kerrorbstat[ix])+sqr(Kerrorbsytm[ix]));
    }
  bins =vector<double>(Kbins,Kbins+37);
  data =vector<double>(Kdataa,Kdataa+36);
  error=vector<double>(Kerrora,Kerrora+36);
  _kpma=new_ptr(Histogram(bins,data,error));
  data =vector<double>(Kdatal,Kdatal+36);
  error=vector<double>(Kerrorl,Kerrorl+36);
  _kpml=new_ptr(Histogram(bins,data,error));
  data =vector<double>(Kdatac,Kdatac+36);
  error=vector<double>(Kerrorc,Kerrorc+36);
  _kpmc=new_ptr(Histogram(bins,data,error));
  data =vector<double>(Kdatab,Kdatab+36);
  error=vector<double>(Kerrorb,Kerrorb+36);
  _kpmb=new_ptr(Histogram(bins,data,error));
    // OPAL kaons
  double Kbinso[] = {0.271, 0.281, 0.292, 0.304, 0.317, 
		     0.331, 0.346, 0.362, 0.379, 0.397, 
		     0.416, 0.436, 0.457, 0.480, 0.504, 
		     0.528, 0.555, 0.583, 0.612, 0.643, 
		     0.675, 0.709, 0.745, 0.783, 4.05, 
		     4.95, 
		     6.05, 7.38, 9.02, 11.01, 13.45, 
		     16.43, 20.06, 29.93, 45.60};
  double Kdatao[]={0.363 ,0.373 ,0.367 ,0.374 ,0.375 ,
		    0.410 ,0.431 ,0.418 ,0.456 ,0.499 ,
		    0.514 ,0.486 ,0.522 ,0.541 ,0.539 ,
		    0.557 ,0.587 ,0.590 ,0.586 ,0.591 ,
		    0.614 ,0.597 ,0.613 ,0.0   ,0.181 ,
		    0.138 ,0.103 ,0.0767,0.0536,0.0349,
		    0.0220,0.0127,0.0042,0.0004};
  double Kerrorostat[]={0.030 ,0.027 ,0.024 ,0.022 ,0.021 ,
			 0.020 ,0.020 ,0.018 ,0.018 ,0.018 ,
			 0.017 ,0.011 ,0.011 ,0.011 ,0.011 ,
			 0.011 ,0.011 ,0.010 ,0.010 ,0.010 ,
			 0.009 ,0.009 ,0.009 ,0.0   ,0.004 ,
			 0.003 ,0.001 ,0.0010,0.0006,0.0005,
			 0.0003,0.0003,0.0001,0.0001};
  double Kerrorosyst[]={0.028 ,0.028 ,0.025 ,0.023 ,0.019 ,
			 0.019 ,0.019 ,0.020 ,0.016 ,0.017 ,
			 0.016 ,0.011 ,0.011 ,0.012 ,0.018 ,
			 0.020 ,0.014 ,0.048 ,0.016 ,0.044 ,
			 0.024 ,0.025 ,0.031 , 0.0  ,0.015 ,
			 0.009 ,0.006 ,0.0042,0.0029,0.0018,
			 0.0012,0.0007,0.0003,0.0001};
  double Kerroro[34];
  for(unsigned int ix=0;ix<34;++ix)
    {Kerroro[ix]=sqrt(sqr(Kerrorostat[ix])+sqr(Kerrorosyst[ix]));}
  bins =vector<double>(Kbinso,Kbinso+35);
  data =vector<double>(Kdatao,Kdatao+34);
  error=vector<double>(Kerroro,Kerroro+34);
  _kpm=new_ptr(Histogram(bins,data,error));
  // SLD proton data
  double pbins[] = {0.014, 0.016, 0.022, 0.027, 0.033, 
		    0.038, 0.044, 0.049, 0.055, 0.060, 
		    0.066, 0.071, 0.077, 0.082, 0.088, 
		    0.099, 0.110, 0.121, 0.143, 0.164, 
		    0.186, 0.208, 0.230, 0.252, 0.274, 
		    0.296, 0.318, 0.351, 0.384, 0.417, 
		    0.450, 0.482, 0.526, 0.570, 0.658, 
		    0.768, 1.000};
  double pdataa[]={14.51 ,  17.32 ,  13.75 ,  11.12 ,  10.75 ,  9.048 ,  7.669 ,  7.410 ,  6.587 ,  5.788 ,  5.344 ,  4.987 ,  4.278 ,  4.117 ,  3.633 ,  3.036 ,  2.568 ,  2.165 ,  1.931 ,  1.603 ,  0.871 ,  0.912 ,  0.775 ,  0.639 ,  0.511 ,  0.419 ,  0.358 ,  0.254 ,  0.173 ,  0.141 , 0.0950 , 0.0688 , 0.0470 , 0.0241 , 0.0093 , 0.0015};
  double perrorastat[]={ 0.52  ,   0.27  ,   0.29  ,   0.17  ,   0.14  ,  0.123  ,  0.117  ,  0.113  ,  0.109  ,  0.105  ,  0.100  ,  0.104  ,  0.100  ,  0.101  ,  0.072  ,  0.076  ,  0.081  ,  0.069  ,  0.096  ,  0.133  ,  0.045  ,  0.030  ,  0.025  ,  0.022  ,  0.019  ,  0.016  ,  0.011  ,  0.009  ,  0.008  ,  0.007  , 0.0055  , 0.0039  , 0.0032  , 0.0017  , 0.0010  , 0.0003};
  double perrorasytm[]={5.08,  2.58,  2.50,  1.24,  0.47, 0.350, 0.298, 0.294, 0.259, 0.238, 0.228, 0.229, 0.242, 0.253, 0.269, 0.300, 0.357, 0.398, 0.452, 0.594, 0.255, 0.179, 0.062, 0.044, 0.033, 0.024, 0.018, 0.012, 0.008, 0.005,0.0036,0.0027,0.0018,0.0012,0.0006,0.0001};
  double pdatal[] ={13.98 , 17.63 , 13.42 , 10.57 ,  9.98 ,  8.37 ,  7.33 ,  7.79 ,  6.62 ,  5.88 ,  5.39 ,  5.22 ,  4.42 ,  4.44 ,  3.65 ,  3.11 ,  2.73 ,  2.15 ,  1.83 ,  1.84 , 0.905 , 1.065 , 0.822 , 0.762 , 0.628 , 0.486 , 0.446 , 0.306 , 0.230 , 0.197 , 0.145 , 0.108 , 0.070 , 0.036 , 0.013 , 0.003};
  double perrorlstat[]={0.99 , 0.58 , 0.60 , 0.36 , 0.31 , 0.26 , 0.24 , 0.23 , 0.22 , 0.20 , 0.19 , 0.19 , 0.18 , 0.19 , 0.13 , 0.13 , 0.15 , 0.12 , 0.16 , 0.24 ,0.078 ,0.054 ,0.044 ,0.038 ,0.033 ,0.029 ,0.022 ,0.018 ,0.015 ,0.013 ,0.011 ,0.008 ,0.006 ,0.003 ,0.002 ,0.001};
  double perrorlsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  double pdatac[] ={13.28, 15.22, 13.32,  9.60, 11.64, 10.07,  8.10,  6.09,  6.54,  6.36,  4.62,  4.43,  4.08,  3.67,  4.07,  2.98,  2.30,  2.39,  1.72,  0.31, 0.561, 0.978, 0.907, 0.652, 0.572, 0.494, 0.454, 0.314, 0.170, 0.103, 0.064, 0.015, 0.044, 0.007, 0.015, 0.001};
  double perrorcstat[]={ 2.94 ,  1.89 ,  1.86 ,  1.16 ,  1.01 ,  0.87 ,  0.76 ,  0.72 ,  0.67 ,  0.63 ,  0.59 ,  0.58 ,  0.55 ,  0.55 ,  0.42 ,  0.41 ,  0.43 ,  0.36 ,  0.50 ,  0.71 , 0.235 , 0.163 , 0.136 , 0.116 , 0.101 , 0.089 , 0.069 , 0.054 , 0.041 , 0.033 , 0.028 , 0.018 , 0.017 , 0.007 , 0.005 , 0.002};
  double perrorcsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  double pdatab[] ={13.79 , 17.93 , 16.41 , 12.11 , 10.32 ,  9.52 ,  7.72 ,  6.86 ,  6.19 ,  4.96 ,  4.82 ,  4.57 ,  4.07 ,  3.82 ,  3.29 ,  2.68 ,  2.24 ,  1.84 ,  1.91 ,  1.25 , 0.867 , 0.739 , 0.645 , 0.392 , 0.252 , 0.266 , 0.146 , 0.102 , 0.020 , 0.034 , 0.004 , 0.016 , 0.003 , 0.004 , 0.001 , 0.000};
  double perrorbstat[]={1.49 , 0.78 , 0.93 , 0.52 , 0.42 ,
			0.40 , 0.36 , 0.32 , 0.32 , 0.29 ,
			0.29 , 0.29 , 0.29 , 0.29 , 0.21 ,
			0.22 , 0.23 , 0.19 , 0.27 , 0.36 ,
			0.121 ,0.072 ,0.060 ,0.047 ,0.038 ,
			0.035 ,0.022 ,0.018 ,0.012 ,0.011 ,
			0.007 ,0.006 ,0.003 ,0.002 ,0.001 ,
			0.000};
  double perrorbsytm[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
			0.0,0.0,0.0,0.0,0.0,0.0};
  double perrora[36],perrorl[36],perrorc[36],perrorb[36];
  for(unsigned int ix=0;ix<36;++ix)
    {
      perrora[ix]=sqrt(sqr(perrorastat[ix])+sqr(perrorasytm[ix]));
      perrorl[ix]=sqrt(sqr(perrorlstat[ix])+sqr(perrorlsytm[ix]));
      perrorc[ix]=sqrt(sqr(perrorcstat[ix])+sqr(perrorcsytm[ix]));
      perrorb[ix]=sqrt(sqr(perrorbstat[ix])+sqr(perrorbsytm[ix]));
    }
  bins =vector<double>(pbins,pbins+37);
  data =vector<double>(pdataa,pdataa+36);
  error=vector<double>(perrora,perrora+36);
  _ppma=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pdatal,pdatal+36);
  error=vector<double>(perrorl,perrorl+36);
  _ppml=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pdatac,pdatac+36);
  error=vector<double>(perrorc,perrorc+36);
  _ppmc=new_ptr(Histogram(bins,data,error));
  data =vector<double>(pdatab,pdatab+36);
  error=vector<double>(perrorb,perrorb+36);
  _ppmb=new_ptr(Histogram(bins,data,error));
  // OPAL protons
  double pbinso[] = {0.406, 0.421, 0.438, 0.456, 0.475, 
		     0.495, 0.517, 0.541, 0.565, 0.592, 
		     0.620, 0.650, 0.681, 0.714, 0.750, 
		     0.787, 0.826, 0.867, 0.911, 0.957, 
		     1.005, 1.056, 1.109, 1.166, 1.225, 
		     1.287, 1.353, 1.422, 4.05, 4.95, 
		     6.04, 
		     7.38, 9.01, 11.01, 13.44, 16.42, 
		     20.05, 29.90, 45.60};
  double pdatao[]={0.169      ,0.174       ,0.171        ,0.185      ,
		   0.181      ,0.202       ,0.215      ,0.228      ,
		   0.230      ,0.230       ,0.236       ,0.239       ,
		   0.246       ,0.248       ,0.248      ,0.254      ,
		   0.260      ,0.260      ,0.257      ,0.263        ,
		   0.257      ,0.256        ,0.257        ,0.248        ,
		   0.241        ,0.250        ,0.245        ,0.0	   ,
		   0.0606      ,0.0517      ,0.0352      ,0.0214      ,0.0152      ,0.0093      ,0.0045      ,0.0015      ,0.00056    ,0.000015};
  double perrorostat[]={0.010         ,0.009         ,0.009         ,0.008         ,0.008         ,0.008         ,0.008         ,0.008         ,0.008         ,0.008         ,0.007         ,0.007         ,0.007         ,0.007         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.004         ,0.0	         ,0.0036        ,0.0029        ,0.0011        ,0.0011        ,0.0006        ,0.0004        ,0.0003        ,0.0002        ,0.00005       ,0.000004};
  double perrorosyst[]={0.013   ,0.015   ,0.012   ,0.015   ,0.006   ,0.010   ,0.012   ,0.014   ,0.010   ,0.007   ,0.012   ,0.008   ,0.006   ,0.009   ,0.009   ,0.008   ,0.007   ,0.007   ,0.006   ,0.007   ,0.021   ,0.027   ,0.029   ,0.027   ,0.017   ,0.016   ,0.021   ,   0.0  ,0.0129  ,0.0062  ,0.0031  ,0.0023  ,0.0021  ,0.0013  ,0.0006  ,0.0005  ,0.00014 ,0.000026};
  double perroro[38];
  for(unsigned int ix=0;ix<38;++ix)
    {perroro[ix]=sqrt(sqr(perrorostat[ix])+sqr(perrorosyst[ix]));}
  bins =vector<double>(pbinso,pbinso+39);
  data =vector<double>(pdatao,pdatao+38);
  error=vector<double>(perroro,perroro+38);
  _ppm=new_ptr(Histogram(bins,data,error)); 
  // OPAL light quarks
  double udsbinso[] = {0.00, 0.01, 0.02, 0.03, 0.04, 
		       0.05, 0.06, 0.07, 0.08, 0.09, 
		       0.10, 0.12, 0.14, 0.16, 0.18, 
		       0.20, 0.25, 0.30, 0.40, 0.50, 
		       0.60, 0.80, 1.00};
  double udsdatao[]={388.  ,390. ,241.  ,176.  ,122.6 ,
		     95.7   ,79.3   ,65.0   ,53.3   ,43.3   ,
		     35.1   ,27.7   ,21.2   ,17.1   ,13.3   ,
		     9.86   ,6.30   ,3.42   ,1.50   ,0.668  ,
		     0.241   ,  0.031};
  double udserrorostat[]={5.  ,5.  ,4.  ,3.,2.7   ,2.2 ,1.9 ,1.6 ,1.6 ,1.5 ,0.9 ,0.7 ,0.7 ,0.6 ,0.6 ,0.26,0.19,0.09,0.05,0.033   ,0.008   ,0.007};
  double udserrorosyst[]={9. ,10.,7. ,5. ,3.9,2.9,2.3,1.7,1.3,1.0,0.7,0.4,0.4,0.3,0.3,0.30   ,0.25   ,0.17   ,0.10   ,0.048  ,0.024  ,0.007};
  double udserroro[22];
  for(unsigned int ix=0;ix<22;++ix)
    {udserroro[ix]=sqrt(sqr(udserrorostat[ix])+sqr(udserrorosyst[ix]));}
  bins =vector<double>(udsbinso,udsbinso+23);
  data =vector<double>(udsdatao,udsdatao+22);
  error=vector<double>(udserroro,udserroro+22);
  _udsxp=new_ptr(Histogram(bins,data,error));
  double udsxibinso[] = {0.0, 0.2, 0.4, 0.6, 0.8, 
			 1.0, 1.2, 1.4, 1.6, 1.8, 
			 2.0, 2.2, 2.4, 2.6, 2.8, 
			 3.0, 3.2, 3.4, 3.6, 3.8, 
			 4.0, 4.2, 4.4, 4.6, 4.8, 
			 5.0, 5.2, 5.4, 5.6, 5.8};
  double udsxidatao[]={0.024    , 0.114    , 0.277    , 0.529    ,  0.86      ,
		       1.31      ,  1.76      ,  2.22      ,  2.70      ,  3.06      ,
		       3.76      ,  4.03      ,  4.48      ,  5.12      ,  5.22      ,
		       5.26      ,  6.24      ,  6.02      ,  5.89      ,  6.04      ,
		       5.85      ,  5.58      ,  5.15      ,  4.21      ,  3.99      ,
		       2.94      ,  2.14      ,  1.93      ,  1.43};
  double udsxierrorostat[]={0.006    ,0.003    ,0.009    ,0.016    ,0.02     ,0.03     ,0.05     ,0.06     ,0.07     ,0.08     ,0.09     ,0.10     ,0.10     ,0.11     ,0.12     ,0.13     ,0.12     ,0.12     ,0.13     ,0.12     ,0.13     ,0.11     ,0.11     ,0.12     ,0.10     ,0.10     ,0.10     ,0.08     ,0.09};
  double udsxierrorosyst[]={0.006,0.011,0.025,0.032,0.05 ,0.06 ,0.07 ,0.06 ,0.06 ,0.09 ,0.11 ,0.13 ,0.18 ,0.16 ,0.17 ,0.19 ,0.21 ,0.20 ,0.26 ,0.20 ,0.20 ,0.14 ,0.09 ,0.24 ,0.14 ,0.15 ,0.12 ,0.13 ,0.23 };
  double udsxierroro[22];
  for(unsigned int ix=0;ix<22;++ix)
    {udsxierroro[ix]=sqrt(sqr(udsxierrorostat[ix])+sqr(udsxierrorosyst[ix]));}
  bins =vector<double>(udsxibinso,udsxibinso+23);
  data =vector<double>(udsxidatao,udsxidatao+22);
  error=vector<double>(udsxierroro,udsxierroro+22);
  _udsxip=new_ptr(Histogram(bins,data,error));
  // lambdas
  double Lbinso[] = {0.012, 0.014, 0.016, 0.018, 0.020, 
		    0.025, 0.030, 0.035, 0.040, 0.050, 
		    0.060, 0.080, 0.100, 0.120, 0.140, 
		    0.160, 0.180, 0.200, 0.250, 0.300, 
		    0.350, 0.400, 0.500, 0.600, 0.700, 
		    0.900};
  double Ldatao[]={2.97    ,3.43    ,3.74    ,3.70    ,3.69    ,3.68    ,3.70    ,3.41    ,3.18    ,2.66    ,2.04    ,1.52    ,1.19    ,0.956   ,0.771   ,0.630   ,0.528   ,0.408   ,0.269   ,0.182   ,0.129   ,0.078   ,0.035   ,0.0118  ,0.0026};
  double Lerrorostat[]={0.35    ,0.30    ,0.29    ,0.21    ,0.18    ,0.16    ,0.15    ,0.14    ,0.11    ,0.09    ,0.06    ,0.04    ,0.03    ,0.023   ,0.018   ,0.015   ,0.013   ,0.010   ,0.008   ,0.007   ,0.006   ,0.005   ,0.003   ,0.0019  ,0.0012};
  double Lerrorosyst[]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
  double Lerroro[25];
  for(unsigned int ix=0;ix<25;++ix)
    {Lerroro[ix]=sqrt(sqr(Lerrorostat[ix])+sqr(Lerrorosyst[ix]));}
  bins =vector<double>(Lbinso,Lbinso+26);
  data =vector<double>(Ldatao,Ldatao+25);
  error=vector<double>(Lerroro,Lerroro+25);
  _lpm=new_ptr(Histogram(bins,data,error));
}

inline int IdentifiedParticleAnalysis::getFlavour(const tPVector &pv) {
  tPVector::const_iterator it;
  for(it = pv.begin(); it!=pv.end(); it++) 
    if (abs((*it)->id()) < 7) break; 
  return abs((*it)->id());
}

}
