// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BFragmentationAnalysisHandler class.
//

namespace Herwig {

inline BFragmentationAnalysisHandler::BFragmentationAnalysisHandler() {}

inline BFragmentationAnalysisHandler::BFragmentationAnalysisHandler(const BFragmentationAnalysisHandler & x)
  : AnalysisHandler(x) {}

inline IBPtr BFragmentationAnalysisHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr BFragmentationAnalysisHandler::fullclone() const {
  return new_ptr(*this);
}

inline void BFragmentationAnalysisHandler::doupdate() throw(UpdateException) {
  AnalysisHandler::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BFragmentationAnalysisHandler::doinit() throw(InitException) {
  AnalysisHandler::doinit();
}

inline void BFragmentationAnalysisHandler::dofinish() {
  AnalysisHandler::dofinish();
  // output the histograms
  string fname = CurrentGenerator::current().filename() + string("-") + name() + string(".top");
  ofstream output(fname.c_str());
  using namespace HistogramOptions;
  _fragBxE->topdrawOutput(output,Frame|Errorbars,
			  "RED",
			  "B Hadron fragmentation function compared to SLD data",
			  "                                                    ",
			  "1/SdS/dx0B1",
			  "  G G   X X",
			  "x0B1",
			  " X X");
  _fragbquarkxE->topdrawOutput(output,Smooth,
		       "RED",
		       "b quark fragmentation function compared to SLD data",
		       "                                                    ",
		       "1/SdS/dx0B1",
		       "  G G   X X",
		       "x0B1",
		       " X X");
  _fragBxEa->topdrawOutput(output,Frame|Errorbars,
			   "RED",
			   "B Hadron framgentation function compared to ALEPH data",
			   "                                                      ",
			   "1/SdS/dx0B1",
			   "  G G   X X",
			   "x0B1",
			   " X X");
  _fragbquarkxE->topdrawOutput(output,Smooth,
		      "RED",
		      "b quark fragmentation function compared to ALEPH data",
		      "                                                      ",
		      "1/SdS/dx0B1",
		      "  G G   X X",
		      "x0B1",
		      " X X");
  _fragbquarkjetmass->topdrawOutput(output,Frame|Smooth,
		       "RED",
		       "b quark jet mass",
		       "                                                    ",
		       "1/SdS/dm0J1223",
		       "  G G   X XX X",
		       "m0J1223",
		       " X XX X");
  output.close();
}

inline void BFragmentationAnalysisHandler::doinitrun() {
  AnalysisHandler::doinitrun();
  // SLD binning
  double BxEbins[] = {0.00, 0.04, 0.08, 0.12, 0.16, 
		      0.20, 0.24, 0.28, 0.32, 0.36, 
		      0.40, 0.44, 0.48, 0.52, 0.56, 
		      0.60, 0.64, 0.68, 0.72, 0.76, 
		      0.80, 0.84, 0.88, 0.92, 0.96, 
		      1.0};
  double BxEdata[] = {0.000,0.000,0.000,0.116,0.198,
		      0.247,0.264,0.308,0.370,0.426,
		      0.501,0.577,0.685,0.833,1.055,
		      1.311,1.667,2.080,2.566,2.934,
		      3.104,2.856,1.954,0.841,0.108};
  double BxEerror[]= {0.000,0.000,0.000,0.030,0.037,
		      0.030,0.029,0.032,0.033,0.034,
		      0.039,0.041,0.042,0.053,0.074,
		      0.089,0.088,0.084,0.116,0.178,
		      0.235,0.179,0.162,0.215,0.062};
  vector<double> bins(BxEbins,BxEbins+26), data(BxEdata,BxEdata+25),
    error(BxEerror,BxEerror+25);
  _fragBxE  = new_ptr(Histogram(bins,data,error));
  // ALEPH binning
  double BxEabins[] = {0.0   ,0.1   ,0.25  ,0.35  ,0.45  , 
		       0.55  ,0.6   ,0.65  ,0.7   ,0.725 , 
		       0.75  ,0.775 ,0.8   ,0.825 ,0.85  , 
		       0.875 ,0.9   ,0.925 ,0.95  ,0.975 , 
		       1.};
  double BxEadata[] = {0.0000,0.1193,0.2810,0.4510,0.7410,
		       1.0180,1.2760,1.7020,2.1080,2.3520,
		       2.5360,2.7960,2.9840,3.1000,2.9080,
		       2.6440,2.0880,1.3480,0.4840,0.0400};
  double BxEaerrora[] = {0.0000,0.0487,0.0470,0.0390,0.0590,
			 0.0660,0.0640,0.0660,0.0760,0.0840,
			 0.0920,0.1040,0.1080,0.1000,0.0880,
			 0.0880,0.1160,0.1240,0.0760,0.0120};
  double BxEaerrorb[] = {0.0000,0.0573,0.0350,0.0430,0.0660,
			 0.0680,0.0640,0.0740,0.0960,0.1120,
			 0.1240,0.1360,0.1320,0.1240,0.1040,
			 0.1360,0.1880,0.1880,0.1000,0.0200};
  double BxEaerror[20];
  for(unsigned int ix=0;ix<20;++ix){BxEaerror[ix]=sqrt(sqr(BxEaerrora[ix])+
						      sqr(BxEaerrorb[ix]));}
  bins  = vector<double>(BxEabins,BxEabins+21);
  data  = vector<double>(BxEadata,BxEadata+20);
  error = vector<double>(BxEaerror,BxEaerror+20);
  _fragBxEa = new_ptr(Histogram(bins,data,error));
  _fragbquarkxE = new_ptr(Histogram(0.,1.0,100));
  _fragbquarkjetmass = new_ptr(Histogram(0.,90.0,90));
}

inline void BFragmentationAnalysisHandler::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  AnalysisHandler::rebind(trans);
}

inline IVector BFragmentationAnalysisHandler::getReferences() {
  IVector ret = AnalysisHandler::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
