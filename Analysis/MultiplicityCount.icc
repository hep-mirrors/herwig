// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MultiplicityCount class.
//

namespace Herwig {

inline MultiplicityInfo::MultiplicityInfo(double inmult,double inerror,
					  ParticleSpecies intype)
  : mult(inmult), error(inerror), type(intype), 
    actualCount(0), sumofsquares(0.0)
{}
  
inline double MultiplicityInfo::mean(double N) {
  return actualCount / N;
}

inline double MultiplicityInfo::stderror(double N) {
  return sqrt( (sumofsquares / N  -  sqr(mean(N))) / N );
}

inline bool MultiplicityInfo::serious(double N) {
  return (abs(mean(N)-mult) > 3.0*error);
}

inline IBPtr MultiplicityCount::clone() const {
  return new_ptr(*this);
}

inline IBPtr MultiplicityCount::fullclone() const {
  return new_ptr(*this);
}

inline void MultiplicityCount::dofinish() {
  AnalysisHandler::dofinish();
  cerr << "\nCount of particles involved in hard process:\n";
  for (map<long,long>::const_iterator it = _collisioncount.begin();
       it != _collisioncount.end(); ++ it) {
    string name = generator()->getParticleData(it->first)->PDGName();
    cerr << name << '\t' << it->second << '\n';
  }

  cerr << "\nFinal state particle count:\n";
  for (map<long,long>::const_iterator it = _finalstatecount.begin();
       it != _finalstatecount.end(); ++ it) {
    string name = generator()->getParticleData(it->first)->PDGName();
    cerr << name << '\t' << it->second << '\n';
  }

  cerr << "\nParticle multiplicities (compared to LEP data):\n";
  for (map<long,MultiplicityInfo>::const_iterator it = _data.begin();
       it != _data.end();
       ++it) {
    MultiplicityInfo multiplicity = it->second;

    string name = (it->first==0 ? "All charged" : generator()->getParticleData(it->first)->PDGName() );

    double N = generator()->currentEventNumber();
    
    cerr << it->first << " \t" << name << '\t' << ' ' << multiplicity.actualCount << '\t'
	 << multiplicity.mean(N) << ' ' 
	 << multiplicity.stderror(N) << " === " 
	 << multiplicity.mult << ' ' 
	 << multiplicity.error << " === ";
    if (multiplicity.serious(N)) 
      cerr << "!!!";
    cerr << '\n';

  }


}

}
