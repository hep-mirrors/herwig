// -*- C++ -*-
//
// LEPBMultiplicity.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the LEPBMultiplicity class.
//

namespace Herwig {

inline BranchingInfo::BranchingInfo(double inmult,double inerror)
  : obsBranching(inmult), obsError(inerror), actualCount(0), 
    sumofsquares(0.0)
{}
  
inline double BranchingInfo::simBranching(long N, BranchingInfo den) {
  return den.actualCount>0 ? 
    double(actualCount) / double(den.actualCount) : 
    double(actualCount) / double(N)       ;
}

inline double BranchingInfo::simError(long N, BranchingInfo den) {
  double rn = N*( sumofsquares/double(N)  -  sqr(simBranching(N))) /
    sqr(double(actualCount));
  double rd = den.actualCount>0 ?
    N*( den.sumofsquares/double(N)  -  sqr(den.simBranching(N))) /
    sqr(double(den.actualCount)) : 0.;
  return simBranching(N,den)*sqrt(rn+rd);
}

inline double BranchingInfo::nSigma(long N,BranchingInfo den) {
  return obsBranching == 0.0 ?
    0.0 :
    (simBranching(N,den) - obsBranching) 
    / sqrt(sqr(simError(N,den)) + sqr(obsError));
}
}
