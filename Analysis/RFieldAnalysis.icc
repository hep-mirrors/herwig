// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RFieldAnalysis class.
//

namespace Herwig {

inline RFieldAnalysis::RFieldAnalysis(): thelow(30), 
					 theup(50), theDir(".") {}

inline RFieldAnalysis::RFieldAnalysis(const RFieldAnalysis & x)
  : AnalysisHandler(x),
    thelow(x.thelow), theup(x.theup), theDir(x.theDir) {}

inline IBPtr RFieldAnalysis::clone() const {
  return new_ptr(*this);
}

inline IBPtr RFieldAnalysis::fullclone() const {
  return new_ptr(*this);
}

inline void RFieldAnalysis::doupdate() throw(UpdateException) {
  AnalysisHandler::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void RFieldAnalysis::doinit() throw(InitException) {
  AnalysisHandler::doinit();
}

inline void RFieldAnalysis::doinitrun() {
  AnalysisHandler::doinitrun();
  //equal size bins from thelow to theup
  for(int i=0; i<(theup-thelow); i++){
    theNTow.push_back(Statistic());
    theNTrans.push_back(Statistic());
    theNAway.push_back(Statistic());
    thePtsumTow.push_back(Statistic());
    thePtsumTrans.push_back(Statistic());
    thePtsumAway.push_back(Statistic());
  }
}

inline void RFieldAnalysis::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  AnalysisHandler::rebind(trans);
}

inline IVector RFieldAnalysis::getReferences() {
  IVector ret = AnalysisHandler::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
