dnl Process this file with autoconf to produce a configure script
AC_INIT(src/Herwig++.cc)
dnl AM_INIT_AUTOMAKE(Herwig++,0.9)
dnl AM_INIT_AUTOMAKE(Herwig++,0.9)
dnl AM_DISABLE_STATIC
dnl AC_PREFIX_DEFAULT(${PWD}/..)

dnl Check for programs
dnl AC_PROGRAMS_CHECK(CC, gcc cc)
AC_PROGRAMS_CHECK(CXX, g++ cl KCC CC cxx xlC aCC)
dnl AC_PROG_INSTALL
dnl AC_PROG_MAKE_SET

dnl Check for the standard utilties and programs
AC_LANG_CPLUSPLUS
AC_PROGRAMS_CHECK(AR, ar)
if test -z "$ARFLAGS"; then
  ARFLAGS="rv "
fi
AC_PROG_RANLIB

if test -z "$CLHEPPATH"; then
  CLHEPPATH="/usr/local"
fi

dnl Now lets check for needed paths, CLHEP and ThePEG
AC_MSG_CHECKING([CLHEPPATH is set])
if test -z "$CLHEPPATH"; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Set CLHEPPATH to point to the path of CLHEP before running configure.])
else
  AC_MSG_RESULT("$CLHEPPATH")
fi
AC_MSG_CHECKING([CLHEPLIB is])
if test -z "$CLHEPLIB"; then
  CLHEPLIB="-lCLHEP"
fi
AC_MSG_RESULT("$CLHEPLIB")
AC_MSG_CHECKING([CLHEPINCLUDE is])
if test -z "$CLHEPINCLUDE"; then
  CLHEPINCLUDE=-I$CLHEPPATH/include
fi
AC_MSG_RESULT("$CLHEPINCLUDE")
AC_MSG_CHECKING([THEPEGPATH is set])
if test -z "$THEPEGPATH"; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Set THEPEGPATH to point to the path of ThePEG before running configure.])
fi
AC_MSG_RESULT("$THEPEGPATH")
AC_MSG_CHECKING([THEPEGLIB is])
if test -z "$THEPEGLIB"; then
  THEPEGLIB="-lThePEGRepo -lThePEGHandlers -lThePEGPDF -lThePEGME -lThePEGEvent -lThePEGPDT -lThePEGSM -lThePEGInter -lThePEG -lThePEGHelicity"
fi
AC_MSG_RESULT("$THEPEGLIB")
AC_MSG_CHECKING([THEPEGINCLUDE is])
if test -z "$THEPEGINCLUDE"; then
  THEPEGINCLUDE=-I$THEPEGPATH/include
fi
AC_MSG_RESULT("$THEPEGINCLUDE")

dnl Now lets see if the libraries work properly
oldLIB="$LIBS"
oldLDFLAGS="$LDFLAGS"
oldCXXFLAGS="$CXXFLAGS"
LIBS="$LIBS $CLHEPLIB"
LDFLAGS="$LDFLAGS -L$CLHEPPATH/lib"
CXXFLAGS="$CXXFLAGS $CLHEPINCLUDE"

dnl check CLHEP first
AC_MSG_CHECKING([that CLHEP works])
AC_TRY_LINK(
#include <CLHEP/Random/Random.h>
,HepRandom r; r.flat();
, AC_MSG_RESULT([yes])
, AC_MSG_RESULT([no])
AC_MSG_ERROR([CLHEP must be installed to continue.]))

dnl check ThePEG now
LIBS="$oldLIBS $THEPEGLIB -ldl -lCLHEP"
LDFLAGS="$oldLDFLAGS  $CLHEPINCLUDE -L$THEPEGPATH/lib/ThePEG/current"
CXXFLAGS="$oldCXXFLAGS $THEPEGINCLUDE"


AC_MSG_CHECKING([that ThePEG works])
AC_TRY_LINK(
#include <ThePEG/Repository/Repository.h>
, breakThePEG();
, AC_MSG_RESULT([yes])
, AC_MSG_RESULT([no])
AC_MSG_ERROR([ThePEG must be installed to continue.]))

LIBS="$oldLIB"
LDFLAGS="$oldLDFLAGS"
CXXFLAGS="$oldCXXFLAGS"

dnl now lets check the interfaces...to be done later
dnl KTJETPATH="/var/nwork/pcck/gieseke/mc/ktjet"
dnl KTJETLIBS="-L$KTJETPATH/lib -lKtEvent"
AC_MSG_CHECKING([KTJETPATH is])
if test -z "$KTJETPATH"; then
  KTJETPATH="***No KtJet path set...won't build KtJet interface***"
fi
AC_MSG_RESULT("$KTJETPATH")
AC_MSG_CHECKING([KTJETLIBS is])
if test -z "$KTJETLIBS"; then
  KTJETLIBS="-L$KTJETPATH/lib -lKtEvent"
fi
AC_MSG_RESULT("$KTJETLIBS")

AMEGICLIBS="-lAmegic -lAmplitude -lAmplTools -lISR -lModel -lPhasespace -lProcess -lString -lVector -lZfunctions"
AC_MSG_CHECKING([AMEGICPATH is])
if test -z "$AMEGICPATH"; then	
  AMEGICPATH="***No AMEGIC path set...won't build AMEGIC interface***"
fi
AC_MSG_RESULT("$AMEGICPATH")

BUILDDIR=`pwd`

AC_SUBST(AR)
AC_SUBST(ARFLAGS)
AC_SUBST(RANLIB)
AC_SUBST(CLHEPPATH)
AC_SUBST(CLHEPLIB)
AC_SUBST(CLHEPINCLUDE)
AC_SUBST(THEPEGPATH)
AC_SUBST(THEPEGLIB)
AC_SUBST(THEPEGINCLUDE)
AC_SUBST(BUILDDIR)
AC_SUBST(prefix)
AC_SUBST(KTJETPATH)
AC_SUBST(KTJETLIBS)
AC_SUBST(AMEGICPATH)
AC_SUBST(AMEGICLIBS)

dnl Generate makefiles for each subdirectory
AC_OUTPUT(Config/Makefile.common Decay/Makefile Hadronization/Makefile \
          Interfaces/Makefile MatrixElement/Makefile Shower/Makefile \
       	  Utilities/Makefile src/Makefile UnderlyingEvent/Makefile \
          PDF/Makefile Helicity/WaveFunction/Makefile \
          Helicity/Correlations/Makefile Decay/Tau/Makefile Decay/VectorMeson/Makefile)
 