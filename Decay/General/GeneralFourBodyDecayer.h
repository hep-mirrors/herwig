// -*- C++ -*-
#ifndef HERWIG_GeneralFourBodyDecayer_H
#define HERWIG_GeneralFourBodyDecayer_H
//
// This is the declaration of the GeneralFourBodyDecayer class.
//

#include "Herwig++/Decay/DecayIntegrator.h"
#include "Herwig++/Models/General/TwoBodyPrototype.h"

namespace Herwig {

using namespace ThePEG;

/**
 * Here is the documentation of the GeneralFourBodyDecayer class.
 *
 * @see \ref GeneralFourBodyDecayerInterfaces "The interfaces"
 * defined for GeneralFourBodyDecayer.
 */
class GeneralFourBodyDecayer: public DecayIntegrator {

public:

  /**
   * The default constructor.
   */
  GeneralFourBodyDecayer();

  /** @name Virtual functions required by the Decayer class. */
  //@{
  /**
   * For a given decay mode and a given particle instance, perform the
   * decay and return the decay products. As this is the base class this
   * is not implemented.
   * @return The vector of particles produced in the decay.
   */
  virtual ParticleVector decay(const Particle & parent,
			       const tPDVector & children) const;

  /**
   * Which of the possible decays is required
   * @param cc Is this mode the charge conjugate
   * @param parent The decaying particle
   * @param children The decay products
   */
  virtual int modeNumber(bool & cc, tcPDPtr parent,const tPDVector & children) const;

  /**
   *  Set the diagrams
   */
  bool setDecayInfo(PDPtr incoming,vector<PDPtr> outgoing,
		    const vector<PrototypeVertexPtr> & process);
  //@}

public:

  /** @name Functions used by the persistent I/O system. */
  //@{
  /**
   * Function used to write out object persistently.
   * @param os the persistent output stream written to.
   */
  void persistentOutput(PersistentOStream & os) const;

  /**
   * Function used to read in object persistently.
   * @param is the persistent input stream read from.
   * @param version the version number of the object when written.
   */
  void persistentInput(PersistentIStream & is, int version);
  //@}

  /**
   * The standard Init function used to initialize the interfaces.
   * Called exactly once for each class by the class description system
   * before the main function starts or
   * when this class is dynamically loaded.
   */
  static void Init();

private:

  /**
   * The assignment operator is private and must never be called.
   * In fact, it should not even be implemented.
   */
  GeneralFourBodyDecayer & operator=(const GeneralFourBodyDecayer &);

private:

  /**
   *  Store the incoming particle
   */
  PDPtr _incoming;

  /**
   *  Outgoing particles
   */
  vector<PDPtr> _outgoing;

  /**
   *  Store the diagrams for the decay
   */
  vector<NBDiagram> _diagrams;

//   /**
//    *  Map between the diagrams and the phase-space channels
//    */
//   vector<unsigned int> _diagmap;

//   /**
//    * Store colour factors for ME calc.
//    */
//   vector<DVector> _colour;

//   /**
//    *  Store cololur factors for ME calc at large N_c
//    */
//   vector<DVector> _colourLargeNC;

//   /**
//    * The number of colourflows.
//    */
//   unsigned int _nflow;

//   /**
//    *  Reference to object to calculate the partial width
//    */
//   mutable WidthCalculatorBasePtr _widthcalc;

//   /**
//    *  Option for the treatment of the widths 
//    */
//   unsigned int _widthopt;

  /**
   * Store a decay tag for this mode that can be tested when
   * trying to determine whether it can be generated by
   * this Decayer
   */
  string _reftag;

  /**
   * Store a decay tag for the cc-mode that can be tested when
   * trying to determine whether it can be generated by
   * this Decayer
   */
  string _reftagcc;

//   /**
//    *  The colour flow
//    */
//   mutable unsigned int _iflow;
};

}

#endif /* HERWIG_GeneralFourBodyDecayer_H */
