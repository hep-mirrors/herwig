// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the TauDecayerBase class.
//
//  Author: Peter Richardson
//

namespace Herwig {

using namespace ThePEG;
using Helicity::RhoDMatrix;

// default constructor 
inline TauDecayerBase::TauDecayerBase() 
{
  // default value of the fermi constant taken from PDG 2002
  _GF = 1.16639E-5/GeV2;
}
  
// copy constructor
inline TauDecayerBase::TauDecayerBase(const TauDecayerBase & x)
    : DecayIntegrator(x), _GF(x._GF) {}
  
inline void TauDecayerBase::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
  //  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
  //  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
  //  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
  //  touch()
    // Touch if anything has changed.
}
  
inline void TauDecayerBase::doinit() throw(InitException) {
  DecayIntegrator::doinit();
}
  
inline void TauDecayerBase::dofinish() {
  DecayIntegrator::dofinish();
}
  
inline void TauDecayerBase::doinitrun() {
  DecayIntegrator::doinitrun();
}
  
inline void TauDecayerBase::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}
  
inline IVector TauDecayerBase::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}
  
}
