// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Tau3MesonDefaultDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {

using namespace ThePEG;

inline Tau3MesonDefaultDecayer::Tau3MesonDefaultDecayer() 
{
  // the pion decay constant
  _fpi=130.7*MeV/sqrt(2.);
  // set the initial weights for the resonances
  // the rho weights
  _rhoF123wgts.push_back(1.0);_rhoF123wgts.push_back(-0.145);
  _rhoF123wgts.push_back(0.);
  _rhoF5wgts.push_back(-26.);_rhoF5wgts.push_back(6.5);
  _rhoF5wgts.push_back(1.);
  // the Kstar weights
  _KstarF123wgts.push_back(1.);_KstarF123wgts.push_back(0.);
  _KstarF123wgts.push_back(0.);
  _KstarF5wgts.push_back(1.);_KstarF5wgts.push_back(0.);
  _KstarF5wgts.push_back(0.);
  // relative rho/Kstar weights
  _rhoKstarwgt=-0.2;
  // local values of the a_1 parameters
  _a1parameters=true;_a1mass=1.251*GeV;_a1width=0.599*GeV;
  // local values of the K_1 parameters
  _K1parameters=true;_K1mass=1.402*GeV,_K1width=0.174*GeV;
  // local values of the rho parameters
  _rhoparameters=true;
  _rhoF123masses.push_back(0.773*GeV);_rhoF123masses.push_back(1.370*GeV);
  _rhoF123masses.push_back(1.750*GeV);
  _rhoF123widths.push_back(0.145*GeV);_rhoF123widths.push_back(0.510*GeV);
  _rhoF123widths.push_back(0.120*GeV);
  _rhoF5masses.push_back(0.773*GeV);_rhoF5masses.push_back(1.500*GeV);
  _rhoF5masses.push_back(1.750*GeV);
  _rhoF5widths.push_back(0.145*GeV);_rhoF5widths.push_back(0.220*GeV);
  _rhoF5widths.push_back(0.120*GeV);
  // local values for the Kstar parameters
  _Kstarparameters=true;
  _KstarF123masses.push_back(0.892*GeV);
  _KstarF123widths.push_back(0.0513*GeV);
  _KstarF5masses.push_back(0.892*GeV);
  _KstarF5widths.push_back(0.0513*GeV);
  // initialization of the a_1 running width
  _initializea1=false;
  Energy2 a1q2in[200]={0,15788.6,31577.3,47365.9,63154.6,78943.2,94731.9,110521,
		       126309,142098,157886,173675,189464,205252,221041,236830,
		       252618,268407,284196,299984,315773,331562,347350,363139,
		       378927,394716,410505,426293,442082,457871,473659,489448,
		       505237,521025,536814,552603,568391,584180,599969,615757,
		       631546,647334,663123,678912,694700,710489,726278,742066,
		       757855,773644,789432,805221,821010,836798,852587,868375,
		       884164,899953,915741,931530,947319,963107,978896,994685,
		       1.01047e+06,1.02626e+06,1.04205e+06,1.05784e+06,1.07363e+06,
		       1.08942e+06,1.10521e+06,1.12099e+06,1.13678e+06,1.15257e+06,
		       1.16836e+06,1.18415e+06,1.19994e+06,1.21573e+06,1.23151e+06,
		       1.2473e+06,1.26309e+06,1.27888e+06,1.29467e+06,1.31046e+06,
		       1.32625e+06,1.34203e+06,1.35782e+06,1.37361e+06,1.3894e+06,
		       1.40519e+06,1.42098e+06,1.43677e+06,1.45256e+06,1.46834e+06
		       ,1.48413e+06,1.49992e+06,1.51571e+06,1.5315e+06,1.54729e+06,
		       1.56308e+06,1.57886e+06,1.59465e+06,1.61044e+06,1.62623e+06,
		       1.64202e+06,1.65781e+06,1.6736e+06,1.68939e+06,1.70517e+06,
		       1.72096e+06,1.73675e+06,1.75254e+06,1.76833e+06,1.78412e+06,
		       1.79991e+06,1.81569e+06,1.83148e+06,1.84727e+06,1.86306e+06,
		       1.87885e+06,1.89464e+06,1.91043e+06,1.92621e+06,1.942e+06,
		       1.95779e+06,1.97358e+06,1.98937e+06,2.00516e+06,2.02095e+06,
		       2.03674e+06,2.05252e+06,2.06831e+06,2.0841e+06,2.09989e+06,
		       2.11568e+06,2.13147e+06,2.14726e+06,2.16304e+06,2.17883e+06,
		       2.19462e+06,2.21041e+06,2.2262e+06,2.24199e+06,2.25778e+06,
		       2.27356e+06,2.28935e+06,2.30514e+06,2.32093e+06,2.33672e+06,
		       2.35251e+06,2.3683e+06,2.38409e+06,2.39987e+06,2.41566e+06,
		       2.43145e+06,2.44724e+06,2.46303e+06,2.47882e+06,2.49461e+06,
		       2.51039e+06,2.52618e+06,2.54197e+06,2.55776e+06,2.57355e+06,
		       2.58934e+06,2.60513e+06,2.62092e+06,2.6367e+06,2.65249e+06,
		       2.66828e+06,2.68407e+06,2.69986e+06,2.71565e+06,2.73144e+06,
		       2.74722e+06,2.76301e+06,2.7788e+06,2.79459e+06,2.81038e+06,
		       2.82617e+06,2.84196e+06,2.85774e+06,2.87353e+06,2.88932e+06,
		       2.90511e+06,2.9209e+06,2.93669e+06,2.95248e+06,2.96827e+06,
		       2.98405e+06,2.99984e+06,3.01563e+06,3.03142e+06,3.04721e+06,
		       3.063e+06,3.07879e+06,3.09457e+06,3.11036e+06,3.12615e+06,
		       3.14194e+06};
  Energy a1widthin[200]={0,0,0,0,0,0,0,0,0,0,0,0,0.00153933,0.0136382,0.0457614,
			 0.105567,0.199612,0.333825,0.513831,0.745192,1.0336,1.38501,
			 1.80581,2.30295,2.88403,3.5575,4.33278,5.22045,6.23243,
			 7.38223,8.68521,10.1589,11.8234,13.7018,15.8206,18.2107,
			 20.9078,23.9533,27.3954,31.2905,35.7038,40.7106,46.3984,
			 52.8654,60.2207,68.581,78.0637,88.7754,100.794,114.145,
			 128.783,144.574,161.299,178.683,196.426,214.248,231.908,
			 249.221,266.059,282.336,298.006,313.048,327.46,341.254,
			 354.448,367.066,379.133,390.677,401.726,412.304,422.439,
			   432.155,441.474,450.419,459.01,467.267,475.207,482.847,
			 490.203,497.29,504.121,510.71,517.068,523.207,529.138,
			 534.869,540.411,545.776,550.961,556.663,560.851,565.566,
			 570.137,574.569,578.869,583.041,587.091,591.023,594.843,
			 598.553,602.16,605.664,609.072,612.396,615.626,618.754,
			 621.796,624.766,627.656,630.47,633.21,635.878,638.5,
			 641.006,643.471,645.873,648.213,650.493,652.715,654.88,
			 656.99,659.047,661.052,663.007,664.963,666.771,668.6,
			 670.351,672.075,673.828,675.397,676.996,678.567,680.083,
			 681.589,683.023,684.457,685.825,687.18,688.499,689.789,
			 691.058,692.284,693.501,694.667,695.82,696.947,698.05,
			 699.129,700.186,701.221,702.234,703.226,704.198,705.158,
			 706.085,707.001,707.899,708.78,709.644,710.474,711.334,
			 712.145,712.943,713.727,714.505,715.266,716.015,716.751,
			 717.474,718.183,718.88,719.645,720.243,720.91,721.565,
			 722.211,722.851,723.473,724.094,724.697,725.296,725.886,
			 726.468,727.041,727.608,728.166,728.718,729.262,729.808,
			 730.337,730.856,731.374,731.883,732.386,732.884,733.373,
			 733.859,734.339,734.813};
  _a1runwidth=vector<Energy>(a1widthin,a1widthin+200);
  _a1runq2=vector<Energy2>(a1q2in,a1q2in+200);
  // integration parameters
  _pimpimpipchan.resize(123,false);_pimpimpipwgts.resize(123,0.);
  _pi0pi0pimchan.resize(123,false);_pi0pi0pimwgts.resize(123,0.);
  _KmpimKpchan.resize(123,false);_KmpimKpwgts.resize(123,0.);
  _K0pimK0chan.resize(123,false);_K0pimK0wgts.resize(123,0.);
  _Kmpi0K0chan.resize(123,false);_Kmpi0K0wgts.resize(123,0.);
  _pi0pi0Kmchan.resize(123,false);_pi0pi0Kmwgts.resize(123,0.);
  _Kmpimpipchan.resize(123,false);_Kmpimpipwgts.resize(123,0.);
  _pimK0pi0chan.resize(123,false);_pimK0pi0wgts.resize(123,0.);
  _pimpi0etachan.resize(123,false);_pimpi0etawgts.resize(123,0.);
  _pimpimpipmax=1.98315e-09;
  _pi0pi0pimmax=2.15798e-09;
  _KmpimKpmax  =3.43681e-11;
  _K0pimK0max  =3.22018e-11;
  _Kmpi0K0max  =8.26288e-13;
  _pi0pi0Kmmax =2.69559e-11;
  _Kmpimpipmax =9.26578e-11;
  _pimK0pi0max =7.80839e-11;
  _pimpi0etamax=2.31973e-10;
  // weights for the different channels
  // three pion channels
  // charged channel
  _pimpimpipwgts[0]=.207443;_pimpimpipwgts[1]=.206008;_pimpimpipwgts[2]=.146542;
  _pimpimpipwgts[3]=.146904;_pimpimpipwgts[4]=.146361;_pimpimpipwgts[5]=.146742;
    // neutral channel
  _pi0pi0pimwgts[6]=.207210;_pi0pi0pimwgts[ 7]=.203390;_pi0pi0pimwgts[ 8]=.146917;
  _pi0pi0pimwgts[9]=.148704;_pi0pi0pimwgts[10]=.148353;_pi0pi0pimwgts[11]=.145425;
  // first two kaon channel
  _KmpimKpwgts[12]=.0883968;_KmpimKpwgts[13]=.0412856;_KmpimKpwgts[14]=.0717236;
  _KmpimKpwgts[15]=.0326007;_KmpimKpwgts[16]=.0342497;_KmpimKpwgts[17]=.0298842;
  _KmpimKpwgts[18]=.0353263;_KmpimKpwgts[19]=.0275691;_KmpimKpwgts[20]=.0420290;
  _KmpimKpwgts[21]=.0373951;_KmpimKpwgts[22]=.104105;_KmpimKpwgts[23]=.0478813;
  _KmpimKpwgts[24]=.0538683;_KmpimKpwgts[25]=.0430992;_KmpimKpwgts[26]=.0535634;
  _KmpimKpwgts[27]=.0444988;_KmpimKpwgts[28]=.0417848;_KmpimKpwgts[29]=.0368125;
  _KmpimKpwgts[30]=.0439884;_KmpimKpwgts[31]=.0181295;_KmpimKpwgts[32]=.0173713;
  _KmpimKpwgts[33]=.0172660;_KmpimKpwgts[34]=.0202335;_KmpimKpwgts[35]=.0169379;
  // second two kaon channel
  _K0pimK0wgts[36]=.0888739;_K0pimK0wgts[37]=.0412418;_K0pimK0wgts[38]=.0730631;
  _K0pimK0wgts[39]=.0310563;_K0pimK0wgts[40]=.0339446;_K0pimK0wgts[41]=.0291999;
  _K0pimK0wgts[42]=.0344058;_K0pimK0wgts[43]=.0291300;_K0pimK0wgts[44]=.0419811;
  _K0pimK0wgts[45]=.0375598;_K0pimK0wgts[46]=.1035230;_K0pimK0wgts[47]=.0497594;
  _K0pimK0wgts[48]=.0523781;_K0pimK0wgts[49]=.0446962;_K0pimK0wgts[50]=.0515777;
  _K0pimK0wgts[51]=.0434043;_K0pimK0wgts[52]=.0425706;_K0pimK0wgts[53]=.0365662;
  _K0pimK0wgts[54]=.0460142;_K0pimK0wgts[55]=.0179779;_K0pimK0wgts[56]=.0188128;
  _K0pimK0wgts[57]=.0169549;_K0pimK0wgts[58]=.0189151;_K0pimK0wgts[59]=.0163937;
  //  third two kaon channel
  _Kmpi0K0wgts[60]=.327305;_Kmpi0K0wgts[61]=.337043;_Kmpi0K0wgts[62]=.335651;
  // first single kaon channel
  _pi0pi0Kmwgts[63]=.217879;_pi0pi0Kmwgts[64]=.218840;_pi0pi0Kmwgts[65]=.134373;
  _pi0pi0Kmwgts[66]=.139586;_pi0pi0Kmwgts[67]=.145917;_pi0pi0Kmwgts[68]=.143405;
  // second single kaon channel
  _Kmpimpipwgts[69]=.0605849;_Kmpimpipwgts[70]=.116626;_Kmpimpipwgts[71]=.00383953;
  _Kmpimpipwgts[72]=.0115732;_Kmpimpipwgts[73]=.00310214;_Kmpimpipwgts[74]=.00346003;
  _Kmpimpipwgts[75]=.0028270;_Kmpimpipwgts[76]=.0032097;_Kmpimpipwgts[77]=.0624439;
  _Kmpimpipwgts[78]=.0478485;_Kmpimpipwgts[79]=.0574154;_Kmpimpipwgts[80]=.1174390;
  _Kmpimpipwgts[81]=.0576374;_Kmpimpipwgts[82]=.0446302;_Kmpimpipwgts[83]=.0589226;
  _Kmpimpipwgts[84]=.0493240;_Kmpimpipwgts[85]=.0642589;_Kmpimpipwgts[86]=.0531257;
  _Kmpimpipwgts[87]=.0265185;_Kmpimpipwgts[88]=.0682246;_Kmpimpipwgts[89]=.0258271;
  _Kmpimpipwgts[90]=.0163670;_Kmpimpipwgts[91]=.0256141;_Kmpimpipwgts[92]=.0191813;
  // third single kaon channel
  _pimK0pi0wgts[ 93]=0.119485;_pimK0pi0wgts[ 94]=6.01787e-05;_pimK0pi0wgts[ 95]=0.00330437;
  _pimK0pi0wgts[ 96]=4.46642e-05;_pimK0pi0wgts[ 97]=5.07216e-05;_pimK0pi0wgts[ 98]=2.18393e-05;
  _pimK0pi0wgts[ 99]=.000144609;_pimK0pi0wgts[100]=.0957394;_pimK0pi0wgts[101]=.0632570;
  _pimK0pi0wgts[102]=.1136360;_pimK0pi0wgts[103]=.0598817;_pimK0pi0wgts[104]=.0872274;
  _pimK0pi0wgts[105]=.0660621;_pimK0pi0wgts[106]=.0855770;_pimK0pi0wgts[107]=.0937833;
  _pimK0pi0wgts[108]=.0259987;_pimK0pi0wgts[109]=.0618178;_pimK0pi0wgts[110]=.0229915;
  _pimK0pi0wgts[111]=.0370382;_pimK0pi0wgts[112]=.0270240;_pimK0pi0wgts[113]=.0368548;
  // eta channel
  _pimpi0etawgts[114]=.0159138;_pimpi0etawgts[115]=.0207384;_pimpi0etawgts[116]=.0303908;
  _pimpi0etawgts[117]=.1933340;_pimpi0etawgts[118]=.2480610;_pimpi0etawgts[119]=.2619850;
  _pimpi0etawgts[120]=.0632281;_pimpi0etawgts[121]=.0811993;_pimpi0etawgts[122]=.0851489;
  // channels to use
  for(unsigned int ix=0;ix<6;++ix)
    {_pimpimpipchan[ix]=true  ;_pi0pi0pimchan[ix+6]=true;}
  for(unsigned int ix=12;ix<36;++ix)
    {_KmpimKpchan[ix]=true;_K0pimK0chan[ix+24]=true;}
  for(unsigned int ix=60;ix<63;++ix){_Kmpi0K0chan[ix]=true;}
  for(unsigned int ix=63;ix<69;++ix){_pi0pi0Kmchan[ix]=true;}
  for(unsigned int ix=69;ix<93;++ix){_Kmpimpipchan[ix]=true;}
  for(unsigned int ix=93;ix<114;++ix){_pimK0pi0chan[ix]=true;}
  for(unsigned int ix=114;ix<123;++ix){_pimpi0etachan[ix]=true;}
}
  
// copy constructor
inline Tau3MesonDefaultDecayer::Tau3MesonDefaultDecayer(const Tau3MesonDefaultDecayer & x)
  : Tau3MesonDecayerBase(x),_rhoF123wgts(x._rhoF123wgts), 
    _KstarF123wgts(x._KstarF123wgts),
    _rhoF5wgts(x._rhoF5wgts), _KstarF5wgts(x._KstarF5wgts), 
    _rhoKstarwgt(x._rhoKstarwgt), _a1runwidth(x._a1runwidth), _a1runq2(x._a1runq2),
    _a1runinter(x._a1runinter), _initializea1(x._initializea1), _a1mass(x._a1mass),
    _a1width(x._a1width), _K1mass(x._K1mass),
    _K1width(x._K1width), _sinfact(x._sinfact), _cosfact(x._cosfact), _fpi(x._fpi),
    _mpi(x._mpi),_mK(x._mK),
    _rhoparameters(x._rhoparameters), _rhoF123masses(x._rhoF123masses), 
    _rhoF5masses(x._rhoF5masses), _rhoF123widths(x._rhoF123widths),
    _rhoF5widths(x._rhoF5widths), _Kstarparameters(x._Kstarparameters),
    _KstarF123masses(x._KstarF123masses),_KstarF5masses(x._KstarF5masses),
    _KstarF123widths(x._KstarF123widths),_KstarF5widths(x._KstarF5widths),
    _a1parameters(x._a1parameters),  _K1parameters(x._K1parameters),
    _pimpimpipchan(x._pimpimpipchan),_pi0pi0pimchan(x._pi0pi0pimchan),
    _KmpimKpchan(x._KmpimKpchan),_K0pimK0chan(x._K0pimK0chan),
    _Kmpi0K0chan(x._Kmpi0K0chan),_pi0pi0Kmchan(x._pi0pi0Kmchan),
    _Kmpimpipchan(x._Kmpimpipchan),_pimK0pi0chan(x._pimK0pi0chan),
    _pimpi0etachan(x._pimpi0etachan), _pimpimpipwgts(x._pimpimpipwgts),
    _pi0pi0pimwgts(x._pi0pi0pimwgts), _KmpimKpwgts(x._KmpimKpwgts),
    _K0pimK0wgts(x._K0pimK0wgts), _Kmpi0K0wgts(x._Kmpi0K0wgts),
    _pi0pi0Kmwgts(x._pi0pi0Kmwgts), _Kmpimpipwgts(x._Kmpimpipwgts),
    _pimK0pi0wgts(x._pimK0pi0wgts), _pimpi0etawgts(x._pimpi0etawgts),
    _pimpimpipmax(x._pimpimpipmax), _pi0pi0pimmax(x._pi0pi0pimmax),
    _KmpimKpmax(x._KmpimKpmax), _K0pimK0max(x._K0pimK0max),
    _Kmpi0K0max(x._Kmpi0K0max), _pi0pi0Kmmax(x._pi0pi0Kmmax),
    _Kmpimpipmax(x._Kmpimpipmax), _pimK0pi0max(x._pimK0pi0max),
    _pimpi0etamax(x._pimpi0etamax)
{ }

inline IBPtr Tau3MesonDefaultDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr Tau3MesonDefaultDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void Tau3MesonDefaultDecayer::doupdate() throw(UpdateException) {
  Tau3MesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
  //  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
  //  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
  //  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
  //  touch()
  // Touch if anything has changed.
}

inline void Tau3MesonDefaultDecayer::doinit() throw(InitException) {
  Tau3MesonDecayerBase::doinit();
  // external particles which are always the same
  PDVector extpart;
  extpart.push_back(getParticleData(ParticleID::tauminus));
  extpart.push_back(getParticleData(ParticleID::nu_tau));
  // the particles we will use a lot
  tPDPtr a1=getParticleData(ParticleID::a_1minus);
  tPDPtr k1=getParticleData(ParticleID::K_1minus);
  tPDPtr pi0=getParticleData(ParticleID::pi0);
  tPDPtr piplus=getParticleData(ParticleID::piplus);
  tPDPtr piminus=getParticleData(ParticleID::piminus);
  // the rho0 resonances
  tPDPtr rho0[3];
  rho0[0] = getParticleData(113);
  rho0[1] = getParticleData(100113);
  rho0[2] = getParticleData(30113);
  // the charged rho resonances
  tPDPtr rhoc[3];
  rhoc[0] = getParticleData(-213);
  rhoc[1] = getParticleData(-100213);
  rhoc[2] = getParticleData(-30213);
  // the K*0 resonances
  tPDPtr Kstar0[3];
  Kstar0[0] = getParticleData(313);
  Kstar0[1] = getParticleData(100313);
  Kstar0[2] = getParticleData(30313);
  // the charged K* resonances
  tPDPtr Kstarc[3];
  Kstarc[0] = getParticleData(-323);
  Kstarc[1] = getParticleData(-100323);
  Kstarc[2] = getParticleData(-30323);
  // setup the channels for the phase space integration (there are a lot of these)
  // channels for pi- pi- pi+
  extpart.push_back(piminus);
  extpart.push_back(piminus);
  extpart.push_back(piplus);
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(a1,0,0.0,-2,2);
      newchannela->addIntermediate(rho0[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(a1,0,0.0,-2,3);
      newchannelb->addIntermediate(rho0[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
    }
  // channels for pi0 pi0 pi-
  extpart[2]=pi0;
  extpart[3]=pi0;
  extpart[4]=piminus;
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(a1,0,0.0,-2,2);
      newchannela->addIntermediate(rhoc[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(a1,0,0.0,-2,3);
      newchannelb->addIntermediate(rhoc[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
    }
  // channels for K- pi- K+
  extpart[2]=getParticleData(ParticleID::Kminus);
  extpart[3]=piminus;
  extpart[4]=getParticleData(ParticleID::Kplus);
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(a1,0,0.0,-2,2);
      newchannela->addIntermediate(Kstar0[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(a1,0,0.0,-2,3);
      newchannelb->addIntermediate(rho0[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
      for(unsigned int iy=0;iy<3;++iy)
	{
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchannelc= new_ptr(DecayPhaseSpaceChannel());
	  newchannelc->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchannelc->addIntermediate(rhoc[ix],0,0.0,-2,2);
	  newchannelc->addIntermediate(Kstar0[iy],0,0.0,3,4);
	  newchannelc->setExternal(extpart);
	  newchannelc->init();
	  addChannel(newchannelc);
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchanneld= new_ptr(DecayPhaseSpaceChannel());
	  newchanneld->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchanneld->addIntermediate(rhoc[ix],0,0.0,-2,3);
	  newchanneld->addIntermediate(rho0[iy],0,0.0,2,4);
	  newchanneld->setExternal(extpart);
	  newchanneld->init();
	  addChannel(newchanneld);
	}
    }
  // channels for K0 pi- K0bar
  extpart[2]=getParticleData(ParticleID::K0);
  extpart[3]=piminus;
  extpart[4]=getParticleData(ParticleID::Kbar0);
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(a1,0,0.0,-2,2);
      newchannela->addIntermediate(Kstarc[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(a1,0,0.0,-2,3);
      newchannelb->addIntermediate(rho0[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
      for(unsigned int iy=0;iy<3;++iy)
	{
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchannelc= new_ptr(DecayPhaseSpaceChannel());
	  newchannelc->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchannelc->addIntermediate(rhoc[ix],0,0.0,-2,2);
	  newchannelc->addIntermediate(Kstarc[iy],0,0.0,3,4);
	  newchannelc->setExternal(extpart);
	  newchannelc->init();
	  addChannel(newchannelc);
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	      newchanneld= new_ptr(DecayPhaseSpaceChannel());
	  newchanneld->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchanneld->addIntermediate(rhoc[ix],0,0.0,-2,3);
	  newchanneld->addIntermediate(rho0[iy],0,0.0,2,4);
	  newchanneld->setExternal(extpart);
	  newchanneld->init();
	  addChannel(newchanneld);
	}
    }
  // channels for K- pi0 K0
  extpart[2]=getParticleData(ParticleID::Kminus);
  extpart[3]=pi0;
  extpart[4]=getParticleData(ParticleID::K0);
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(a1,0,0.0,-2,3);
      newchannela->addIntermediate(rhoc[ix],0,0.0,2,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      }
  // channels for pi0 pi0 K-
  extpart[2]=pi0;
  extpart[3]=pi0;
  extpart[4]=getParticleData(ParticleID::Kminus);
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(k1,0,0.0,-2,2);
      newchannela->addIntermediate(Kstarc[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(k1,0,0.0,-2,3);
      newchannelb->addIntermediate(Kstarc[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
    }
  // channels for K- pi- pi+
  extpart[2]=getParticleData(ParticleID::Kminus);
  extpart[3]=piminus;
  extpart[4]=piplus;
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannela= new_ptr(DecayPhaseSpaceChannel());
      newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannela->addIntermediate(k1,0,0.0,-2,2);
      newchannela->addIntermediate(rho0[ix],0,0.0,3,4);
      newchannela->setExternal(extpart);
      newchannela->init();
      addChannel(newchannela);
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(k1,0,0.0,-2,3);
      newchannelb->addIntermediate(Kstar0[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
      for(unsigned int iy=0;iy<3;++iy)
	{
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchannelc= new_ptr(DecayPhaseSpaceChannel());
	  newchannelc->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchannelc->addIntermediate(Kstarc[ix],0,0.0,-2,2);
	  newchannelc->addIntermediate(rho0[iy],0,0.0,3,4);
	  newchannelc->setExternal(extpart);
	  newchannelc->init();
	  addChannel(newchannelc);
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchanneld= new_ptr(DecayPhaseSpaceChannel());
	  newchanneld->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchanneld->addIntermediate(Kstarc[ix],0,0.0,-2,3);
	  newchanneld->addIntermediate(Kstar0[iy],0,0.0,2,4);
	  newchanneld->setExternal(extpart);
	  newchanneld->init();
	  addChannel(newchanneld);
	}
    }
  // channels for pi- kbar0 pi0
  extpart[2]=piminus;
  extpart[3]=getParticleData(ParticleID::Kbar0);
  extpart[4]=pi0;
  for(unsigned int ix=0;ix<3;++ix)
    {
      Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	newchannelb= new_ptr(DecayPhaseSpaceChannel());
      newchannelb->addIntermediate(getParticleData(ParticleID::tauminus),
				   0,0.0,-1,1);
      newchannelb->addIntermediate(k1,0,0.0,-2,3);
      newchannelb->addIntermediate(rhoc[ix],0,0.0,2,4);
      newchannelb->setExternal(extpart);
      newchannelb->init();
      addChannel(newchannelb);
      for(unsigned int iy=0;iy<3;++iy)
	{
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchannelc= new_ptr(DecayPhaseSpaceChannel());
	  newchannelc->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchannelc->addIntermediate(Kstarc[ix],0,0.0,-2,2);
	  newchannelc->addIntermediate(Kstar0[iy],0,0.0,3,4);
	  newchannelc->setExternal(extpart);
	  newchannelc->init();
	  addChannel(newchannelc);
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchanneld= new_ptr(DecayPhaseSpaceChannel());
	  newchanneld->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchanneld->addIntermediate(Kstarc[ix],0,0.0,-2,3);
	  newchanneld->addIntermediate(rhoc[iy],0,0.0,2,4);
	  newchanneld->setExternal(extpart);
	  newchanneld->init();
	  addChannel(newchanneld);
	}
    }
  // channels for pi- pi0 eta
  extpart[2]=piminus;
  extpart[3]=pi0;
  extpart[4]=getParticleData(ParticleID::eta);
  for(unsigned int ix=0;ix<3;++ix)
    {
      for(unsigned int iy=0;iy<3;++iy)
	{
	  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer
	    newchannela= new_ptr(DecayPhaseSpaceChannel());
	  newchannela->addIntermediate(getParticleData(ParticleID::tauminus),
				       0,0.0,-1,1);
	  newchannela->addIntermediate(rhoc[ix],0,0.0,-2,2);
	  newchannela->addIntermediate(rho0[iy],0,0.0,3,4);
	  newchannela->setExternal(extpart);
	  newchannela->init();
	  addChannel(newchannela);
	}
    }
  // mass and width of the a_1
  if(!_a1parameters){_a1mass=a1->mass();_a1width=a1->width();}
  // mass and width of the k_1
  if(!_K1parameters){_K1mass=k1->mass();_K1width=k1->width();}
  // initialise the a_1 running width calculation
  if(_initializea1){inita1width(-1);}
  // rho parameters in the base classs
  tcPDPtr temp;
  if(_rhoparameters)
    {
      for(unsigned int ix=0;ix<_rhoF123masses.size();++ix)
	{
	  for(unsigned int iy=0;iy<numberChannels();++iy)
	    {
	      resetIntermediate(iy,rhoc[ix],_rhoF123masses[ix],_rhoF123widths[ix]);
	      resetIntermediate(iy,rho0[ix],_rhoF123masses[ix],_rhoF123widths[ix]);
	    }
	}
      for(unsigned int ix=_rhoF123masses.size();ix<3;++ix)
	{
	  _rhoF123masses.push_back(rhoc[ix]->mass());
	  _rhoF123widths.push_back(rhoc[ix]->width());
	}
    }
  else
    {
      _rhoF123masses.resize(3);_rhoF123widths.resize(3);
      for(unsigned int ix=0;ix<3;++ix)
	{
	  _rhoF123masses[ix]=rhoc[ix]->mass();
	  _rhoF123widths[ix]=rhoc[ix]->width();
	}
    }
  // K star parameters in the base class
  if(_Kstarparameters)
    {
      for(unsigned int ix=0;ix<_KstarF123masses.size();++ix)
	{
	  for(unsigned int iy=0;iy<numberChannels();++iy)
	    {
	      resetIntermediate(iy,Kstarc[ix],_KstarF123masses[ix],_KstarF123widths[ix]);
	      resetIntermediate(iy,Kstar0[ix],_KstarF123masses[ix],_KstarF123widths[ix]);
	    }
	}
      for(unsigned int ix=_KstarF123masses.size();ix<3;++ix)
	{
	  _KstarF123masses.push_back(Kstarc[ix]->mass());
	  _KstarF123widths.push_back(Kstarc[ix]->width());
	}
    }
  else
    {
      _KstarF123masses.resize(3);_KstarF123widths.resize(3);
      for(unsigned int ix=0;ix<3;++ix)
	{
	  _KstarF123masses[ix]=Kstarc[ix]->mass();
	  _KstarF123widths[ix]=Kstarc[ix]->width();
	}
    }
  // rho parameters here
  if(!_rhoparameters){_rhoF5masses.resize(0);_rhoF5widths.resize(0);}
  for(unsigned int ix=_rhoF5masses.size();ix<3;++ix)
    {_rhoF5masses.push_back(rhoc[ix]->mass());_rhoF5widths.push_back(rhoc[ix]->width());}
  // Kstar parameters here
  if(!_Kstarparameters){_KstarF5masses.resize(0);_KstarF5widths.resize(0);}
  for(unsigned int ix=_KstarF5masses.size();ix<3;++ix)
    {
      _KstarF5masses.push_back(Kstarc[ix]->mass());
      _KstarF5widths.push_back(Kstarc[ix]->width());
    }
  // normalisation factors for the currents
  _sinfact = sqrt(SM().CKM(0,1))/_fpi;
  _cosfact = sqrt(SM().CKM(0,0))/_fpi;
  // masses for the running widths
  _mpi=piplus->mass();
  _mK=getParticleData(ParticleID::Kminus)->mass();
  // the integration channels
  setMode(0,_pimpimpipmax,_pimpimpipchan,_pimpimpipwgts);
  setMode(1,_pi0pi0pimmax,_pi0pi0pimchan,_pi0pi0pimwgts);
  setMode(2,_KmpimKpmax  ,_KmpimKpchan  ,_KmpimKpwgts);
  setMode(3,_K0pimK0max  ,_K0pimK0chan  ,_K0pimK0wgts);
  setMode(4,_Kmpi0K0max  ,_Kmpi0K0chan  ,_Kmpi0K0wgts);
  setMode(5,_pi0pi0Kmmax ,_pi0pi0Kmchan ,_pi0pi0Kmwgts);
  setMode(6,_Kmpimpipmax ,_Kmpimpipchan ,_Kmpimpipwgts);
  setMode(7,_pimK0pi0max ,_pimK0pi0chan ,_pimK0pi0wgts);
  setMode(8,_pimpi0etamax,_pimpi0etachan,_pimpi0etawgts);
}

inline void Tau3MesonDefaultDecayer::dofinish() {
  Tau3MesonDecayerBase::dofinish();
}

inline void Tau3MesonDefaultDecayer::doinitrun() {
  Tau3MesonDecayerBase::doinitrun();
  // set up the running a_1 width
  inita1width(0);
  // now set up the multichannel integration
  PDVector particles;
  particles.push_back(getParticleData(ParticleID::tauminus));
  particles.push_back(getParticleData(ParticleID::nu_tau));
  // initialise the three charged pion channel
  particles.push_back(getParticleData(ParticleID::piminus));
  particles.push_back(getParticleData(ParticleID::piminus));
  particles.push_back(getParticleData(ParticleID::piplus));
  // pi- pi- pi+ channel
  initializePhaseSpace(0,particles);
  // pi0 pi0 pi- channel
  particles[2]=getParticleData(ParticleID::pi0);
  particles[3]=getParticleData(ParticleID::pi0);
  particles[4]=getParticleData(ParticleID::piminus);
  initializePhaseSpace(1,particles);
  // K- pi- K+ channel
  particles[2]=getParticleData(ParticleID::Kminus);
  particles[3]=getParticleData(ParticleID::piminus);
  particles[4]=getParticleData(ParticleID::Kplus);
  initializePhaseSpace(2,particles);
  // K0 pi- Kobar
  particles[2]=getParticleData(ParticleID::K0);
  particles[3]=getParticleData(ParticleID::piminus);
  particles[4]=getParticleData(ParticleID::Kbar0);
  initializePhaseSpace(3,particles);
  // K- pi0 K0 
  particles[2]=getParticleData(ParticleID::Kminus);
  particles[3]=getParticleData(ParticleID::pi0);
  particles[4]=getParticleData(ParticleID::K0);
  initializePhaseSpace(4,particles);
  // pi0 pi0 K-
  particles[2]=getParticleData(ParticleID::pi0);
  particles[3]=getParticleData(ParticleID::pi0);
  particles[4]=getParticleData(ParticleID::Kminus);
  initializePhaseSpace(5,particles);
  // K- pi- pi+
  particles[2]=getParticleData(ParticleID::Kminus);
  particles[3]=getParticleData(ParticleID::piminus);
  particles[4]=getParticleData(ParticleID::piplus);
  initializePhaseSpace(6,particles);
  // pi- K0 pi0
  particles[2]=getParticleData(ParticleID::piminus);
  particles[3]=getParticleData(ParticleID::Kbar0);
  particles[4]=getParticleData(ParticleID::pi0);
  initializePhaseSpace(7,particles);
  // pi- pi0 eta
  particles[2]=getParticleData(ParticleID::piminus);
  particles[3]=getParticleData(ParticleID::pi0);
  particles[4]=getParticleData(ParticleID::eta);
  initializePhaseSpace(8,particles);
}

inline void Tau3MesonDefaultDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Tau3MesonDecayerBase::rebind(trans);
}

inline IVector Tau3MesonDefaultDecayer::getReferences() {
  IVector ret = Tau3MesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

// functions to return the Breit-Wigners
inline Complex Tau3MesonDefaultDecayer::BrhoF123(Energy2 q2,int ires) const
{
  Complex output(0.),norm(0.);
  for(unsigned int ix=0,N=_rhoF123wgts.size();ix<N&&ix<3;++ix)
    {norm+=_rhoF123wgts[ix];}
  if(ires<0)
    {
      for(unsigned int ix=0,N=_rhoF123wgts.size();ix<N&&ix<3;++ix)
	{output+=_rhoF123wgts[ix]*rhoKBreitWigner(q2,0,ix);}
    }
  else
    {
      unsigned int temp=ires;
      if(temp<_rhoF123wgts.size()&&temp<3)
	{output=_rhoF123wgts[temp]*rhoKBreitWigner(q2,0,temp);}
      else{output=0.;}
    }
  return output/norm;
}

inline Complex Tau3MesonDefaultDecayer::BrhoF5(Energy2 q2,int ires) const
{
  Complex output(0.),norm(0.);
  for(unsigned int ix=0,N=_rhoF5wgts.size();ix<N&&ix<3;++ix)
    {norm+=_rhoF5wgts[ix];}
  if(ires<0)
    {
      for(unsigned int ix=0,N=_rhoF5wgts.size();ix<N&&ix<3;++ix)
	{output+=_rhoF5wgts[ix]*rhoKBreitWigner(q2,1,ix);}
    }
  else
    {
      unsigned int temp=ires;
      if(temp<_rhoF5wgts.size()&&temp<3)
	{output=_rhoF5wgts[temp]*rhoKBreitWigner(q2,1,temp);}
      else
	{output=0.;}
    }
  return output/norm;
}

inline Complex Tau3MesonDefaultDecayer::BKstarF123(Energy2 q2,int ires) const
{
  Complex output(0.),norm(0.);
  for(unsigned int ix=0,N=_KstarF123wgts.size();ix<N&&ix<3;++ix)
    {norm+=_KstarF123wgts[ix];}
  if(ires<0)
    {
      for(unsigned int ix=0,N=_KstarF123wgts.size();ix<N&&ix<3;++ix)
	{output+=_KstarF123wgts[ix]*rhoKBreitWigner(q2,2,ix);}
    }
  else
    {
      unsigned int temp=ires;
      if(temp<_KstarF123wgts.size()&&temp<3)
	{output=_KstarF123wgts[temp]*rhoKBreitWigner(q2,2,temp);}
      else
	{output=0.;}
    }
  return output/norm;
}
inline Complex Tau3MesonDefaultDecayer::BKstarF5(Energy2 q2,int ires) const
{
  Complex output(0.),norm(0.);
  for(unsigned int ix=0,N=_KstarF5wgts.size();ix<N&&ix<3;++ix)
    {norm+=_KstarF5wgts[ix];}
  if(ires<0)
    {
      for(unsigned int ix=0,N=_KstarF5wgts.size();ix<N&&ix<3;++ix)
	{output+=_KstarF5wgts[ix]*rhoKBreitWigner(q2,3,ix);}
    }
  else
    {
      unsigned int temp=ires;
      if(temp<_KstarF5wgts.size()&&temp<3)
	{output=_KstarF5wgts[ires]*rhoKBreitWigner(q2,3,temp);}
      else
	{output=0.;}
    }
  return output/norm;
}
// matrix element for the running a_1 width
inline double Tau3MesonDefaultDecayer::a1MatrixElement(Energy2 q2, Energy2 s3,
						       Energy2 s2,Energy2 s1)
{
  Energy2 mpi2=getParticleData(ParticleID::piplus)->mass(); 
  mpi2*=mpi2; 
  Complex propb=BrhoF123(s1,-1); 
  Complex propa=BrhoF123(s2,-1); 
  // the matrix element
  double output(0.); 
    // first resonance
  output+= ((s1-4.*mpi2)+0.25*(s3-s2)*(s3-s2)/q2)* 
    real(propb*conj(propb)); 
  // second resonance
  output+= ((s2-4.*mpi2)+0.25*(s3-s1)*(s3-s1)/q2)* 
    real(propa*conj(propa)); 
  // the interference term 
  output+=(0.5*q2-s3-0.5*mpi2+0.25*(s3-s2)*(s3-s1)/q2)* 
    real(propa*conj(propb)+propb*conj(propa)); 
  return output;
}

// initialisation of the a_1 width
// (iopt=-1 initialises, iopt=0 starts the interpolation)
inline void Tau3MesonDefaultDecayer::inita1width(int iopt)
{
  if(iopt==-1)
    {
      double total;
      // parameters for the table of values
      Energy mtau=getParticleData(ParticleID::tauplus)->mass();
      Energy mtau2=mtau*mtau;
      Energy2 step=mtau*mtau/200.;
      // function to be integrated to give the matrix element
      Genfun::AbsFunction *inme = new tau3MesonDefaulta1MatrixElement(this);
      // integrator to perform the integral
      vector<double> inweights;inweights.push_back(0.5);inweights.push_back(0.5);
      vector<int> intype;intype.push_back(2);intype.push_back(3);
      Energy mrho=getParticleData(ParticleID::rhoplus)->mass();
      Energy wrho=getParticleData(ParticleID::rhoplus)->width();
      vector<double> inmass;inmass.push_back(mrho);inmass.push_back(mrho);
      vector<double> inwidth;inwidth.push_back(wrho);inwidth.push_back(wrho);
      Energy m1 =getParticleData(ParticleID::piplus)->mass() ;
      ThreeBodyIntegrator *widthgen = new ThreeBodyIntegrator(inweights,intype,
							      inmass,inwidth,
							      inme,m1,m1,m1); 
      // nornmalisation constant to give physical width if on shell
      double a1const = _a1width/(widthgen->width(_a1mass*_a1mass));
      // loop to give the values
      Energy moff2=0.;
      cout << "Calculating running a_1 width" << endl;
      _a1runq2.resize(0);_a1runwidth.resize(0);
      for(;moff2<=mtau2;moff2+=step)
	{
	  total=a1const*widthgen->width(moff2);
	  _a1runwidth.push_back(total);
	  _a1runq2.push_back(moff2);
	  cout << moff2 << " " << total << endl;
	}
      delete inme,widthgen;
    }
  // set up the interpolator
  else if(iopt==0)
    {_a1runinter = new Interpolator(_a1runwidth,_a1runq2,3);}
}

// running width of the a_1
inline Energy Tau3MesonDefaultDecayer::a1width(Energy2 q2) const
{return (*_a1runinter)(q2);}

// a_1 Breit Wigner
inline Complex  Tau3MesonDefaultDecayer::a1BreitWigner(Energy2 q2) const
{
  Complex ii(0.,1.);
  Energy2 m2=_a1mass*_a1mass; Energy q=sqrt(q2);
  Complex output=m2/(m2-q2-ii*q*a1width(q2));
  return output;
}

// K_1 Breit Wigner
inline Complex  Tau3MesonDefaultDecayer::K1BreitWigner(Energy2 q2) const
{
  Energy m2=_K1mass*_K1mass;
  Complex ii(0.,1.);
  complex<Energy2> fact=m2-ii*_K1mass*_K1width;
  return fact/(fact-q2);
}

// mixed Breit Wigner
inline Complex Tau3MesonDefaultDecayer::FKrho(Energy2 si, Energy2 sj,int ires) const
{
  Complex output;
  if(ires<0)
    {output = _rhoKstarwgt*BKstarF123(si,-1)+BrhoF123(sj,-1);}
  else if(ires%2==0)
    {output= _rhoKstarwgt*BKstarF123(si,ires/2);}
  else if(ires%2==1)
    {output=BrhoF123(sj,ires/2);}
  output /=(1.+_rhoKstarwgt);
  return output;
}

inline Complex Tau3MesonDefaultDecayer::rhoKBreitWigner(Energy2 q2,unsigned int itype,
							unsigned int ires) const
{
  Energy q=sqrt(q2);
  // get the mass and width of the requested resonance
  Energy mass,width;
  if(itype==0){mass=_rhoF123masses[ires];width=_rhoF123widths[ires];}
  else if(itype==1){mass=_rhoF5masses[ires];width=_rhoF5widths[ires];}
  else if(itype==2){mass=_KstarF123masses[ires];width=_KstarF123widths[ires];}
  else if(itype==3){mass=_KstarF5masses[ires];width=_KstarF5widths[ires];}
  // calculate the momenta for the running widths
  Energy mout[2],pcm,pcm0;
  if(itype<=1){mout[0]=_mpi;mout[1]=_mpi;}
  else{mout[0]=_mK;mout[1]=_mpi;}
  pcm0=Kinematics::pstarTwoBodyDecay(mass,mout[0],mout[1]);
  if(mout[0]+mout[1]<q){pcm=Kinematics::pstarTwoBodyDecay(q,mout[0],mout[1]);}
  else{pcm=0;}
  double ratio=pcm/pcm0;ratio*=ratio*ratio;
  Energy gamrun = width*mass*ratio/q;
  Complex ii(0.,1.);
  complex<Energy2> denom=q2-mass*mass+ii*mass*gamrun;
  complex<Energy2> numer=-mass*mass;
  return numer/denom;
}

}
