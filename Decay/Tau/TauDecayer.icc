// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the TauDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
using namespace ThePEG;

inline TauDecayer::TauDecayer() 
{
  // default value of the fermi constant taken from PDG 2002
  _GF = 1.16639E-5/GeV2;
}

inline TauDecayer::TauDecayer(const TauDecayer & x)
  : DecayIntegrator(x), _GF(x._GF), _modemap(x._modemap), _current(x._current),
    _wgtloc(x._wgtloc), _wgtmax(x._wgtmax), _weights(x._weights) {}

inline IBPtr TauDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr TauDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void TauDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void TauDecayer::doinit() throw(InitException) {
  DecayIntegrator::doinit();
  // make sure the current got initialised
  _current->init();
  // set up the phase-space channels
  DecayPhaseSpaceModePtr mode;
  DecayPhaseSpaceChannelPtr channel;
  PDVector extpart(2),ptemp;
  extpart[0] = getParticleData(ParticleID::tauminus);
  extpart[1] = getParticleData(ParticleID::nu_tau);
  Energy mtau= extpart[0]->mass();
  double maxweight;
  vector<double> channelwgts;
  int iq,ia;
  _modemap.resize(0);
  cout << "testing the current has " << _current->numberOfModes() << " modes " << endl;
  for(unsigned int ix=0;ix<_current->numberOfModes();++ix)
    {
      // get the external particles for this mode
      extpart.resize(2);
      ptemp=_current->particles(-3,ix,iq,ia);
      for(unsigned int iy=0;iy<ptemp.size();++iy){extpart.push_back(ptemp[iy]);}
      for(unsigned int iz=0;iz<extpart.size();++iz)
	{
	  cout << "testing the particles " << iz << " " << extpart[iz]->PDGName()  << endl;
	}
      // create the mode
      mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
      // create the first piece of the channel
      channel = new_ptr(DecayPhaseSpaceChannel(mode));
      channel->addIntermediate(extpart[0],0,0.0,-1,1);
      bool done=_current->createMode(-3,ix,mode,2,1,channel,mtau);
      cout << "testing did we create the mode??? " << done << endl;
      if(mode){cout << *mode << endl;}
      if(done)
	{
	  // the maximum weight and the channel weights
	  // the maximum
	  if(_wgtmax.size()>numberModes()){maxweight=_wgtmax[numberModes()];}
	  else{maxweight=0.;}
	  // the weights for the channel
	  if(_wgtloc.size()>numberModes()&&
	     _wgtloc[numberModes()]+mode->numberChannels()<=_weights.size())
	    {
	      vector<double>::iterator start=_weights.begin()+_wgtloc[numberModes()];
	      vector<double>::iterator end  =start+mode->numberChannels();
	      channelwgts=vector<double>(start,end);
	    }
	  else
	    {channelwgts.resize(mode->numberChannels(),1./(mode->numberChannels()));}
	  _modemap.push_back(ix);
	  // special for the two body modes
	  if(extpart.size()==3)
	    {
	      channelwgts.resize(0);
	      mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
	    }
	  addMode(mode,maxweight,channelwgts);
	}
    }
}

inline void TauDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void TauDecayer::doinitrun() {
  cout << "testing the start of the initialization" << endl;
  cout << *this << endl;
  _current->initrun();
  DecayIntegrator::doinitrun();
  _weights.resize(0);_wgtloc.resize(0);_wgtmax.resize(0);
  for(unsigned int ix=0;ix<numberModes();++ix)
    {
      _wgtmax.push_back(mode(ix)->maxWeight());
      _wgtloc.push_back(_weights.size());
      for(unsigned int iy=0;iy<mode(ix)->numberChannels();++iy)
	{_weights.push_back(mode(ix)->channelWeight(iy));}
    }
}

inline void TauDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector TauDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
