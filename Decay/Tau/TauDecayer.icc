// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the TauDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
using namespace ThePEG;

inline TauDecayer::TauDecayer() 
{
  // default value of the fermi constant taken from PDG 2002
  _GF = 1.16639E-5/GeV2;
}

inline TauDecayer::TauDecayer(const TauDecayer & x)
  : DecayIntegrator(x), _GF(x._GF), _modemap(x._modemap), _current(x._current),
    _wgtloc(x._wgtloc), _wgtmax(x._wgtmax), _weights(x._weights) {}

inline IBPtr TauDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr TauDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void TauDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void TauDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void TauDecayer::doinitrun() {
  _current->initrun();
  DecayIntegrator::doinitrun();
  _weights.resize(0);_wgtloc.resize(0);_wgtmax.resize(0);
  for(unsigned int ix=0;ix<numberModes();++ix)
    {
      _wgtmax.push_back(mode(ix)->maxWeight());
      _wgtloc.push_back(_weights.size());
      for(unsigned int iy=0;iy<mode(ix)->numberChannels();++iy)
	{_weights.push_back(mode(ix)->channelWeight(iy));}
    }
}

inline void TauDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector TauDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
