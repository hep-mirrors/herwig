// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Tau3MesonDecayerBase class.
//
// Author: Peter Richardson

namespace Herwig {

using namespace ThePEG;

inline Tau3MesonDecayerBase::Tau3MesonDecayerBase() {}
  
inline Tau3MesonDecayerBase::Tau3MesonDecayerBase(const Tau3MesonDecayerBase & x)
  : TauDecayerBase(x) {}
  
inline IBPtr Tau3MesonDecayerBase::clone() const {
  return new_ptr(*this);
}
  
inline IBPtr Tau3MesonDecayerBase::fullclone() const {
  return new_ptr(*this);
}
  
inline void Tau3MesonDecayerBase::doupdate() throw(UpdateException) {
  TauDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
  //  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
  //  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
  //  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
  //  touch()
  // Touch if anything has changed.
}
  
inline void Tau3MesonDecayerBase::doinit() throw(InitException) {
  TauDecayerBase::doinit();
}
  
inline void Tau3MesonDecayerBase::dofinish() {
  TauDecayerBase::dofinish();
}
  
inline void Tau3MesonDecayerBase::doinitrun() {
  TauDecayerBase::doinitrun();
}
  
inline void Tau3MesonDecayerBase::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  TauDecayerBase::rebind(trans);
}
  
inline IVector Tau3MesonDecayerBase::getReferences() {
  IVector ret = TauDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}
  
}
