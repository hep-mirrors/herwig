// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BaryonFactorizedDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline BaryonFactorizedDecayer::BaryonFactorizedDecayer() 
{
  // default value of the fermi constant taken from PDG 2002
  _GF = 1.16639E-5/GeV2;
  // default values taken from PRD56, 2799
  _a1c= 1.1;
  _a2c=-0.5;
  _a1b= 1.0;
  _a2b= 0.28;
}

inline BaryonFactorizedDecayer::
BaryonFactorizedDecayer(const BaryonFactorizedDecayer & x)
  : DecayIntegrator(x),_current(x._current), _form(x._form), _GF(x._GF),_a1b(x._a1b),
    _a2b(x._a2b),_a1c(x._a1c),_a2c(x._a2c),_currentmap(x._currentmap),
    _formmap(x._formmap),_CKMfact(x._CKMfact),_wgtloc(x._wgtloc),_wgtmax(x._wgtmax),
    _weights(x._weights), _theCKM(x._theCKM) {}


inline IBPtr BaryonFactorizedDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr BaryonFactorizedDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void BaryonFactorizedDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BaryonFactorizedDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void BaryonFactorizedDecayer::doinitrun() {
  _current->initrun();
  _form->initrun();
  DecayIntegrator::doinitrun();
  _weights.resize(0);_wgtloc.resize(0);_wgtmax.resize(0);
  unsigned int ix,iy;
  for(ix=0;ix<numberModes();++ix)
    {
      _wgtmax.push_back(mode(ix)->maxWeight());
      _wgtloc.push_back(_weights.size());
      for(iy=0;iy<mode(ix)->numberChannels();++iy)
	{_weights.push_back(mode(ix)->channelWeight(iy));}
    }
  //string file_name;
  //file_name  = name()+".output";
  //ofstream output(file_name.c_str());
  //dataBaseOutput(output);
}

inline void BaryonFactorizedDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector BaryonFactorizedDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
