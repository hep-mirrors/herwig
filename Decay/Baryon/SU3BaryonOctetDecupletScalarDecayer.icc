// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SU3BaryonOctetDecupletScalarDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline SU3BaryonOctetDecupletScalarDecayer::SU3BaryonOctetDecupletScalarDecayer() 
{
  // couplings and off-shell parameter
  _C=1.35;
  // the relative parities of the two baryon multiplets
  _parity=true;
  // the pion decay constant
  _fpi=130.7*MeV;
  // PDG codes for the various octet baryons
  _proton   =  12212;
  _neutron  =  12112;
  _sigma0   =  13212;
  _sigmap   =  13222;
  _sigmam   =  13112;
  _lambda   =  23122;
  _xi0      =  13322;
  _xim      =  13312;
  // PDG codes for the various decuplet baryons
  _deltapp  = 2224;
  _deltap   = 2214;
  _delta0   = 2114;
  _deltam   = 1114;
  _sigmasp  = 3224;
  _sigmas0  = 3214;
  _sigmasm  = 3114;
  _omega    = 3334;
  _xism     = 3314;
  _xis0     = 3324;
}

inline SU3BaryonOctetDecupletScalarDecayer::SU3BaryonOctetDecupletScalarDecayer(const SU3BaryonOctetDecupletScalarDecayer & x)
  : Baryon1MesonDecayerBase(x), _C(x._C), _parity(x._parity), _fpi(x._fpi),
    _proton(x._proton), _neutron(x._neutron),_sigma0(x._sigma0),_sigmap(x._sigmap),
    _sigmam(x._sigmam),_lambda(x._lambda),_xi0(x._xi0),_xim(x._xim),_deltapp(x._deltapp),
    _deltap(x._deltap),_delta0(x._delta0),_deltam(x._deltam),_sigmasp(x._sigmasp),
    _sigmas0(x._sigmas0),_sigmasm(x._sigmasm),_omega(x._omega),_xism(x._xism),
    _xis0(x._xis0),_incomingB(x._incomingB),_outgoingB(x._outgoingB),
    _outgoingM(x._outgoingM), _maxweight(x._maxweight),_prefactor(x._prefactor) {}

inline IBPtr SU3BaryonOctetDecupletScalarDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr SU3BaryonOctetDecupletScalarDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void SU3BaryonOctetDecupletScalarDecayer::doupdate() throw(UpdateException) {
  Baryon1MesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SU3BaryonOctetDecupletScalarDecayer::doinit() throw(InitException) {
  Baryon1MesonDecayerBase::doinit();
  // set up the decay modes
  setupModes(1);
  // set up the phase space and the couplings
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  double wgtmax;
  vector<double> wgt(0);
  for(unsigned int ix=0;ix<_incomingB.size();++ix)
    {
      extpart[0]=getParticleData(_incomingB[ix]);
      extpart[1]=getParticleData(_outgoingB[ix]);
      extpart[2]=getParticleData(_outgoingM[ix]);
      mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
      if(_maxweight.size()>numberModes()){wgtmax=_maxweight[numberModes()];}
      else{wgtmax=1.;}
      addMode(mode,wgtmax,wgt);
    }
}

inline void SU3BaryonOctetDecupletScalarDecayer::dofinish() {
  Baryon1MesonDecayerBase::dofinish();
}

inline void SU3BaryonOctetDecupletScalarDecayer::doinitrun() {
  Baryon1MesonDecayerBase::doinitrun();
  if(initialize())
    {
      _maxweight.resize(0);
      for(unsigned int ix=0;ix<numberModes();++ix)
	{_maxweight.push_back(mode(ix)->maxWeight());}
    }
}

inline void SU3BaryonOctetDecupletScalarDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Baryon1MesonDecayerBase::rebind(trans);
}

inline IVector SU3BaryonOctetDecupletScalarDecayer::getReferences() {
  IVector ret = Baryon1MesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
