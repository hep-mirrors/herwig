// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the OmegaXiStarPionDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline OmegaXiStarPionDecayer::OmegaXiStarPionDecayer() 
{
  // the ids of the particles
  _idin  = 3334;
  _idout = 3324;
  // the couplings from the paper
  _Acomm = 20.91e-8;
  _AP    =- 9.20e-8;
  _AS    =- 6.32e-8;
  _BP    = 230.1e-8;
  _BS    =-100.8e-8;
  // maximum weight for the decay
  _wgtmax=0.0032;
  // intermediates
  generateIntermediates(false);
}

inline OmegaXiStarPionDecayer::OmegaXiStarPionDecayer(const OmegaXiStarPionDecayer & x)
  : Baryon1MesonDecayerBase(x),_Acomm(x._Acomm),_AP(x._AP),_AS(x._AS),_BP(x._BP),
    _BS(x._BS),_idin(x._idin),_idout(x._idout), _wgtmax(x._wgtmax) {}

inline IBPtr OmegaXiStarPionDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr OmegaXiStarPionDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void OmegaXiStarPionDecayer::doupdate() throw(UpdateException) {
  Baryon1MesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void OmegaXiStarPionDecayer::doinit() throw(InitException) {
  Baryon1MesonDecayerBase::doinit();
  // set up the phase space
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  vector<double> wgt(0);
  extpart[0]=getParticleData(_idin);
  extpart[1]=getParticleData(_idout);
  extpart[2]=getParticleData(-211);
  mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
  addMode(mode,_wgtmax,wgt);
}

inline void OmegaXiStarPionDecayer::dofinish() {
  Baryon1MesonDecayerBase::dofinish();
}

inline void OmegaXiStarPionDecayer::doinitrun() {
  Baryon1MesonDecayerBase::doinitrun();
  if(initialize()){_wgtmax=mode(0)->maxWeight();}
}

inline void OmegaXiStarPionDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Baryon1MesonDecayerBase::rebind(trans);
}

inline IVector OmegaXiStarPionDecayer::getReferences() {
  IVector ret = Baryon1MesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
