// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RadiativeHeavyBaryonDecayer class.
//

namespace Herwig {
using namespace Herwig;

inline RadiativeHeavyBaryonDecayer::
RadiativeHeavyBaryonDecayer(const RadiativeHeavyBaryonDecayer & x)
  : Baryon1MesonDecayerBase(x), _M1coupling(x._M1coupling), _E1coupling(x._E1coupling),
    _incoming(x._incoming),_outgoingB(x._outgoingB), _modetype(x._modetype),
    _maxweight(x._maxweight), _initsize(x._initsize) {}

inline IBPtr RadiativeHeavyBaryonDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr RadiativeHeavyBaryonDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void RadiativeHeavyBaryonDecayer::doupdate() throw(UpdateException) {
  Baryon1MesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void RadiativeHeavyBaryonDecayer::dofinish() {
  Baryon1MesonDecayerBase::dofinish();
}

inline void RadiativeHeavyBaryonDecayer::doinitrun() {
  Baryon1MesonDecayerBase::doinitrun();
  if(_Initialize)
    {
      _maxweight.resize(0);
      for(unsigned int ix=0;ix<numberModes();++ix)
	{_maxweight.push_back(2.*mode(ix)->maxWeight());}
    }
}

inline void RadiativeHeavyBaryonDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Baryon1MesonDecayerBase::rebind(trans);
}

inline IVector RadiativeHeavyBaryonDecayer::getReferences() {
  IVector ret = Baryon1MesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
