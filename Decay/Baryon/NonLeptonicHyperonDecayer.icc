// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the NonLeptonicHyperonDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline NonLeptonicHyperonDecayer::
NonLeptonicHyperonDecayer(const NonLeptonicHyperonDecayer & x)
  : Baryon1MesonDecayerBase(x), _incomingB(x._incomingB),_outgoingB(x._outgoingB),
    _outgoingM(x._outgoingM),_A(x._A),_B(x._B), _maxweight(x._maxweight), 
    _initsize(x._initsize) {}

inline IBPtr NonLeptonicHyperonDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr NonLeptonicHyperonDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void NonLeptonicHyperonDecayer::doupdate() throw(UpdateException) {
  Baryon1MesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void NonLeptonicHyperonDecayer::doinit() throw(InitException) {
  Baryon1MesonDecayerBase::doinit();
  unsigned int isize(_incomingB.size());
  if(isize!=_outgoingB.size()||isize!=_outgoingM.size()||isize!=_A.size()||
     isize!=_B.size()        ||isize!=_maxweight.size())
    {throw InitException() << "Inconsistent parameters in "
			   << "NonLeptonicHyperonDecayer::doinit()" 
			   << Exception::runerror;}
  // set up the decay modes
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  double wgtmax;
  vector<double> wgt(0);
  for(unsigned int ix=0;ix<_incomingB.size();++ix)
    {
      extpart[0]=getParticleData(_incomingB[ix]);
      extpart[1]=getParticleData(_outgoingB[ix]);
      extpart[2]=getParticleData(_outgoingM[ix]);
      mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
      if(_maxweight.size()>numberModes()){wgtmax=_maxweight[numberModes()];}
      else{wgtmax=1.;}
      addMode(mode,wgtmax,wgt);
    }
}

inline void NonLeptonicHyperonDecayer::dofinish() {
  Baryon1MesonDecayerBase::dofinish();
}

inline void NonLeptonicHyperonDecayer::doinitrun() {
  Baryon1MesonDecayerBase::doinitrun();
  if(initialize())
    {
      _maxweight.resize(0);
      for(unsigned int ix=0;ix<numberModes();++ix)
	{_maxweight.push_back(mode(ix)->maxWeight());}
    }
}

inline void NonLeptonicHyperonDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Baryon1MesonDecayerBase::rebind(trans);
}

inline IVector NonLeptonicHyperonDecayer::getReferences() {
  IVector ret = Baryon1MesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
