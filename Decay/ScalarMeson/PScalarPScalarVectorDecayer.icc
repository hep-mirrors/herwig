// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PScalarPScalarVectorDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline PScalarPScalarVectorDecayer::PScalarPScalarVectorDecayer() 
{
  // decay pi' to rho pi
  _incoming.push_back( 100111);_outgoingV.push_back( 213);_outgoingP.push_back(-211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100111);_outgoingV.push_back(-213);_outgoingP.push_back( 211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100211);_outgoingV.push_back( 213);_outgoingP.push_back( 111);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100211);_outgoingV.push_back( 113);_outgoingP.push_back( 211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-100211);_outgoingV.push_back( 113);_outgoingP.push_back(-211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-100211);_outgoingV.push_back(-213);_outgoingP.push_back( 111);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  // K' to K rho
  _incoming.push_back( 100311);_outgoingP.push_back( 311);_outgoingV.push_back( 113);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100311);_outgoingP.push_back(-311);_outgoingV.push_back( 113);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100321);_outgoingP.push_back( 321);_outgoingV.push_back( 113);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100321);_outgoingP.push_back(-321);_outgoingV.push_back( 113);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100311);_outgoingP.push_back( 321);_outgoingV.push_back(-213);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100311);_outgoingP.push_back(-321);_outgoingV.push_back( 213);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100321);_outgoingP.push_back( 311);_outgoingV.push_back( 213);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100321);_outgoingP.push_back(-311);_outgoingV.push_back(-213);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  // K' to K rho
  _incoming.push_back( 100311);_outgoingV.push_back( 313);_outgoingP.push_back( 111);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100311);_outgoingV.push_back(-313);_outgoingP.push_back( 111);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100321);_outgoingV.push_back( 323);_outgoingP.push_back( 111);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100321);_outgoingV.push_back(-323);_outgoingP.push_back( 111);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100311);_outgoingV.push_back( 323);_outgoingP.push_back(-211);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100311);_outgoingV.push_back(-323);_outgoingP.push_back( 211);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back( 100321);_outgoingV.push_back( 313);_outgoingP.push_back( 211);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  _incoming.push_back(-100321);_outgoingV.push_back(-313);_outgoingP.push_back(-211);
  _coupling.push_back(2.242*GeV);_maxweight.push_back(1.);
  // eta (1475) to K* K
  _incoming.push_back( 100331);_outgoingV.push_back( 323);_outgoingP.push_back(-321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100331);_outgoingV.push_back(-323);_outgoingP.push_back( 321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100331);_outgoingV.push_back( 313);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 100331);_outgoingV.push_back(-313);_outgoingP.push_back( 311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  // eta (1475) to K* K
  _incoming.push_back( 9020221);_outgoingV.push_back( 323);_outgoingP.push_back(-321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 9020221);_outgoingV.push_back(-323);_outgoingP.push_back( 321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 9020221);_outgoingV.push_back( 313);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 9020221);_outgoingV.push_back(-313);_outgoingP.push_back( 311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  // D decays
  _incoming.push_back( 421);_outgoingV.push_back( 223);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back( 333);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back( 333);_outgoingP.push_back(221);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(-313);_outgoingP.push_back(221);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(323);_outgoingP.push_back(-321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(-323);_outgoingP.push_back(321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(-313);_outgoingP.push_back(311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(313);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(323);_outgoingP.push_back(-211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back( 421);_outgoingV.push_back(333);_outgoingP.push_back(111);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 223);_outgoingP.push_back(311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 333);_outgoingP.push_back(311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 333);_outgoingP.push_back(221);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 313);_outgoingP.push_back(221);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back(-323);_outgoingP.push_back(321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 323);_outgoingP.push_back(-321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back( 313);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back(-323);_outgoingP.push_back(211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back(-313);_outgoingP.push_back(311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-421);_outgoingV.push_back(333);_outgoingP.push_back(111);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(411);_outgoingV.push_back(333);_outgoingP.push_back(211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(411);_outgoingV.push_back(-313);_outgoingP.push_back(321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(411);_outgoingV.push_back(323);_outgoingP.push_back(-311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(411);_outgoingV.push_back(113);_outgoingP.push_back(211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-411);_outgoingV.push_back( 333);_outgoingP.push_back(-211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-411);_outgoingV.push_back( 313);_outgoingP.push_back(-321);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-411);_outgoingV.push_back(-323);_outgoingP.push_back(311);
  _coupling.push_back(1.);_maxweight.push_back(2.);
  _incoming.push_back(-411);_outgoingV.push_back(113);_outgoingP.push_back(-211);
  _coupling.push_back(1.);_maxweight.push_back(2.);
}

inline PScalarPScalarVectorDecayer::PScalarPScalarVectorDecayer(const PScalarPScalarVectorDecayer & x)
  : DecayIntegrator(x), _incoming(x._incoming), _outgoingP(x._outgoingP),
    _outgoingV(x._outgoingV), _coupling(x._coupling), _maxweight(x._maxweight) {}

inline IBPtr PScalarPScalarVectorDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr PScalarPScalarVectorDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void PScalarPScalarVectorDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void PScalarPScalarVectorDecayer::doinit() throw(InitException) {
  DecayIntegrator::doinit();
  // check the parameters arew consistent
  unsigned int isize=_coupling.size();
  if(isize!=_incoming.size()  || isize!=_outgoingP.size()||
     isize!=_outgoingV.size() || isize!=_maxweight.size())
    {throw InitException() << "Inconsistent parameters in PScalarPScalarVectorDecayer" 
			   << Exception::abortnow;}
  // set up the integration channels
  vector<double> wgt;
  DecayPhaseSpaceModePtr mode;
  PDVector extpart(3);
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0] = getParticleData(_incoming[ix]);
      extpart[1] = getParticleData(_outgoingP[ix]);
      extpart[2] = getParticleData(_outgoingV[ix]);
      mode = new DecayPhaseSpaceMode(extpart,this);
      addMode(mode,_maxweight[ix],wgt);
    }
}

inline void PScalarPScalarVectorDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void PScalarPScalarVectorDecayer::doinitrun() {
  DecayIntegrator::doinitrun();
}

inline void PScalarPScalarVectorDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector PScalarPScalarVectorDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
