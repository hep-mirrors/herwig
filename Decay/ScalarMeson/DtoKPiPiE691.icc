// -*- C++ -*-
//
// DtoKPiPiE691.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the DtoKPiPiE691 class.
//

namespace Herwig {

inline IBPtr DtoKPiPiE691::clone() const {
  return new_ptr(*this);
}

inline IBPtr DtoKPiPiE691::fullclone() const {
  return new_ptr(*this);
}

inline double DtoKPiPiE691::decayAngle(const Lorentz5Momentum & pparent,
				       const Lorentz5Momentum & pres,
				       const Lorentz5Momentum & p1) const{
  Energy2 dot   = pparent*p1;
  Energy2 mREp  = pres*pparent;
  Energy2 mRE1  = pres*p1;
  Energy2 mp2   = pparent.mass2();
  Energy2 mres2 = pres.mass2();
  Energy2 m12   = p1.mass2();
  double cost=(dot*mres2-mREp*mRE1)/sqrt((mREp*mREp-mres2*mp2)*(mRE1*mRE1-mres2*m12));
  return cost;
}

inline Complex DtoKPiPiE691::amplitude(int ispin, double costheta,Energy mAB,
				       Energy wres, Energy mres
				       ) const {
  double s;
  switch(ispin) {
  case 0:
    s = 1.;
    break;
  case 1:
    s = costheta;
    break;
  case 2:
    s = 1.5*sqr(costheta)-0.5;
    break;
  default:
    throw Exception() << "Unknown spin " << ispin << " in DtoKPiPiE691::amplitude()"
		      << Exception::runerror;

  }
  Complex bw = sqrt(0.5*wres/GeV/Constants::pi)*GeV/(mAB-mres-complex<Energy>(0.*MeV,0.5*wres));
  return s*bw;
}
}
