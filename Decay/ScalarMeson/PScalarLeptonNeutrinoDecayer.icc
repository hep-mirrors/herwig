 // -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PScalarLeptonNeutrinoDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline PScalarLeptonNeutrinoDecayer::PScalarLeptonNeutrinoDecayer(const PScalarLeptonNeutrinoDecayer & x)
  : DecayIntegrator(x), _incoming(x._incoming), _decayconstant(x._decayconstant),
    _leptons(x._leptons),_maxweighte(x._maxweighte),_maxweightmu(x._maxweightmu),
    _maxweighttau(x._maxweighttau), _GF(x._GF), _initsize(x._initsize) {}

inline IBPtr PScalarLeptonNeutrinoDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr PScalarLeptonNeutrinoDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void PScalarLeptonNeutrinoDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void PScalarLeptonNeutrinoDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void PScalarLeptonNeutrinoDecayer::doinitrun() {
  DecayIntegrator::doinitrun();
  unsigned int iz(0),ix,iy;
  for(ix=0;ix<_incoming.size();++ix)
    {
      for(iy=0;iy<_leptons[ix];++iy)
	{
	  if(iy==0){_maxweighte[ix]=mode(iz)->maxWeight();}
	  else if(iy==1){_maxweightmu[ix]=mode(iz)->maxWeight();}
	  else if(iy==2){_maxweighttau[ix]=mode(iz)->maxWeight();}
	  ++iz;
	}
    }
}

inline void PScalarLeptonNeutrinoDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector PScalarLeptonNeutrinoDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
