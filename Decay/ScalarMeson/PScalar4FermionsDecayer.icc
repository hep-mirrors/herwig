// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PScalar4FermionsDecayer class.
//

namespace Herwig {
  using namespace ThePEG;

inline PScalar4FermionsDecayer::PScalar4FermionsDecayer() 
{
  // pi0 -> e+e- e+e-
  _incoming.push_back(111);_outgoing1.push_back(11);_outgoing2.push_back(11);
  _coupling.push_back(0.025159062/GeV);_maxweight.push_back(0.0002);
  _includeVMD.push_back(2);_VMDid.push_back(113);
  _VMDmass.push_back(0.7758*GeV);_VMDwidth.push_back(0.1503*GeV);
  // initial sizes
  _initsize=_incoming.size();
  // intermediates
  generateIntermediates(false);
}

inline PScalar4FermionsDecayer::PScalar4FermionsDecayer(const PScalar4FermionsDecayer & x)
  : DecayIntegrator(x), _coupling(x._coupling), _incoming(x._incoming),
    _outgoing1(x._outgoing1),_outgoing2(x._outgoing2),_maxweight(x._maxweight),
    _includeVMD(x._includeVMD),_VMDid(x._VMDid),_VMDmass(x._VMDmass),
    _VMDwidth(x._VMDwidth), _initsize(x._initsize)
 {}


inline IBPtr PScalar4FermionsDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr PScalar4FermionsDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void PScalar4FermionsDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void PScalar4FermionsDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void PScalar4FermionsDecayer::doinitrun() {
  DecayIntegrator::doinitrun();
  if(initialize())
    {for(unsigned int ix=0;ix<_incoming.size();++ix)
	{_maxweight[ix] = mode(ix)->maxWeight();}}
}

inline void PScalar4FermionsDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector PScalar4FermionsDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
