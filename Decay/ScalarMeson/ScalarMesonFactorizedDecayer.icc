// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ScalarMesonFactorizedDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline ScalarMesonFactorizedDecayer::ScalarMesonFactorizedDecayer() 
{
  // default value of the fermi constant taken from PDG 2002
  _GF = 1.16639E-5/GeV2;
  // default values of the couplings (taken from ZPC34, 103)
  _a1c = 1.30;
  _a2c =-0.55;
  _a1b = 1.10;
  _a2b =-0.24;
}

inline ScalarMesonFactorizedDecayer::
ScalarMesonFactorizedDecayer(const ScalarMesonFactorizedDecayer & x)
  : DecayIntegrator(x),_current(x._current),_form(x._form),_GF(x._GF),_a1b(x._a1b),
    _a2b(x._a2b),_a1c(x._a1c),_a2c(x._a2c),_currentmapA(x._currentmapA),
    _currentmapB(x._currentmapB),_formmapA(x._formmapA),_formmapB(x._formmapB),
    _formpart(x._formpart),_CKMfact(x._CKMfact),_wgtloc(x._wgtloc),_wgtmax(x._wgtmax),
    _weights(x._weights), _theCKM(x._theCKM) {}

inline IBPtr ScalarMesonFactorizedDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr ScalarMesonFactorizedDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void ScalarMesonFactorizedDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ScalarMesonFactorizedDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void ScalarMesonFactorizedDecayer::doinitrun() {
  unsigned int ix,iy;
  for(ix=0;ix<_current.size();++ix){_current[ix]->initrun();}
  for(ix=0;ix<_form.size();++ix){_form[ix]->initrun();}
  DecayIntegrator::doinitrun();
  if(initialize())
    {
      _weights.resize(0);_wgtloc.resize(0);_wgtmax.resize(0);
      for(ix=0;ix<numberModes();++ix)
	{
	  _wgtmax.push_back(mode(ix)->maxWeight());
	  _wgtloc.push_back(_weights.size());
	  for(iy=0;iy<mode(ix)->numberChannels();++iy)
	    {_weights.push_back(mode(ix)->channelWeight(iy));}
	}
    }
}

inline void ScalarMesonFactorizedDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector ScalarMesonFactorizedDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
