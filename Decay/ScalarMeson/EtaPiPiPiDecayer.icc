// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the EtaPiPiPiDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline EtaPiPiPiDecayer::EtaPiPiPiDecayer(const EtaPiPiPiDecayer & x)
  : DecayIntegrator(x), _incoming(x._incoming), _outgoing(x._outgoing),
    _charged(x._charged),_prefactor(x._prefactor),_a(x._a),_b(x._b),_c(x._c),
    _maxweight(x._maxweight), _initsize(x._initsize) {}

inline IBPtr EtaPiPiPiDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr EtaPiPiPiDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void EtaPiPiPiDecayer::doupdate() throw(UpdateException) {
  DecayIntegrator::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void EtaPiPiPiDecayer::dofinish() {
  DecayIntegrator::dofinish();
}

inline void EtaPiPiPiDecayer::doinitrun() {
  DecayIntegrator::doinitrun();
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {_maxweight[ix] = mode(ix)->maxWeight();}
}

inline void EtaPiPiPiDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  DecayIntegrator::rebind(trans);
}

inline IVector EtaPiPiPiDecayer::getReferences() {
  IVector ret = DecayIntegrator::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
