// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the FivePionCurrent class.
//

namespace Herwig {

inline FivePionCurrent::FivePionCurrent(const FivePionCurrent & x)
  : WeakDecayCurrent(x),_rhomass(x._rhomass),_a1mass(x._a1mass),
    _omegamass(x._omegamass),_sigmamass(x._sigmamass),_rhowidth(x._rhowidth),
    _a1width(x._a1width),_omegawidth(x._omegawidth),_sigmawidth(x._sigmawidth),
    _localparameters(x._localparameters),_c(x._c),_c0(x._c0),
    _fomegarhopi(x._fomegarhopi),
    _grhopipi(x._grhopipi),_garhopi(x._garhopi),_faaf(x._faaf),_ffpipi(x._ffpipi)
{}

inline IBPtr FivePionCurrent::clone() const {
  return new_ptr(*this);
}

inline IBPtr FivePionCurrent::fullclone() const {
  return new_ptr(*this);
}

inline void FivePionCurrent::doinit() throw(InitException) {
  WeakDecayCurrent::doinit();
  if(!_localparameters)
    {
      _rhomass    = getParticleData(ParticleID::rhominus)->mass();
      _rhowidth   = getParticleData(ParticleID::rhominus)->width();
      _omegamass  = getParticleData(ParticleID::omega)->mass();
      _omegawidth = getParticleData(ParticleID::omega)->width();
      _sigmamass  = getParticleData(9000221)->mass();
      _sigmawidth = getParticleData(9000221)->width();
      _a1mass    = getParticleData(ParticleID::a_1minus)->mass();
      _a1width   = getParticleData(ParticleID::a_1minus)->width();
    }
}
  
inline Complex FivePionCurrent::rhoBreitWigner(Energy2 scale) const
{
  Energy2 m2=sqr(_rhomass);
  return m2/(m2-scale-Complex(0.,1.)*_rhomass*_rhowidth);
}

inline Complex FivePionCurrent::a1BreitWigner(Energy2 scale) const
{
  Energy2 m2=sqr(_a1mass);
  return m2/(m2-scale-Complex(0.,1.)*_a1mass*_a1width);
}

inline Complex FivePionCurrent::omegaBreitWigner(Energy2 scale) const
{
  Energy2 m2=sqr(_omegamass);
  return m2/(m2-scale-Complex(0.,1.)*_omegamass*_omegawidth);
}

inline Complex FivePionCurrent::sigmaBreitWigner(Energy2 scale) const
{
  Energy2 m2=sqr(_sigmamass);
  return m2/(m2-scale-Complex(0.,1.)*_sigmamass*_sigmawidth);
}

inline LorentzPolarizationVector 
FivePionCurrent::rhoOmegaCurrent(unsigned int iopt,const Lorentz5Momentum & Q,
				 const Lorentz5Momentum & q1,const Lorentz5Momentum & q2,
				 const Lorentz5Momentum & q3,const Lorentz5Momentum & q4,
				 const Lorentz5Momentum & q5) const
{
  // prefactor
  Complex pre(_c0*_fomegarhopi*sqr(_grhopipi)/sqr(sqr(_rhomass)*_omegamass)*
	      a1BreitWigner(Q.m2())*omegaBreitWigner((q1+q2+q3).m2())*
	      rhoBreitWigner((q4+q5).m2()));
  // omega piece
  Complex omega(-1.);
//   if(iopt==1)      omega=rhoBreitWigner((q2+q3).m2());
//   else if(iopt==2) omega=rhoBreitWigner((q1+q3).m2());
//   else if(iopt==3) omega=rhoBreitWigner((q1+q2).m2());
//   else            
//     omega=rhoBreitWigner((q2+q3).m2())+rhoBreitWigner((q1+q3).m2())+
//       rhoBreitWigner((q1+q2).m2());
  LorentzPolarizationVector omegacurrent(Helicity::EpsFunction::product(q1,q2,q3));
  LorentzPolarizationVector output=pre*omega*
    Helicity::EpsFunction::product(Lorentz5Momentum(q4-q5),omegacurrent,Q);
  return output;
}
  
inline LorentzPolarizationVector  
FivePionCurrent::a1SigmaCurrent(unsigned int iopt,const Lorentz5Momentum & Q,
				const Lorentz5Momentum & q1,const Lorentz5Momentum & q2,
				const Lorentz5Momentum & q3,const Lorentz5Momentum & q4,
				const Lorentz5Momentum & q5) const
{
  Lorentz5Momentum pa1(q1+q2+q3);pa1.rescaleMass();
  Energy2 ma12(pa1.m2());
  Complex pre(_c/sqr(sqr(_a1mass)*_sigmamass*_rhomass)*_faaf*_ffpipi*_garhopi*_grhopipi*
	      a1BreitWigner(Q.m2())*a1BreitWigner(ma12)*sigmaBreitWigner((q4+q5).m2()));
  pre*=pow(GeV,5);
  Energy2 pdot[2]={q2*(q1-q3),q1*(q2-q3)};
  LorentzPolarizationVector rho[2]={pdot[0]/ma12*pa1-q1+q3,pdot[1]/ma12*pa1-q2+q3};
  rho[0] *=rhoBreitWigner((q1+q3).m2());
  rho[1] *=rhoBreitWigner((q2+q3).m2());
  LorentzPolarizationVector total;
  if(iopt==1)      total=rho[0];
  else if(iopt==2) total=rho[1];
  else             total=rho[0]+rho[1];
  Complex qdot=total*Q/Q.m2();
  LorentzPolarizationVector cq(Q);
  cq*=qdot;
  cq-=total;
  cq*=pre;
  return cq;
}
}
