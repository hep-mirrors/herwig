// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ThreePionCLEOCurrent class.
//

namespace Herwig {
using namespace ThePEG;

inline ThreePionCLEOCurrent::ThreePionCLEOCurrent() {
  // local particle properties
  _localparameters=true;
  // rho masses and widths
  if(_rhomass.size()==0) {
    _rhomass.push_back(0.7743*GeV);_rhowidth.push_back(0.1491*GeV);
    _rhomass.push_back(1.370*GeV);_rhowidth.push_back(0.386*GeV);
  }
  // f_2 mass and width
  _f2mass=1.275*GeV;_f2width=0.185*GeV;
  // f_0(1370) mass and width
  _f0mass=1.186*GeV;_f0width=0.350*GeV;
  // sigma mass and width
  _sigmamass = 0.860*GeV;_sigmawidth =0.880*GeV;
  // a1 mass and width
  _a1mass = 1.331*GeV;_a1width=0.814*GeV;
  // parameters for the K K* contribution to the a_1 running width
  _mKstar = 894*MeV;
  _mK=496*MeV;
  _gammk=3.32;
  // pion decay constant
  _fpi = 130.7*MeV/sqrt(2.);
  // couplings and phases for the different channels
  // p-wave rho and rho prime
  if(_rhomagP.size()==0) {
    _rhomagP.push_back(1.)  ;_rhophaseP.push_back(0.);
    _rhomagP.push_back(0.12);_rhophaseP.push_back(0.99*pi);
  }
  // d-wave rho and rho prime
  if(_rhomagD.size()==0) {
    _rhomagD.push_back(0.37/GeV2);_rhophaseD.push_back(-0.15*pi);
    _rhomagD.push_back(0.87/GeV2);_rhophaseD.push_back( 0.53*pi);
  }
  // f_2
  _f2mag=0.71/GeV2;_f2phase=0.56*pi;_f2coup=0.;
  // sigma
  _sigmamag=2.10;_sigmaphase=0.23*pi;_sigmacoup=0.;
  // f_0
  _f0mag=0.77;_f0phase=-0.54*pi;_f0coup=0.;
  // initialize the a_1 width
  _initializea1=false;
  Energy2 a1q2in[200]={0      ,15788.6,31577.3,47365.9,63154.6,78943.2,
		       94731.9,110521 ,126309 ,142098 ,157886 ,173675 ,
		       189464 ,205252 ,221041 ,236830 ,252618 ,268407 ,     
		       284196 ,299984 ,315773 ,331562 ,347350 ,363139 ,     
		       378927 ,394716 ,410505 ,426293 ,442082 ,457871 ,     
		       473659 ,489448 ,505237 ,521025 ,536814 ,552603 ,      
		       568391 ,584180 ,599969 ,615757 ,631546 ,647334 ,      
		       663123 ,678912 ,694700 ,710489 ,726278 ,742066 ,      
		       757855 ,773644 ,789432 ,805221 ,821010 ,836798 ,      
		       852587 ,868375 ,884164 ,899953 ,915741 ,931530 ,     
		       947319 ,963107 ,978896 ,994685 ,     
		       1.01047e+06,1.02626e+06,1.04205e+06,1.05784e+06, 
		       1.07363e+06,1.08942e+06,1.10521e+06,1.12099e+06, 
		       1.13678e+06,1.15257e+06,1.16836e+06,1.18415e+06, 
		       1.19994e+06,1.21573e+06,1.23151e+06,1.24730e+06, 
		       1.26309e+06,1.27888e+06,1.29467e+06,1.31046e+06, 
		       1.32625e+06,1.34203e+06,1.35782e+06,1.37361e+06, 
		       1.38940e+06,1.40519e+06,1.42098e+06,1.43677e+06, 
		       1.45256e+06,1.46834e+06,1.48413e+06,1.49992e+06, 
		       1.51571e+06,1.53150e+06,1.54729e+06,1.56308e+06, 
		       1.57886e+06,1.59465e+06,1.61044e+06,1.62623e+06, 
		       1.64202e+06,1.65781e+06,1.67360e+06,1.68939e+06, 
		       1.70517e+06,1.72096e+06,1.73675e+06,1.75254e+06, 
		       1.76833e+06,1.78412e+06,1.79991e+06,1.81569e+06, 
		       1.83148e+06,1.84727e+06,1.86306e+06,1.87885e+06, 
		       1.89464e+06,1.91043e+06,1.92621e+06,1.94200e+06, 
		       1.95779e+06,1.97358e+06,1.98937e+06,2.00516e+06, 
		       2.02095e+06,2.03674e+06,2.05252e+06,2.06831e+06, 
		       2.08410e+06,2.09989e+06,2.11568e+06,2.13147e+06, 
		       2.14726e+06,2.16304e+06,2.17883e+06,2.19462e+06, 
		       2.21041e+06,2.22620e+06,2.24199e+06,2.25778e+06, 
		       2.27356e+06,2.28935e+06,2.30514e+06,2.32093e+06, 
		       2.33672e+06,2.35251e+06,2.36830e+06,2.38409e+06, 
		       2.39987e+06,2.41566e+06,2.43145e+06,2.44724e+06, 
		       2.46303e+06,2.47882e+06,2.49461e+06,2.51039e+06, 
		       2.52618e+06,2.54197e+06,2.55776e+06,2.57355e+06, 
		       2.58934e+06,2.60513e+06,2.62092e+06,2.63670e+06, 
		       2.65249e+06,2.66828e+06,2.68407e+06,2.69986e+06, 
		       2.71565e+06,2.73144e+06,2.74722e+06,2.76301e+06, 
		       2.77880e+06,2.79459e+06,2.81038e+06,2.82617e+06, 
		       2.84196e+06,2.85774e+06,2.87353e+06,2.88932e+06, 
		       2.90511e+06,2.92090e+06,2.93669e+06,2.95248e+06, 
		       2.96827e+06,2.98405e+06,2.99984e+06,3.01563e+06, 
		       3.03142e+06,3.04721e+06,3.06300e+06,3.07879e+06, 
		       3.09457e+06,3.11036e+06,3.12615e+06,3.14194e+06};
  Energy a1widthin[200]={0,0,0,0,0,0,0,0,
			 0,0,0,0.00021256,0.0107225,0.0554708,0.150142,0.303848,
			 0.522655,0.81121,1.1736,1.61381,2.13606,2.74499,3.44583,4.24454,
			 5.14795,6.16391,7.3014,8.57079,9.98398,11.5547,13.2987,15.2344,
			 17.3827,19.7683,22.4195,25.3695,28.6568,32.3264,36.4311,41.0322,
			 46.201,52.0203,58.5847,66.0011,74.3871,83.8666,94.5615,106.578,
			 119.989,134.807,150.968,168.315,186.615,205.576,224.893,244.28,
			 263.499,282.364,300.748,318.569,335.781,352.367,368.327,383.677,
			 398.438,412.638,426.306,439.472,452.167,464.421,476.263,487.719,
			 498.815,509.576,520.024,530.179,540.063,549.693,559.621,568.26,
			 577.229,586.005,594.604,603.035,611.314,619.447,627.446,635.321,
			 643.082,650.736,658.288,665.75,673.127,680.427,687.659,694.82,
			 701.926,708.977,715.983,722.944,729.862,736.752,743.619,750.452,
			 757.271,764.076,770.874,777.658,784.444,791.233,798.027,804.838,
			 811.649,818.485,825.342,832.224,839.139,846.082,853.059,860.079,
			 867.143,874.248,881.409,919.527,945.28,965.514,983.228,999.471,
			 1014.69,1029.15,1043.05,1056.49,1069.57,1082.36,1094.88,1107.2,
			 1120.89,1131.4,1143.33,1155.15,1166.92,1178.61,1190.27,1201.92,
			 1213.55,1225.18,1236.81,1250.06,1260.16,1271.86,1283.64,1295.46,
			 1307.36,1319.3,1331.34,1343.45,1355.64,1367.93,1380.31,1392.77,
			 1405.35,1418.03,1430.83,1443.75,1457.17,1469.94,1483.22,1496.64,
			 1510.18,1523.86,1537.67,1551.64,1565.72,1579.99,1594.38,1608.92,
			 1623.63,1642.08,1653.51,1668.69,1684.03,1699.53,1715.21,1731.04,
			 1747.05,1763.23,1779.59,1796.12,1812.83,1829.72,1846.79,1864.04,
			 1881.49,1899.11,1916.93,1934.93,1953.13,1971.52,1990.12,2008.89};
  if(_a1runwidth.size()==0) {
    _a1runwidth=vector<Energy>(a1widthin,a1widthin+200);
    _a1runq2=vector<Energy2>(a1q2in,a1q2in+200);
  }
  // zero parameters which will be calculated later to avoid problems
  _pf2cc=0.; 
  _pf200=0.;
  _pf0cc=0.;
  _pf000=0.;
  _psigmacc=0.;
  _psigma00=0.; 
  _mpi0=0.;
  _mpic=0.;
  _fact=0.;
}

inline ThreePionCLEOCurrent::ThreePionCLEOCurrent(const ThreePionCLEOCurrent & x)
  : ThreeMesonCurrentBase(x),_rhomass(x._rhomass),_rhowidth(x._rhowidth),
    _prhocc(x._prhocc),_prhoc0(x._prhoc0),_f2mass(x._f2mass),_f2width(x._f2width),
    _pf2cc(x._pf2cc),_pf200(x._pf200),_f0mass(x._f0mass),_f0width(x._f0width),
    _pf0cc(x._pf0cc),_pf000(x._pf000),_sigmamass(x._sigmamass),
    _sigmawidth(x._sigmawidth),_psigmacc(x._psigmacc),_psigma00(x._psigma00),
    _mpi0(x._mpi0),_mpic(x._mpic),_a1mass(x._a1mass),_a1width(x._a1width),
    _mKstar(x._mKstar), _mK(x._mK), _gammk(x._gammk),
    _fpi(x._fpi),_fact(x._fact),_rhomagP(x._rhomagP),_rhophaseP(x._rhophaseP),
    _rhocoupP(x._rhocoupP),_rhomagD(x._rhomagD),_rhophaseD(x._rhophaseD),
    _rhocoupD(x._rhocoupD),_f2mag(x._f2mag),_f2phase(x._f2phase),_f2coup(x._f2coup),
    _f0mag(x._f0mag),_f0phase(x._f0phase), _f0coup(x._f0coup),
    _sigmamag(x._sigmamag),_sigmaphase(x._sigmaphase),_sigmacoup(x._sigmacoup),
    _localparameters(x._localparameters),_a1runwidth(x._a1runwidth),
    _a1runq2(x._a1runq2),_a1runinter(x._a1runinter),_initializea1(x._initializea1) {}

inline IBPtr ThreePionCLEOCurrent::clone() const {
  return new_ptr(*this);
}

inline IBPtr ThreePionCLEOCurrent::fullclone() const {
  return new_ptr(*this);
}

inline void ThreePionCLEOCurrent::doinitrun() {
  // set up the running a_1 width
  inita1width(0);
  ThreeMesonCurrentBase::doinitrun();
}

// breit wigner for the sigma
inline Complex ThreePionCLEOCurrent::sigmaBreitWigner(Energy2 q2,int icharge) const
{
  Energy q=sqrt(q2);
  double ratio; Complex ii(0.,1.);
  if(icharge==0){ratio=Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_psigmacc;}
  else{ratio=Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_psigma00;}
  Energy gamrun=_sigmawidth*ratio*_sigmamass/q;
  return _sigmamass*_sigmamass/(_sigmamass*_sigmamass-q2-ii*_sigmamass*gamrun);
}

// breit wigner for the f_0
inline Complex ThreePionCLEOCurrent::f0BreitWigner(Energy2 q2,int icharge) const
{
  Energy q=sqrt(q2);
  double ratio; Complex ii(0.,1.);
  if(icharge==0){ratio=Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_pf0cc;}
  else{ratio=Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_pf000;}
  Energy gamrun=_f0width*ratio*_f0mass/q;
  return _f0mass*_f0mass/(_f0mass*_f0mass-q2-ii*_f0mass*gamrun);
}

// breit wigner for the f_2
inline Complex ThreePionCLEOCurrent::f2BreitWigner(Energy2 q2,int icharge) const
{
  Energy q=sqrt(q2);
  double ratio; Complex ii(0.,1.);
  if(icharge==0){ratio=Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_pf2cc;}
  else{ratio=Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_pf200;}
  ratio*= ratio*ratio*ratio*ratio;
  Energy gamrun=_f2width*ratio*_f2mass/q;
  return _f2mass*_f2mass/(_f2mass*_f2mass-q2-ii*_f2mass*gamrun);
}

// breit wigner for the rho
inline Complex ThreePionCLEOCurrent::rhoBreitWigner(int ires, Energy2 q2,
						    int icharge) const
{
  Energy q=sqrt(q2);
  double ratio; Complex ii(0.,1.);
  if(icharge==0){ratio=Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_prhocc[ires];}
  else{ratio=Kinematics::pstarTwoBodyDecay(q,_mpic,_mpi0)/_prhoc0[ires];}
  ratio*= ratio*ratio;
  Energy gamrun=_rhowidth[ires]*ratio*_rhomass[ires]/q;
  return _rhomass[ires]*_rhomass[ires]/(_rhomass[ires]*_rhomass[ires]
					-q2-ii*_rhomass[ires]*gamrun);
}

// running width of the a_1
inline Energy ThreePionCLEOCurrent::a1width(Energy2 q2) const {
  return (*_a1runinter)(q2);
}

// a_1 Breit Wigner
inline Complex  ThreePionCLEOCurrent::a1BreitWigner(Energy2 q2) const {
  Complex ii(0.,1.);
  Energy2 m2=_a1mass*_a1mass; Energy q=sqrt(q2);
  Complex output=m2/(m2-q2-ii*q*a1width(q2));
  return output;
}

inline double 
ThreePionCLEOCurrent::threeBodyMatrixElement(const int iopt, const Energy2 q2,
				       const Energy2 s3, const Energy2 s2, 
				       const Energy2 s1, const Energy  m1,
				       const Energy  m2, const Energy  m3) const {
  Energy p1[6],p2[6],p3[6];
  Energy q=sqrt(q2);
  Energy2 mpi2c=_mpic*_mpic;
  Energy2 mpi20=_mpi0*_mpi0;
  // construct the momenta for the 2 neutral 1 charged mode
  Complex F1,F2,F3;
  if(iopt==0) {
    // construct the momenta of the decay products
    p1[0] = 0.5*(q2+mpi20-s1)/q; p1[5]=p1[0]*p1[0]; p1[4]=sqrt(p1[5]-mpi20);
    p2[0] = 0.5*(q2+mpi20-s2)/q; p2[5]=p2[0]*p2[0]; p2[4]=sqrt(p2[5]-mpi20);
    p3[0] = 0.5*(q2+mpi2c-s3)/q; p3[5]=p3[0]*p3[0]; p3[4]=sqrt(p3[5]-mpi2c);
    // take momentum of 1 parallel to z axis
    p1[1]=0.;p1[2]=0.;p1[3]=p1[4];
    // construct 2 
    double cos2 = 0.5*(p1[5]+p2[5]-p3[5]-2.*mpi20+mpi2c)/p1[4]/p2[4];
    p2[1] = p2[4]*sqrt(1.-cos2*cos2); p2[2]=0.; p2[3]=-p2[4]*cos2;
    // construct 3
    double cos3 = 0.5*(p1[5]-p2[5]+p3[5]-mpi2c)/p1[4]/p3[4];
    p3[1] =-p3[4]*sqrt(1.-cos3*cos3); p3[2]=0.; p3[3]=-p3[4]*cos3; 
    // calculate the form factors
    CLEOFormFactor(1,-1,q2,s1,s2,s3,F1,F2,F3);
  }
  // construct the momenta for the 3 charged mode 
  else {
    // construct the momenta of the decay products
    p1[0] = 0.5*(q2+mpi2c-s1)/q; p1[5]=p1[0]*p1[0]; p1[4]=sqrt(p1[5]-mpi2c);
    p2[0] = 0.5*(q2+mpi2c-s2)/q; p2[5]=p2[0]*p2[0]; p2[4]=sqrt(p2[5]-mpi2c);
    p3[0] = 0.5*(q2+mpi2c-s3)/q; p3[5]=p3[0]*p3[0]; p3[4]=sqrt(p3[5]-mpi2c);
    // take momentum of 1 parallel to z axis
    p1[1]=0.;p1[2]=0.;p1[3]=p1[4];
    // construct 2 
    double cos2 = 0.5*(p1[5]+p2[5]-p3[5]-mpi2c)/p1[4]/p2[4];
    p2[1] = p2[4]*sqrt(1.-cos2*cos2); p2[2]=0.; p2[3]=-p2[4]*cos2;
    // construct 3
    double cos3 = 0.5*(p1[5]-p2[5]+p3[5]-mpi2c)/p1[4]/p3[4];
    p3[1] =-p3[4]*sqrt(1.-cos3*cos3); p3[2]=0.; p3[3]=-p3[4]*cos3; 
    // calculate the form factors
    CLEOFormFactor(0,-1,q2,s1,s2,s3,F1,F2,F3);
  }
  // construct a vector with the current
  Complex current[4];
  for(unsigned int ix=0;ix<4;++ix)
    current[ix] = F1*(p2[ix]-p3[ix])-F2*(p3[ix]-p1[ix])+F3*(p1[ix]-p2[ix]);
  Complex dot1=current[0]*conj(current[0]);
  for(unsigned int ix=1;ix<4;++ix){dot1-=current[ix]*conj(current[ix]);}
  Complex dot2=current[0]*q;
  return(-dot1+dot2*conj(dot2)/q2).real();
}

}
