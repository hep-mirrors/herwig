// -*- C++ -*-
//
// KPiCurrent.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the KPiCurrent class.
//

namespace Herwig {

inline IBPtr KPiCurrent::clone() const {
  return new_ptr(*this);
}

inline IBPtr KPiCurrent::fullclone() const {
  return new_ptr(*this);
}

inline Complex KPiCurrent::sWaveBreitWigner(Energy2 q2, unsigned int ires) const {
  Energy q=sqrt(q2),gam(0.*MeV);
  Energy2 m2=sqr(_vecmass[ires]);
  if(q>_mK+_mpi) {
    Energy pX=Kinematics::pstarTwoBodyDecay(_vecmass[ires],_mK,_mpi);
    Energy p =Kinematics::pstarTwoBodyDecay( q            ,_mK,_mpi);
    gam = _vecwidth[ires]*m2/q2*p/pX;
  }
  return m2/(m2-q2-Complex(0.,1.)*q*gam);
}

inline Complex KPiCurrent::pWaveBreitWigner(Energy2 q2, unsigned int ires) const {
  Energy q=sqrt(q2),gam(0.*MeV);
  Energy2 m2=sqr(_vecmass[ires]);
  if(q>_mK+_mpi) {
    Energy pX=Kinematics::pstarTwoBodyDecay(_vecmass[ires],_mK,_mpi);
    Energy p =Kinematics::pstarTwoBodyDecay( q            ,_mK,_mpi);
    double ratio=p/pX;
    gam = _vecwidth[ires]*m2/q2*ratio*sqr(ratio);
  }
  return m2/(m2-q2-Complex(0.,1.)*q*gam);
}

}
