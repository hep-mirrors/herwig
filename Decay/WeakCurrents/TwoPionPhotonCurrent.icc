// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the TwoPionPhotonCurrent class.
//

namespace Herwig {
using namespace ThePEG;

inline TwoPionPhotonCurrent::TwoPionPhotonCurrent() {
  // modes handled
  addDecayMode(2,-1);
  setInitialModes(1);
  // weight of the resonances in the current
  _resweights.push_back(1.0);_resweights.push_back(-0.1);_resweights.push_back(0.0);
  // parameters of the rho resonaces
  _rhoparameters=true;
  _rhomasses.push_back(0.773*GeV);_rhomasses.push_back(1.70*GeV);
  _rhowidths.push_back(0.145*GeV);_rhowidths.push_back(0.26*GeV);
  // parameters fo the omega resonance
  _omegaparameters=true;
  _omegamass=782*MeV;_omegawidth=8.5*MeV;
  // couplings
  _grho   = 0.11238947*GeV2;
  _grhoomegapi = 12.924/GeV;
  // parameters for the resonance used in the integration
  _intmass = 1.2*GeV;
  _intwidth = 0.35*GeV;
}

inline IBPtr TwoPionPhotonCurrent::clone() const {
  return new_ptr(*this);
}

inline IBPtr TwoPionPhotonCurrent::fullclone() const {
  return new_ptr(*this);
}

// calculate the F function at a given scale  
inline complex<InvEnergy> TwoPionPhotonCurrent::FFunction(Energy2 q2) const {
  complex<InvEnergy2> output(0./MeV2);
  for(unsigned int ix=0, N=_resweights.size(); ix<N && ix <3;++ix) {
    output -= _resweights[ix]*BreitWigner(q2,ix);
  }
  return output*_grho*_grhoomegapi*sqrt(2.);
}

// fixed width Breit wigner
inline complex<InvEnergy2> TwoPionPhotonCurrent::BreitWigner(Energy2 q2,unsigned int ires) const {
  static const Complex ii(0.,1.);
  complex<Energy2> denom;
  if(ires<_rhomasses.size()) {
    denom = q2-_rhomasses[ires]*_rhomasses[ires]+ii*_rhomasses[ires]*_rhowidths[ires];
  }
  else if(ires==10) {
    denom = q2-_omegamass*_omegamass+ii*_omegamass*_omegawidth;
  }
  else {
    throw DecayIntegratorError() << "Unknown resonace in " 
				 << "TwoPionPhotonCurrent::BreitWigner" 
				 << ires << Exception::abortnow;
  }
  return 1./denom;
}
}
