// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ScalarMesonCurrent class.
//

namespace Herwig {
using namespace ThePEG;

inline ScalarMesonCurrent::ScalarMesonCurrent() 
{
  _id.push_back(211);_decay_constant.push_back(130.7*MeV);
  addDecayMode(2,-1);
  _id.push_back(321);_decay_constant.push_back(159.8*MeV);
  addDecayMode(2,-3);
  _id.push_back(411);_decay_constant.push_back(200.0*MeV);
  addDecayMode(4,-1);
  _id.push_back(431);_decay_constant.push_back(241.0*MeV);
  addDecayMode(4,-3);
  _id.push_back(421);_decay_constant.push_back(200.0*MeV);
  addDecayMode(4,-2);
  _id.push_back(10431);_decay_constant.push_back(73.7*MeV);
  addDecayMode(4,-3);
}

inline ScalarMesonCurrent::ScalarMesonCurrent(const ScalarMesonCurrent & x)
  : WeakDecayCurrent(x), _id(x._id), _decay_constant(x._decay_constant) {}

inline IBPtr ScalarMesonCurrent::clone() const {
  return new_ptr(*this);
}

inline IBPtr ScalarMesonCurrent::fullclone() const {
  return new_ptr(*this);
}

inline void ScalarMesonCurrent::doupdate() throw(UpdateException) {
  WeakDecayCurrent::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ScalarMesonCurrent::doinit() throw(InitException) {
  unsigned int isize=numberOfModes();
  if(_id.size()!=isize||_decay_constant.size()!=isize)
    {throw InitException() << "Inconsistent parameters in ScalarMesonCurrent::doinit()"
			   << Exception::abortnow;}
  WeakDecayCurrent::doinit();
}

inline void ScalarMesonCurrent::dofinish() {
  WeakDecayCurrent::dofinish();
}

inline void ScalarMesonCurrent::doinitrun() {
  WeakDecayCurrent::doinitrun();
}

inline void ScalarMesonCurrent::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  WeakDecayCurrent::rebind(trans);
}

inline IVector ScalarMesonCurrent::getReferences() {
  IVector ret = WeakDecayCurrent::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}

