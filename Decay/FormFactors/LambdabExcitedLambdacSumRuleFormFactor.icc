// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LambdabExcitedLambdacSumRuleFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline LambdabExcitedLambdacSumRuleFormFactor::LambdabExcitedLambdacSumRuleFormFactor() 
{
  _xi1=0.29;
  _rho2=2.01;
  // modes handled by this form-factor
  // lambda_b to lambda_c1
  addFormFactor(5122,14122,2,2,1,2,5,4);
  // lambda_b to lambda_c1*
  addFormFactor(5122,4124 ,2,4,1,2,5,4);
}

inline LambdabExcitedLambdacSumRuleFormFactor::LambdabExcitedLambdacSumRuleFormFactor(const LambdabExcitedLambdacSumRuleFormFactor & x)
  : BaryonFormFactor(x),_xi1(x._xi1), _rho2(x._rho2) {}

inline IBPtr LambdabExcitedLambdacSumRuleFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr LambdabExcitedLambdacSumRuleFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void LambdabExcitedLambdacSumRuleFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LambdabExcitedLambdacSumRuleFormFactor::doinit() throw(InitException) {
  BaryonFormFactor::doinit();
}

inline void LambdabExcitedLambdacSumRuleFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void LambdabExcitedLambdacSumRuleFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void LambdabExcitedLambdacSumRuleFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector LambdabExcitedLambdacSumRuleFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
