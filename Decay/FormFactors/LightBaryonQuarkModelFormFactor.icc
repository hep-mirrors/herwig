// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LightBaryonQuarkModelFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline LightBaryonQuarkModelFormFactor::LightBaryonQuarkModelFormFactor(const LightBaryonQuarkModelFormFactor & x)
  : BaryonFormFactor(x), _f1(x._f1), _f2(x._f2), _g1(x._g1), _g2(x._g2),
    _Lambdaf1(x._Lambdaf1),_Lambdaf2(x._Lambdaf2),_Lambdag1(x._Lambdag1),
    _Lambdag2(x._Lambdag2) {}

inline IBPtr LightBaryonQuarkModelFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr LightBaryonQuarkModelFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void LightBaryonQuarkModelFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void LightBaryonQuarkModelFormFactor::doinit() throw(InitException) {
  BaryonFormFactor::doinit();
  // check that the parameters are consistent
  unsigned int isize=numberOfFactors();
  if(isize!=_f1.size()||isize!=_f2.size()||isize!=_g1.size()||isize!=_g2.size()||
     isize!=_Lambdaf1.size()||isize!=_Lambdaf2.size()||
     isize!=_Lambdag1.size()||isize!=_Lambdag2.size())
    {throw InitException() << "Inconsistent parameters in "
			   << "LightBaryonQuarkModelFormFactor::doinit()" 
			   << Exception::abortnow;}
}

inline void LightBaryonQuarkModelFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void LightBaryonQuarkModelFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void LightBaryonQuarkModelFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector LightBaryonQuarkModelFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
