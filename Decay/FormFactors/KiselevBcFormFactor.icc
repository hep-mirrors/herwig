// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the KiselevBcFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline KiselevBcFormFactor::KiselevBcFormFactor(const KiselevBcFormFactor & x)
  : ScalarFormFactor(x),_fp(x._fp),_fm(x._fm),_FV(x._FV),_F0A(x._F0A),_FpA(x._FpA),
    _FmA(x._FmA),_Mfp(x._Mfp),_Mfm(x._Mfm),_MFV(x._MFV),_MF0A(x._MF0A),_MFpA(x._MFpA),
    _MFmA(x._MFmA) {}

inline IBPtr KiselevBcFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr KiselevBcFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void KiselevBcFormFactor::doupdate() throw(UpdateException) {
  ScalarFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void KiselevBcFormFactor::doinit() throw(InitException) {
  ScalarFormFactor::doinit();
  unsigned int isize(numberOfFactors());
  if(isize!=_fp.size() ||isize!=_fm.size()  ||isize!=_FV.size()  ||isize!=_F0A.size()||
     isize!=_FpA.size()||isize!=_FmA.size() ||isize!=_Mfp.size() ||isize!=_Mfm.size()||
     isize!=_MFV.size()||isize!=_MF0A.size()||isize!=_MFpA.size()||isize!=_MFmA.size())
    {throw InitException() << "Inconsistent parameters in KiselevBcFormFactor::doinit()" 
			   << Exception::abortnow;}

}

inline void KiselevBcFormFactor::dofinish() {
  ScalarFormFactor::dofinish();
}

inline void KiselevBcFormFactor::doinitrun() {
  ScalarFormFactor::doinitrun();
}

inline void KiselevBcFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ScalarFormFactor::rebind(trans);
}

inline IVector KiselevBcFormFactor::getReferences() {
  IVector ret = ScalarFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
