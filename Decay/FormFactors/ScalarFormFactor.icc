// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ScalarFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline ScalarFormFactor::ScalarFormFactor() {}

inline ScalarFormFactor::ScalarFormFactor(const ScalarFormFactor & x)
  : Interfaced(x),_incomingid(x._incomingid), _outgoingid(x._outgoingid),
    _outgoingJ(x._outgoingJ), _spectator(x._spectator), _inquark(x._inquark),
    _outquark(x._outquark) {}

inline void ScalarFormFactor::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ScalarFormFactor::doinit() throw(InitException) {
  Interfaced::doinit();
  // check the consistency of the parameters
  unsigned int isize=_incomingid.size();
  if(isize!=_outgoingid.size() || isize!=_outgoingJ.size()||
     isize!=_spectator.size()       || isize!=_inquark.size()||
     isize!=_outquark.size())
    {throw InitException() << "Inconsistent parameters in ScalarFormFactor::doinit() " 
			   << Exception::abortnow;}
}

inline void ScalarFormFactor::dofinish() {
  Interfaced::dofinish();
}

inline void ScalarFormFactor::doinitrun() {
  Interfaced::doinitrun();
}

inline void ScalarFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Interfaced::rebind(trans);
}

inline IVector ScalarFormFactor::getReferences() {
  IVector ret = Interfaced::getReferences();
  // ret.push_back(dummy);
  return ret;
}

// get the location of the form-factor in the list 
inline int ScalarFormFactor::formFactorNumber(int in, int out, bool & cc) const
{
  int output(-1);unsigned int ix(0);
  if(_incomingid.size()==0){return output;}
  do
    {
      if(_incomingid[ix]== in && _outgoingid[ix]== out)
	{cc=false;output=ix;}
      else if (_incomingid[ix]==-in && _outgoingid[ix]==-out)
	{cc=true;output=ix;}
      else if(_incomingid[ix]==-in && _outgoingid[ix]==out &&
	       (abs(_outgoingid[ix])/100)%10==(abs(_outgoingid[ix])/10)%10)
	{cc=true;output=ix;}
      ++ix;
    }
  while(ix<_incomingid.size()&&output<0);
  return output;
}

// add a form-factor to the list
inline void ScalarFormFactor::addFormFactor(int in,int out,
					    int spin, int spect, int inquark,
					    int outquark)
{
  _incomingid.push_back(in);
  _outgoingid.push_back(out);
  _outgoingJ.push_back(spin);
  _spectator.push_back(spect);
  _inquark.push_back(inquark);
  _outquark.push_back(outquark);
}

// number of form factors
inline unsigned int ScalarFormFactor::numberOfFactors() const
{return _incomingid.size();}

// information on the form factors by location in the list
inline void ScalarFormFactor::formFactorInfo(int iloc,int & ispin,int & spect,
					     int & inquark, int & outquark)
{
  ispin    = _outgoingJ[iloc];
  spect    = _spectator[iloc];
  inquark  = _inquark[iloc];
  outquark = _outquark[iloc];
}

// information on the form-factor by ids of the particles
inline void ScalarFormFactor::formFactorInfo(int in,int out,int & ispin,
					     int & spect,int & inquark, int & outquark)
{
  bool dummy;
  unsigned int ix(formFactorNumber(in,out,dummy));
  formFactorInfo(ix,ispin,spect,inquark,outquark);
}

// get the particle ids for an entry
inline void ScalarFormFactor::particleID(int iloc,int & id0,int & id1)
{
  id0=_incomingid[iloc];
  id1=_outgoingid[iloc];
}
}
