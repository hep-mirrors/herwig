// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the WSBFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline WSBFormFactor::WSBFormFactor(const WSBFormFactor & x)
  : ScalarFormFactor(x), _F0(x._F0),_V(x._V),_A0(x._A0),_A1(x._A1),
    _A2(x._A2),_mS0(x._mS0),_mS1(x._mS1), _mV0(x._mV0),_mV1(x._mV1), 
    _thetaeta(x._thetaeta) {}

inline IBPtr WSBFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr WSBFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void WSBFormFactor::doupdate() throw(UpdateException) {
  ScalarFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void WSBFormFactor::doinit() throw(InitException) {
  ScalarFormFactor::doinit();
  unsigned int isize(numberOfFactors());
  if(isize!=_F0.size() ||isize!=_V.size()  ||isize!=_A0.size() ||
     isize!=_A1.size() ||isize!=_A2.size() ||isize!=_mS0.size()||
     isize!=_mS1.size()||isize!=_mV0.size()||isize!=_mV1.size())
    {throw InitException() << "Inconsistent parameters in WSBFormFactor::doinit()" 
			   << Exception::abortnow;}
}

inline void WSBFormFactor::dofinish() {
  ScalarFormFactor::dofinish();
}

inline void WSBFormFactor::doinitrun() {
  ScalarFormFactor::doinitrun();
}

inline void WSBFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ScalarFormFactor::rebind(trans);
}

inline IVector WSBFormFactor::getReferences() {
  IVector ret = ScalarFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
