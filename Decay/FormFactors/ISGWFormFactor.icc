// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ISGWFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline ISGWFormFactor::ISGWFormFactor(const ISGWFormFactor & x)
  : ScalarFormFactor(x), _kappa(x._kappa), _mdown(x._mdown),_mup(x._mup),
    _mstrange(x._mstrange),_mcharm(x._mcharm),_mbottom(x._mbottom),
    _betaSud(x._betaSud),_betaSus(x._betaSus),_betaSuc(x._betaSuc),
    _betaSub(x._betaSub), _betaPud(x._betaPud),_betaPus(x._betaPus),
    _betaPuc(x._betaPuc), _thetaeta(x._thetaeta) 
{
  unsigned int ix,iy;
  for(ix=0;ix<5;++ix)
    {
      _mquark[ix]=x._mquark[ix];
      for(iy=0;iy<5;++iy)
	{
	  _betaS[ix][iy]=x._betaS[ix][iy];
	  _betaP[ix][iy]=x._betaP[ix][iy];
	}
    }
}

inline IBPtr ISGWFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr ISGWFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void ISGWFormFactor::doupdate() throw(UpdateException) {
  ScalarFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ISGWFormFactor::dofinish() {
  ScalarFormFactor::dofinish();
}

inline void ISGWFormFactor::doinitrun() {
  ScalarFormFactor::doinitrun();
}

inline void ISGWFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ScalarFormFactor::rebind(trans);
}

inline IVector ISGWFormFactor::getReferences() {
  IVector ret = ScalarFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}

