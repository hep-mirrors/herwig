// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ChengHeavyBaryonFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline ChengHeavyBaryonFormFactor::ChengHeavyBaryonFormFactor(const ChengHeavyBaryonFormFactor & x)
  : BaryonFormFactor(x), _mu(x._mu),_md(x._md),_ms(x._ms),_mc(x._mc),_mb(x._mb),
    _Nfi(x._Nfi),_eta(x._eta),_f1(x._f1),_f2(x._f2),_f3(x._f3),_g1(x._g1),
    _g2(x._g2),_g3(x._g3),_mVbc(x._mVbc),_mVbs(x._mVbs),_mVcs(x._mVcs),_mVbd(x._mVbd),
    _mVcu(x._mVcu),_mAbc(x._mAbc),_mAbs(x._mAbs),_mAcs(x._mAcs),_mAbd(x._mAbd),
    _mAcu(x._mAcu) {}

inline IBPtr ChengHeavyBaryonFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr ChengHeavyBaryonFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void ChengHeavyBaryonFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ChengHeavyBaryonFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void ChengHeavyBaryonFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void ChengHeavyBaryonFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector ChengHeavyBaryonFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
