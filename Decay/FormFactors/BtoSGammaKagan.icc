// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BtoSGammaKagan class.
//

namespace Herwig {

inline IBPtr BtoSGammaKagan::clone() const {
  return new_ptr(*this);
}

inline IBPtr BtoSGammaKagan::fullclone() const {
  return new_ptr(*this);
}

inline double BtoSGammaKagan::Delta(double y, double alphaS) {
  double output(0.);
  // goes to zero for large y
  if(y<=_ycut) {
    double ln(log(1.-y));
    output = -4./3./pi/(1.-y)*alphaS*(ln+1.75)*exp(-2.*alphaS/3./pi*ln*(ln+3.5));
  }
  return output;
}

inline double BtoSGammaKagan::semiLeptonicf() {
  double z2=_zratio*_zratio;
  return 1.-8.*_zratio*(1.-z2)-z2*z2-12.*z2*log(_zratio);
}


inline double BtoSGammaKagan::s22(double y) {
  return (*_s22inter)(y);
}

inline double BtoSGammaKagan::s27(double y) {
  return (*_s27inter)(y);
}

inline double BtoSGammaKagan::s77(double y) {
  if(y>_ycut){y=_ycut;}
  return 1./3.*(7.+y*(1.-2.*y)-2.*(1.+y)*log(1.-y));
}

inline double BtoSGammaKagan::s78(double y) {
  if(y>_ycut){y=_ycut;}
  return 8./9.*((1.-y)/y*log(1.-y)+1.+0.25*y*y);
}

inline double BtoSGammaKagan::s88(double y) {
  double ratio(_mb/_ms);
  if(y>_ycut){y=_ycut;}
  return 1./27.*(2.*(2.-2.*y+y*y)/y*(log(1.-y)+2.*log(ratio))-2.*y*y-y-8.*(1.-y)/y);
}
  
inline double BtoSGammaKagan::realG(double t) {
  if(t<4.) {
    double at(atan(sqrt(t/(4.-t))));
    return -2.*at*at;
  }
  else {
    double ln(log(0.5*(sqrt(t)+sqrt(t-4.))));
    return 2.*(ln*ln-0.25*pi*pi);
  }
}

inline double BtoSGammaKagan::imagG(double t) {
  if(t<4.) return 0.;
  else     return -2.*pi*log(0.5*(sqrt(t)+sqrt(t-4.)));
}

inline double BtoSGammaKagan::integrands22(double x) {
  double reg(realG(x/_zratio)),img(imagG(x/_zratio));
  return 16./27.*(1.-x)*(_zratio*_zratio/x/x*(reg*reg+img*img)+_zratio/x*reg+0.25);
}

inline double BtoSGammaKagan::integrands27(double x) {
  return -8./9.*_zratio*(realG(x/_zratio)+0.5*x/_zratio);
}

inline double BtoSGammaKagan::alphaS(Energy Q) {
  double lo(1.-0.5*_beta0*_alphaSZ/pi*log(_mz/Q));
  return _alphaSZ/lo*(1.-0.25*_beta1/_beta0*_alphaSZ/pi*log(lo)/lo);
}

inline double BtoSGammaKagan::KNLO(double y) {
  return _delta*Delta(y,_alphaSM)+_alphaSM/pi*(s22(y)*_c20*_c20+s77(y)*_c70*_c70+
					       s88(y)*_c80*_c80+s78(y)*_c70*_c80+
					       s27(y)*_c20*(_c70-_c80/3.));
}
  
inline double BtoSGammaKagan::integrandPy(Energy kp) {
  return KNLO(_MB*_y/(_mb+kp))*_MB/(_mb+kp)*fermiFunction(kp);
}

inline double BtoSGammaKagan::fermiFunction(Energy kp) {
  return exponentialFermiFunction(kp,_fermilambda,_fermia,_ferminorm,_fermilambda1);
}

}
