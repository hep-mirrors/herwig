// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MelikhovStechFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline MelikhovStechFormFactor::
MelikhovStechFormFactor(const MelikhovStechFormFactor & x)
  : ScalarFormFactor(x), _fplus0(x._fplus0), _sigma1fp(x._sigma1fp), 
    _sigma2fp(x._sigma2fp), _f00(x._f00), _sigma1f0(x._sigma1f0), _sigma2f0(x._sigma2f0),
    _fT0(x._fT0), _sigma1fT(x._sigma1fT), _sigma2fT(x._sigma2fT), _V0(x._V0),
    _sigma1V0(x._sigma1V0),_sigma2V0(x._sigma2V0),_A00(x._A00),	_sigma1A0(x._sigma1A0),
    _sigma2A0(x._sigma2A0), _A10(x._A10), _sigma1A1(x._sigma1A1), _sigma2A1(x._sigma2A1),
    _A20(x._A20), _sigma1A2(x._sigma1A2), _sigma2A2(x._sigma2A2), _T10(x._T10),
    _sigma1T1(x._sigma1T1), _sigma2T1(x._sigma2T1), _T20(x._T20), _sigma1T2(x._sigma1T2),
    _sigma2T2(x._sigma2T2), _T30(x._T30), _sigma1T3(x._sigma1T3), _sigma2T3(x._sigma2T3),
    _massP(x._massP),_massV(x._massV), _thetaeta(x._thetaeta)
{}

inline IBPtr MelikhovStechFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr MelikhovStechFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void MelikhovStechFormFactor::doupdate() throw(UpdateException) {
  ScalarFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MelikhovStechFormFactor::doinit() throw(InitException) {
  ScalarFormFactor::doinit();
  unsigned int isize(numberOfFactors());
  if(isize!=_fplus0.size()||isize!=_sigma1fp.size()||isize!=_sigma2fp.size()||
     isize!=_f00.size()   ||isize!=_sigma1f0.size()||isize!=_sigma2f0.size()||
     isize!=_fT0.size()   ||isize!=_sigma1fT.size()||isize!=_sigma2fT.size()||
     isize!=_V0.size()    ||isize!=_sigma1V0.size()||isize!=_sigma2V0.size()||
     isize!=_A00.size()   ||isize!=_sigma1A0.size()||isize!=_sigma2A0.size()||
     isize!=_A10.size()   ||isize!=_sigma1A1.size()||isize!=_sigma2A1.size()||
     isize!=_A20.size()   ||isize!=_sigma1A2.size()||isize!=_sigma2A2.size()||
     isize!=_T10.size()   ||isize!=_sigma1T1.size()||isize!=_sigma2T1.size()||
     isize!=_T20.size()   ||isize!=_sigma1T2.size()||isize!=_sigma2T2.size()||
     isize!=_T30.size()   ||isize!=_sigma1T3.size()||isize!=_sigma2T3.size()||
     isize!=_massP.size() ||isize!=_massV.size())
    {throw InitException() << "Inconsistent parameters in " 
			   << "MelikhovStechFormFactor::doinit()" 
			   << Exception::abortnow;}
}

inline void MelikhovStechFormFactor::dofinish() {
  ScalarFormFactor::dofinish();
}

inline void MelikhovStechFormFactor::doinitrun() {
  ScalarFormFactor::doinitrun();
}

inline void MelikhovStechFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ScalarFormFactor::rebind(trans);
}

inline IVector MelikhovStechFormFactor::getReferences() {
  IVector ret = ScalarFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
