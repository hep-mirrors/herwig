// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BaryonFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline BaryonFormFactor::BaryonFormFactor() {}

inline BaryonFormFactor::BaryonFormFactor(const BaryonFormFactor & x)
  : Interfaced(x),_incomingid(x._incomingid), _outgoingid(x._outgoingid),
    _incomingJ(x._incomingJ), _outgoingJ(x._outgoingJ),_spectator1(x._spectator1),
    _spectator2(x._spectator2),_inquark(x._inquark),_outquark(x._outquark),
    _numbermodes(x._numbermodes) {}

inline IBPtr BaryonFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr BaryonFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void BaryonFormFactor::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BaryonFormFactor::doinit() throw(InitException) {
  Interfaced::doinit();
  // check the consistency of the parameters
  unsigned int isize(_incomingid.size());
  if(isize!=_outgoingid.size() || isize!=_incomingJ.size()||isize!=_outgoingJ.size()||
     isize!=_spectator1.size()|| isize!=_spectator2.size()|| isize!=_inquark.size()||
     isize!=_outquark.size())
    {throw InitException() << "Inconsistent parameters in BaryonFormFactor::doinit() " 
			   << Exception::abortnow;}
}

inline void BaryonFormFactor::dofinish() {
  Interfaced::dofinish();
}

inline void BaryonFormFactor::doinitrun() {
  Interfaced::doinitrun();
}

inline void BaryonFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Interfaced::rebind(trans);
}

inline IVector BaryonFormFactor::getReferences() {
  IVector ret = Interfaced::getReferences();
  // ret.push_back(dummy);
  return ret;
}

// get the location of the form-factor in the list 
inline int BaryonFormFactor::formFactorNumber(int in, int out, bool & cc) const
{
  int output(-1);unsigned int ix(0);
  if(_incomingid.size()==0){return output;}
  do
    {
      if(_incomingid[ix]== in && _outgoingid[ix]== out)
	{cc=false;output=ix;}
      else if (_incomingid[ix]==-in && _outgoingid[ix]==-out)
	{cc=true;output=ix;}
      ++ix;
    }
  while(ix<_incomingid.size()&&output<0);
  return output;
}

// add a form-factor to the list
inline void BaryonFormFactor::addFormFactor(int in,int out,int inspin,int outspin,
					    int spect1,int spect2, int inquark,
					    int outquark)
					    
 {
  _incomingid.push_back(in);
  _outgoingid.push_back(out);
  _incomingJ.push_back(inspin);
  _outgoingJ.push_back(outspin);
  _spectator1.push_back(spect1);
  _spectator2.push_back(spect2);
  _inquark.push_back(inquark);
  _outquark.push_back(outquark);
}

// number of form factors
inline unsigned int BaryonFormFactor::numberOfFactors(){return _incomingid.size();}

// information on the form factors by location in the list
inline void BaryonFormFactor::formFactorInfo(int iloc,int & ispin,int & ospin,
					     int & spect1,int & spect2,int & inquark,
					     int & outquark)
{
  ispin    = _incomingJ[iloc];
  ospin    = _outgoingJ[iloc];
  spect1   = _spectator1[iloc];
  spect2   = _spectator2[iloc];
  inquark  = _inquark[iloc];
  outquark = _outquark[iloc]; 
}

// information on the form-factor by ids of the particles
inline void BaryonFormFactor::formFactorInfo(int in,int out,int & ispin,int & ospin,
					     int & spect1,int & spect2, int & inquark,
					     int & outquark)
{
  bool dummy;
  unsigned int ix=formFactorNumber(in,out,dummy);
  formFactorInfo(ix,ispin,ospin,spect1,spect2,inquark,outquark);
}

// get the particle ids for an entry
inline void BaryonFormFactor::particleID(int iloc,int & id0,int & id1)
{
  id0=_incomingid[iloc];
  id1=_outgoingid[iloc];
}

inline void BaryonFormFactor::initialModes(unsigned int nmodes)
{_numbermodes=nmodes;}

inline unsigned int BaryonFormFactor::initialModes(){return _numbermodes;}
}
