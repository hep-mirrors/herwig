// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BaryonSimpleFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline BaryonSimpleFormFactor::BaryonSimpleFormFactor() 
{
  // axial vector coupling in beta decay
  _gA=1.25;
  // SU(3) breaking paramters
  // D/(D+F) ratio
  _alphaD=0.6;
  // eta_V parameter
  _etaV=0.970;
  // eta_A parameter
  _etaA=1.080;
  // SU(3) breaking factors for the electric dipole moment
  _rhoE=0.094;
  // SU(3) breaking factors for the magnetic dipole moment
  _rhoM=0.860;
  // the various decay modes handled by the model
  addFormFactor(2112,2212,2,2,2,1,1,2);
  addFormFactor(3222,3122,2,2,3,2,1,2);
  addFormFactor(3112,3122,2,2,3,1,1,2);
  addFormFactor(3112,3212,2,2,3,1,1,2);
  addFormFactor(3212,3222,2,2,3,2,1,2);
  addFormFactor(3312,3322,2,2,3,3,1,2);
  addFormFactor(3122,2212,2,2,2,1,3,2);
  addFormFactor(3212,2212,2,2,2,1,3,2);
  addFormFactor(3112,2112,2,2,1,1,3,2);
  addFormFactor(3312,3122,2,2,3,1,3,2);
  addFormFactor(3312,3212,2,2,3,1,3,2);
  addFormFactor(3322,3222,2,2,3,2,3,2);
  // set the inital number of form factors
  initialModes(numberOfFactors());
}

inline BaryonSimpleFormFactor::BaryonSimpleFormFactor(const BaryonSimpleFormFactor & x)
  : BaryonFormFactor(x), _gA(x._gA), _alphaD(x._alphaD), _etaV(x._etaV), _etaA(x._etaA),
    _rhoE(x._rhoE),_rhoM(x._rhoM), _f1(x._f1),_f2(x._f2), _g1(x._g1), _g2(x._g2) {}

inline IBPtr BaryonSimpleFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr BaryonSimpleFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void BaryonSimpleFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BaryonSimpleFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void BaryonSimpleFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void BaryonSimpleFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector BaryonSimpleFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
