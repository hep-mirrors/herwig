// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BaryonSimpleFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline BaryonSimpleFormFactor::BaryonSimpleFormFactor() 
{
  // axial vector coupling in beta decay
  _gA=1.25;
  // SU(3) breaking paramters
  // D/(D+F) ratio
  _alphaD=0.6;
  // eta_V parameter
  _etaV=0.970;
  // eta_A parameter
  _etaA=1.080;
  // SU(3) breaking factors for the electric dipole moment
  _rhoE=0.094;
  // SU(3) breaking factors for the magnetic dipole moment
  _rhoM=0.860;
  // the various decay modes handled by the model
  addFormFactor(2112,2212,2,2,2,1,1,2);
  addFormFactor(3222,3122,2,2,3,2,1,2);
  addFormFactor(3112,3122,2,2,3,1,1,2);
  addFormFactor(3112,3212,2,2,3,1,1,2);
  addFormFactor(3212,3222,2,2,3,2,1,2);
  addFormFactor(3312,3322,2,2,3,3,1,2);
  addFormFactor(3122,2212,2,2,2,1,3,2);
  addFormFactor(3212,2212,2,2,2,1,3,2);
  addFormFactor(3112,2112,2,2,1,1,3,2);
  addFormFactor(3312,3122,2,2,3,1,3,2);
  addFormFactor(3312,3212,2,2,3,1,3,2);
  addFormFactor(3322,3222,2,2,3,2,3,2);
}

inline BaryonSimpleFormFactor::BaryonSimpleFormFactor(const BaryonSimpleFormFactor & x)
  : BaryonFormFactor(x), _gA(x._gA), _alphaD(x._alphaD), _etaV(x._etaV), _etaA(x._etaA),
    _rhoE(x._rhoE),_rhoM(x._rhoM), _f1(x._f1),_f2(x._f2), _g1(x._g1), _g2(x._g2) {}

inline IBPtr BaryonSimpleFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr BaryonSimpleFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void BaryonSimpleFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BaryonSimpleFormFactor::doinit() throw(InitException) {
  BaryonFormFactor::doinit();
  _f1.resize(0);_f2.resize(0);_g1.resize(0);_g2.resize(0);
  // calculate the couplings for the different modes
  int id0,id1;
  double root23(sqrt(2./3.)),root2(sqrt(2)),root32(sqrt(3./2.));
  for(unsigned int ix=0;ix<numberOfFactors();++ix)
    {
      // get the particle ids for the mode
      particleID(ix,id0,id1);
      // work out the couplings
      // neutron beta decay
      if(id0==2112&&id1==2212)
	{
	  _f1.push_back(1.) ;_g1.push_back(_gA);
	  _f2.push_back(3.7*_gA-1.0);_g2.push_back(0.);
	}
      // sigma+ to Lambda
      else if(id0==3222&&id1==3122)
	{
	  _f1.push_back(0.);_g1.push_back(_gA*root23*_alphaD);
	  _f2.push_back(4.55*_g1.back()-1.0*_f1.back());
	  _g2.push_back(-0.03*_g1.back());
	}
      // sigma
      else if(id0==3112&&id1==3122)
	{
	  _f1.push_back(0.);_g1.push_back(_gA*root23*_alphaD);
	  _f2.push_back(4.55*_g1.back()-1.0*_f1.back());
	  _g2.push_back(-0.03*_g1.back());
	}
      else if(id0==3112&&id0==3212)
	{
	  _f1.push_back(root2);_g1.push_back(_gA*root2*(1.-_alphaD));
	  _f2.push_back(4.69*_g1.back()-_f1.back());_g2.push_back(0.);
	}
      else if(id0==3212&&id0==3222)
	{
	  _f1.push_back(-root2);_g1.push_back(-_gA*root2*(1.-_alphaD));
	  _f2.push_back(4.69*_g1.back()-_f1.back());_g2.push_back(0.);
	}
      else if(id0==3312&&id1==3322)
	{
	  _f1.push_back(-1.);_g1.push_back(-_gA*(1.-2.*_alphaD));
	  _f2.push_back(5.21*_g1.back()-_f1.back());_g2.push_back(0.);
	}
      else if(id0==3122&&id1==2212)
	{
	  _f1.push_back(-root32*_etaV);
	  _g1.push_back(-_gA*root32*_etaA*(1.-2.*_alphaD/3.));
	  _f2.push_back(4.05*_rhoM*_g1.back()-1.01*_f1.back());
	  _g2.push_back((4.05*_rhoE-0.09)*_g1.back());
	}
      else if(id0==3212&&id1==2212)
	{
	  _f1.push_back(-_etaV/root2);
	  _g1.push_back(-_gA/root2*_etaA*(1.-2.*_alphaD));
	  _f2.push_back(4.2*_rhoM*_g1.back()-1.03*_f1.back());
	  _g2.push_back((4.2*_rhoE-0.12)*_g1.back());
	}
      else if(id0==3112&&id1==2112)
	{
	  _f1.push_back(-_etaV);
	  _g1.push_back(-_gA*_etaA*(1.-2.*_alphaD));
	  _f2.push_back(4.2*_rhoM*_g1.back()-1.03*_f1.back());
	  _g2.push_back((4.2*_rhoE-0.12)*_g1.back());
	}
      else if(id0==3312&&id1==3122)
	{
	  _f1.push_back(root32*_etaV);
	  _g1.push_back(_gA*root32*_etaA*(1.-4./3.*_alphaD));
	  _f2.push_back(4.8*_rhoM*_g1.back()-1.01*_f1.back());
	  _g2.push_back((4.8*_rhoE-0.08)*_g1.back());
	}
      else if(id0==3312&&id1==3212)
	{
	  _f1.push_back(_etaV/root2);
	  _g1.push_back(_gA/root2);
	  _f2.push_back(4.95*_rhoM*_g1.back()-1.*_f1.back());
	  _g2.push_back((4.95*_rhoE-0.05)*_g1.back());
	}
      else if(id0==3322&&id1==3222)
	{
	  _f1.push_back(_etaV);
	  _g1.push_back(_gA*_etaV);
	  _f2.push_back(4.95*_rhoM*_g1.back()-1.*_f1.back());
	  _g2.push_back((4.95*_rhoE-0.05)*_g1.back());
	}
      else
	{throw InitException() << "Mode not recognised in BaryonSimpleFormFactor"
			       << Exception::abortnow;}
    }
}

inline void BaryonSimpleFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void BaryonSimpleFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void BaryonSimpleFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector BaryonSimpleFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
