// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SingletonFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline SingletonFormFactor::SingletonFormFactor() 
{
  // the charm and strange quark masses
  _mcharm   = 1.80*GeV;
  _mstrange = 0.51*GeV;
  // mixing angles
  _thetalambda =acos(-1.)/4.;
  _thetasigma  =acos(-1.)/4.;
  _thetaxi     =acos(-1.)/4.;
  _thetaxip    =acos(-1.)/4.;
  // the particles handled and the masses for them 
  // lambda_b
  addFormFactor(5122,4122,2,2,1,2,5,4);_polemass.push_back(6.0*GeV);
  // sigma_b
  addFormFactor(5112,4112,2,2,1,1,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5212,4212,2,2,2,1,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5222,4222,2,2,2,2,5,4);_polemass.push_back(6.0*GeV);
  // omega_b
  addFormFactor(5332,4332,2,2,3,3,5,4);_polemass.push_back(6.4*GeV);
  // xi_b
  addFormFactor(5232,4232,2,2,2,3,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5132,4132,2,2,1,3,5,4);_polemass.push_back(6.0*GeV);
  // lambda_c
  addFormFactor(4122,3122,2,2,1,2,4,3);_polemass.push_back(2.5*GeV);
  // sigma_c
  addFormFactor(4112,3112,2,2,1,1,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4212,3212,2,2,2,1,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4222,3222,2,2,2,2,4,3);_polemass.push_back(2.8*GeV);
  // xi_c
  addFormFactor(4232,3322,2,2,2,3,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4132,3312,2,2,1,3,4,3);_polemass.push_back(2.8*GeV);
}

inline SingletonFormFactor::SingletonFormFactor(const SingletonFormFactor & x)
  : BaryonFormFactor(x), _mcharm(x._mcharm), _mstrange(x._mstrange),
    _thetalambda(x._thetalambda),_thetasigma(x._thetasigma),_thetaxi(x._thetaxi),
    _thetaxip(x._thetaxip),_polemass(x._polemass),_abar(x._abar),_gbar(x._gbar),
    _apbar(x._apbar),_ambar(x._ambar),_gpbar(x._gpbar),_gmbar(x._gmbar) {}

inline IBPtr SingletonFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr SingletonFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void SingletonFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SingletonFormFactor::doinit() throw(InitException) {
  BaryonFormFactor::doinit();
  if(numberOfFactors()!=_polemass.size())
    {throw InitException() << "Inconsistent parameters in SingletonFormFactor::doinit()"
			   << Exception::abortnow;}
  // calculate the constants for the form-factors
  int id0,id1;
  double NmM,xi;
  Energy root,m0,m1,mq,ratio;
  _gbar.resize(0);_abar.resize(0);
  _apbar.resize(0);_ambar.resize(0);
  _gpbar.resize(0);_gmbar.resize(0);
  for(unsigned int ix=0;ix<numberOfFactors();++ix)
    {
      // id codes for the particles
      particleID(ix,id0,id1);
      m0 = getParticleData(id0)->mass();
      m1 = getParticleData(id1)->mass();
      root = sqrt(4.*m0*m1);
      ratio = sqrt(m1/m0);
      if((abs(id0)==5122&&abs(id1)==4122)||
	 (abs(id0)==5132&&abs(id1)==4132)||
	 (abs(id0)==5232&&abs(id1)==4232))
	{mq = _mcharm; xi =1.;NmM=1.;}
      else if((abs(id0)==5222&&abs(id1)==4222)||
	      (abs(id0)==5212&&abs(id1)==4212)||
	      (abs(id0)==5112&&abs(id1)==4112)||
	      (abs(id0)==5332&&abs(id1)==4332)||
	      (abs(id0)==5312&&abs(id1)==4312)||
	      (abs(id0)==5322&&abs(id1)==4322))
	{mq=_mcharm;xi=-1./3.;NmM=1.;}
      else if(abs(id0)==4122&&abs(id1)==3122)
	{mq=_mstrange;xi=1.;NmM=sqrt(2./3.)*sin(_thetalambda);}
      else if((abs(id0)==4222&&abs(id1)==3222)||
	      (abs(id0)==4212&&abs(id1)==3212)||
	      (abs(id0)==4112&&abs(id1)==3112))
	{mq=_mstrange;xi=-1./3.;NmM=sqrt(2./3.)*cos(_thetasigma);}
      else if((abs(id0)==4132&&abs(id1)==3312)||
	      (abs(id0)==4232&&abs(id1)==3322))
	{mq=_mstrange;xi=1.;NmM=1./sqrt(2.)*sin(_thetaxi);}
      else if((abs(id0)==4312&&abs(id1)==3322)||
	      (abs(id0)==4322&&abs(id1)==3312))
	{mq=_mstrange;xi=-1./3.;NmM=1./sqrt(6.)*cos(_thetaxip);}
      else
	{throw InitException() << "Unknown mode in SingletonFormFactor::doinit()"
			       << Exception::abortnow;}
      // compute the constants
      _gbar.push_back(root*m1*xi*NmM/mq);
      _abar.push_back(root*xi*NmM);
      _apbar.push_back(-ratio*(m1/mq-1.)*xi*NmM);
      _ambar.push_back(_apbar.back());
      _gpbar.push_back(-ratio*NmM*((xi*m1/mq-1.)+0.5*(m1-m0)/mq*(1.-xi)));
      _gmbar.push_back(-ratio*NmM*((xi*m1/mq-1.)+0.5*(m1+m0)/mq*(1.-xi)));
    }
}

inline void SingletonFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void SingletonFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void SingletonFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector SingletonFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
