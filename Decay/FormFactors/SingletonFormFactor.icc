// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SingletonFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline SingletonFormFactor::SingletonFormFactor() 
{
  // the charm and strange quark masses
  _mcharm   = 1.80*GeV;
  _mstrange = 0.51*GeV;
  // mixing angles
  _thetalambda =pi/4.;
  _thetasigma  =pi/4.;
  _thetaxi     =pi/4.;
  _thetaxip    =pi/4.;
  // the particles handled and the masses for them 
  // lambda_b
  addFormFactor(5122,4122,2,2,1,2,5,4);_polemass.push_back(6.0*GeV);
  // sigma_b
  addFormFactor(5112,4112,2,2,1,1,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5212,4212,2,2,2,1,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5222,4222,2,2,2,2,5,4);_polemass.push_back(6.0*GeV);
  // omega_b
  addFormFactor(5332,4332,2,2,3,3,5,4);_polemass.push_back(6.4*GeV);
  // xi_b
  addFormFactor(5232,4232,2,2,2,3,5,4);_polemass.push_back(6.0*GeV);
  addFormFactor(5132,4132,2,2,1,3,5,4);_polemass.push_back(6.0*GeV);
  // lambda_c
  addFormFactor(4122,3122,2,2,1,2,4,3);_polemass.push_back(2.5*GeV);
  // sigma_c
  addFormFactor(4112,3112,2,2,1,1,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4212,3212,2,2,2,1,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4222,3222,2,2,2,2,4,3);_polemass.push_back(2.8*GeV);
  // xi_c
  addFormFactor(4232,3322,2,2,2,3,4,3);_polemass.push_back(2.8*GeV);
  addFormFactor(4132,3312,2,2,1,3,4,3);_polemass.push_back(2.8*GeV);
  // set the inital number of form factors
  initialModes(numberOfFactors());
}

inline SingletonFormFactor::SingletonFormFactor(const SingletonFormFactor & x)
  : BaryonFormFactor(x), _mcharm(x._mcharm), _mstrange(x._mstrange),
    _thetalambda(x._thetalambda),_thetasigma(x._thetasigma),_thetaxi(x._thetaxi),
    _thetaxip(x._thetaxip),_polemass(x._polemass),_xi(x._xi), _NmM(x._NmM),
    _mquark(x._mquark) {}

inline IBPtr SingletonFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr SingletonFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void SingletonFormFactor::doupdate() throw(UpdateException) {
  BaryonFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SingletonFormFactor::dofinish() {
  BaryonFormFactor::dofinish();
}

inline void SingletonFormFactor::doinitrun() {
  BaryonFormFactor::doinitrun();
}

inline void SingletonFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  BaryonFormFactor::rebind(trans);
}

inline IVector SingletonFormFactor::getReferences() {
  IVector ret = BaryonFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
