// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the BallZwickyScalarFormFactor class.
//

namespace Herwig {
using namespace ThePEG;

inline BallZwickyScalarFormFactor::BallZwickyScalarFormFactor() 
{
  double ort(1./sqrt(2.));
  // parameters for the B to pi  form-factors
  _r10.push_back(0.);_r20.push_back(ort*0.258);
  _m120.push_back(-1.);_mfit20.push_back(33.81*GeV2);
  _r1plus.push_back(ort*0.744);_r2plus.push_back(-ort*0.486);
  _m12plus.push_back(5.32*5.32*GeV2);_mfit2plus.push_back(40.73*GeV2);
  _r1T.push_back(ort*1.387);_r2T.push_back(-ort*1.134);
  _m12T.push_back(5.32*5.32*GeV2);_mfit2T.push_back(32.22*GeV2);
  addFormFactor(521, 111,0,2,-5,-2);
  _r10.push_back(0.);_r20.push_back(0.258);
  _m120.push_back(-1.);_mfit20.push_back(33.81*GeV2);
  _r1plus.push_back(0.744);_r2plus.push_back(-0.486);
  _m12plus.push_back(5.32*5.32*GeV2);_mfit2plus.push_back(40.73*GeV2);
  _r1T.push_back(1.387);_r2T.push_back(-1.134);
  _m12T.push_back(5.32*5.32*GeV2);_mfit2T.push_back(32.22*GeV2);
  addFormFactor(511,-211,0,2,-5,-2);
  // parameters for the B to K   form-factors
  _r10.push_back(0.);_r20.push_back(0.330);
  _m120.push_back(-1.);_mfit20.push_back(37.46*GeV2);
  _r1plus.push_back(0.162);_r2plus.push_back(0.173);
  _m12plus.push_back(5.41*5.41*GeV2);_mfit2plus.push_back(-1.);
  _r1T.push_back(0.161);_r2T.push_back(0.198);
  _m12T.push_back(5.41*5.41*GeV2);_mfit2T.push_back(-1.);
  addFormFactor(521,321,0,2,-5,-3);
  _r10.push_back(0.);_r20.push_back(0.330);
  _m120.push_back(-1.);_mfit20.push_back(37.46*GeV2);
  _r1plus.push_back(0.162);_r2plus.push_back(0.173);
  _m12plus.push_back(5.41*5.41*GeV2);_mfit2plus.push_back(-1.);
  _r1T.push_back(0.161);_r2T.push_back(0.198);
  _m12T.push_back(5.41*5.41*GeV2);_mfit2T.push_back(-1.);
  addFormFactor(511,311,0,2,-5,-3);
  // parameters for the B to eta form-factors
  _r10.push_back(0.);_r20.push_back(ort*0.273);
  _m120.push_back(-1.);_mfit20.push_back(31.03*GeV2);
  _r1plus.push_back(ort*0.122);_r2plus.push_back(ort*0.155);
  _m12plus.push_back(5.32*5.32*GeV);_mfit2plus.push_back(-1.);
  _r1T.push_back(ort*0.111);_r2T.push_back(ort*0.175);
  _m12T.push_back(5.32*5.32*GeV);_mfit2T.push_back(-1.);
  addFormFactor(521,221,0,2,-5,-2);
}

inline BallZwickyScalarFormFactor::BallZwickyScalarFormFactor(const BallZwickyScalarFormFactor & x)
  : ScalarFormFactor(x),_r10(x._r10),_r20(x._r20),_r1plus(x._r1plus),_r2plus(x._r2plus),
    _r1T(x._r1T),_r2T(x._r2T),_m120(x._m120),_mfit20(x._mfit20),_m12plus(x._m12plus),
    _mfit2plus(x._mfit2plus),_m12T(x._m12T),_mfit2T(x._mfit2T) {}

inline IBPtr BallZwickyScalarFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr BallZwickyScalarFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void BallZwickyScalarFormFactor::doupdate() throw(UpdateException) {
  ScalarFormFactor::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void BallZwickyScalarFormFactor::doinit() throw(InitException) {
  ScalarFormFactor::doinit();
  unsigned int isize=numberOfFactors();
  if(isize!=_r10.size()||isize!=_r20.size()||isize!=_r1plus.size()||
     isize!=_r2plus.size()||isize!=_r1T.size()||
     isize!=_r2T.size()||isize!=_m120.size()||isize!=_mfit20.size()||
     isize!=_m12plus.size()||isize!=_mfit2plus.size()||
     isize!=_m12T.size()||isize!=_mfit2T.size())
    {throw InitException() << "Inconsistent parameters in " 
			   << "BallZwickyScalarFormFactor::doinit()" 
			   << Exception::abortnow;}
}

inline void BallZwickyScalarFormFactor::dofinish() {
  ScalarFormFactor::dofinish();
}

inline void BallZwickyScalarFormFactor::doinitrun() {
  ScalarFormFactor::doinitrun();
}

inline void BallZwickyScalarFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ScalarFormFactor::rebind(trans);
}

inline IVector BallZwickyScalarFormFactor::getReferences() {
  IVector ret = ScalarFormFactor::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
