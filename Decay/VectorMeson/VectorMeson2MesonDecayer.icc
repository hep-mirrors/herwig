// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMeson2MesonDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
using namespace ThePEG;
  
inline VectorMeson2MesonDecayer::
VectorMeson2MesonDecayer(const VectorMeson2MesonDecayer & x)
  : VectorMesonDecayerBase(x), _incoming(x._incoming), _outgoing1(x._outgoing1),
    _outgoing2(x._outgoing2), _maxweight(x._maxweight), _coupling(x._coupling),
    _initsize(x._initsize) {}

inline IBPtr VectorMeson2MesonDecayer::clone() const {
  return new_ptr(*this);
}
  
inline IBPtr VectorMeson2MesonDecayer::fullclone() const {
  return new_ptr(*this);
}
  
inline void VectorMeson2MesonDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
  //  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
  //  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
  //  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
  //  touch()
  // Touch if anything has changed.
}
  
inline void VectorMeson2MesonDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  // check consistence of the parameters
  unsigned int isize=_incoming.size();
  if(isize!=_outgoing1.size()||isize!=_outgoing2.size()||isize!=_maxweight.size()||
     isize!=_coupling.size())
    {throw InitException() << "Inconsistent parameters in "
			   << "VectorMeson2MesonDecayer" << Exception::runerror;}
  // set up the integration channels
  vector<double> wgt(1,1.);
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0]=getParticleData( _incoming[ix]);
      extpart[1]=getParticleData(_outgoing1[ix]);
      extpart[2]=getParticleData(_outgoing2[ix]);
      mode=new_ptr(DecayPhaseSpaceMode(extpart,this));
      addMode(mode,_maxweight[ix],wgt);
    }
}
  
inline void VectorMeson2MesonDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}
  
inline void VectorMeson2MesonDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  if(_Initialize)
    {for(unsigned int ix=0;ix<_incoming.size();++ix)
	{_maxweight[ix]== 2.*mode(ix)->maxWeight();}}
}
  
inline void VectorMeson2MesonDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}
  
inline IVector VectorMeson2MesonDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}
  
}
