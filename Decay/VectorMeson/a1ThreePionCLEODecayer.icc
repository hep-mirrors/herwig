// -*- C++ -*-
//
// a1ThreePionCLEODecayer.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the a1ThreePionCLEODecayer class.
//

namespace Herwig {
using namespace ThePEG;
  
inline IBPtr a1ThreePionCLEODecayer::clone() const {
  return new_ptr(*this);
}
  
inline IBPtr a1ThreePionCLEODecayer::fullclone() const {
  return new_ptr(*this);
}

// breit wigner for the sigma
inline Complex a1ThreePionCLEODecayer::sigmaBreitWigner(Energy2 q2,int icharge) const {
  Energy q=sqrt(q2);
  Complex ii(0.,1.);
  double ratio = icharge==0 ? 
    Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_psigmacc :
    Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_psigma00;
  Energy gamrun=_sigmawidth*ratio*_sigmamass/q;
  return _sigmamass*_sigmamass/(_sigmamass*_sigmamass-q2-ii*_sigmamass*gamrun);
}

// breit wigner for the f_0
inline Complex a1ThreePionCLEODecayer::f0BreitWigner(Energy2 q2,int icharge) const {
  Energy q=sqrt(q2);
  Complex ii(0.,1.);
  double ratio = icharge==0 ? 
    Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_pf0cc :
    Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_pf000;
  Energy gamrun=_f0width*ratio*_f0mass/q;
  return _f0mass*_f0mass/(_f0mass*_f0mass-q2-ii*_f0mass*gamrun);
}

// breit wigner for the f_2
inline Complex a1ThreePionCLEODecayer::f2BreitWigner(Energy2 q2,int icharge) const {
  Energy q=sqrt(q2);
  Complex ii(0.,1.);
  double ratio = icharge==0 ?
    Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_pf2cc :
    Kinematics::pstarTwoBodyDecay(q,_mpi0,_mpi0)/_pf200;
  Energy gamrun=_f2width*pow(ratio,5)*_f2mass/q;
  return _f2mass*_f2mass/(_f2mass*_f2mass-q2-ii*_f2mass*gamrun);
}
  
// breit wigner for the rho
inline Complex a1ThreePionCLEODecayer::rhoBreitWigner(int ires, Energy2 q2,
						      int icharge) const {
  Energy q=sqrt(q2);
  Complex ii(0.,1.);
  double ratio = icharge==0 ? 
    Kinematics::pstarTwoBodyDecay(q,_mpic,_mpic)/_prhocc[ires] :
    Kinematics::pstarTwoBodyDecay(q,_mpic,_mpi0)/_prhoc0[ires];
  Energy gamrun=_rhowidth[ires]*pow(ratio,3)*_rhomass[ires]/q;
  return _rhomass[ires]*_rhomass[ires]/(_rhomass[ires]*_rhomass[ires]
					-q2-ii*_rhomass[ires]*gamrun);
}
  
}
