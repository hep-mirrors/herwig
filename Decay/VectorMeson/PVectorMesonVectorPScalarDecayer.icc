// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PVectorMesonVectorPScalarDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline PVectorMesonVectorPScalarDecayer::
PVectorMesonVectorPScalarDecayer(const PVectorMesonVectorPScalarDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling),_incoming(x._incoming),
    _outgoingV(x._outgoingV),_outgoingP(x._outgoingP),_maxweight(x._maxweight),
    _initsize(x._initsize) {}

inline IBPtr PVectorMesonVectorPScalarDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr PVectorMesonVectorPScalarDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void PVectorMesonVectorPScalarDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void PVectorMesonVectorPScalarDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  // check consistence of the parameters
  unsigned int isize=_incoming.size();
  if(isize!=_outgoingV.size()||isize!=_outgoingP.size()||
     isize!=_maxweight.size()||isize!=_coupling.size())
    {throw InitException() << "Inconsistent parameters in "
			   << "PVectorMesonVectorPScalarDecayer::doinit()" 
			   << Exception::abortnow;}
  // set up the integration channels
  vector<double> wgt(0);
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0]=getParticleData(_incoming[ix]);
      extpart[1]=getParticleData(_outgoingV[ix]);
      extpart[2]=getParticleData(_outgoingP[ix]);
      mode=new DecayPhaseSpaceMode(extpart,this);
      addMode(mode,_maxweight[ix],wgt);
    }
}

inline void PVectorMesonVectorPScalarDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void PVectorMesonVectorPScalarDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  if(_Initialize)
    {for(unsigned int ix=0;ix<_incoming.size();++ix)
	{_maxweight[ix] = 2.*mode(ix)->maxWeight();}}
}

inline void PVectorMesonVectorPScalarDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector PVectorMesonVectorPScalarDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
