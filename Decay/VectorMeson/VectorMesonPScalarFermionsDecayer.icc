// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMesonPScalarFermionsDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
  using namespace ThePEG;

inline VectorMesonPScalarFermionsDecayer::VectorMesonPScalarFermionsDecayer() 
{
  // omega -> pi e+e- /mu+mu-
  _incoming.push_back( 223);_outgoingP.push_back( 111);
  _outgoingf.push_back(11);_outgoinga.push_back(-11);
  _incoming.push_back( 223);_outgoingP.push_back( 111);
  _outgoingf.push_back(13);_outgoinga.push_back(-13);
  _coupling.push_back(0.215/GeV);_maxweight.push_back(0.0160905);
  _coupling.push_back(0.215/GeV);_maxweight.push_back(0.00108611);
  _includeVMD.push_back(2);_VMDid.push_back(113);
  _VMDmass.push_back(0.7771*GeV);_VMDwidth.push_back(0.1492*GeV);
  _includeVMD.push_back(2);_VMDid.push_back(113);
  _VMDmass.push_back(0.7771*GeV);_VMDwidth.push_back(0.1492*GeV);
  // phi -> eta e+e-
  _incoming.push_back( 333);;_outgoingP.push_back( 221);
  _outgoingf.push_back(11);_outgoinga.push_back(-11);
  _coupling.push_back(0.202/GeV);_maxweight.push_back(0.0112692);
  _includeVMD.push_back(2);_VMDid.push_back(113);
  _VMDmass.push_back(0.7771*GeV);_VMDwidth.push_back(0.1492*GeV);
  // phi -> pi e+e-
  _incoming.push_back( 333);;_outgoingP.push_back( 111);
  _outgoingf.push_back(11);_outgoinga.push_back(-11);
  _coupling.push_back(0.012/GeV);_maxweight.push_back(0.000280761);
  _includeVMD.push_back(2);_VMDid.push_back(113);
  _VMDmass.push_back(0.7771*GeV);_VMDwidth.push_back(0.1492*GeV);
}

inline VectorMesonPScalarFermionsDecayer::VectorMesonPScalarFermionsDecayer(const VectorMesonPScalarFermionsDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling), _incoming(x._incoming),
    _outgoingP(x._outgoingP), _outgoingf(x._outgoingf), _outgoinga(x._outgoinga),
    _maxweight(x._maxweight), _includeVMD(x._includeVMD), _VMDid(x._VMDid),
    _VMDmass(x._VMDmass), _VMDwidth(x._VMDwidth)
{}

inline IBPtr VectorMesonPScalarFermionsDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMesonPScalarFermionsDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMesonPScalarFermionsDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMesonPScalarFermionsDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  // check the parameters arew consistent
  unsigned int isize=_coupling.size();
  if(isize!=_incoming.size()  || isize!=_outgoingP.size()|| isize!=_outgoingf.size()||
     isize!=_outgoinga.size() || isize!=_maxweight.size()|| isize!=_includeVMD.size()||
     isize!=_VMDid.size()     || isize!=_VMDmass.size()  || isize!=_VMDwidth.size())
    {cerr << "Inconsistent parameters in VectorMesonPScalarFermionsDecayer" << endl;}
  // create the integration channel for each mode 
  PDVector extpart(4);
  tPDPtr gamma=getParticleData(ParticleID::gamma);
  Ptr<Herwig::DecayPhaseSpaceChannel>::pointer newchannel;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0] = getParticleData(_incoming[ix]);
      extpart[1] = getParticleData(_outgoingP[ix]);
      extpart[2] = getParticleData(_outgoingf[ix]);
      extpart[3] = getParticleData(_outgoinga[ix]);
      newchannel=new_ptr(DecayPhaseSpaceChannel());
      newchannel->addIntermediate(extpart[0],0, 0.0,-1,1);
      newchannel->addIntermediate(gamma     ,1,-1.1, 2,3);
      newchannel->setExternal(extpart);
      newchannel->init();
      addChannel(newchannel);
    }
 // set up the integration channels
  vector<bool> dummyon(_incoming.size(),false);
  vector<double> dummyweights(_incoming.size(),0.0);
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      if(ix>0){dummyon[ix-1]=false;dummyweights[ix-1]=0.;}
      dummyon[ix]=true;dummyweights[ix]=1.;
      setMode(ix,_maxweight[ix],dummyon,dummyweights);
    }
  // set up the values for the VMD factor if needed (copy the default mass and width 
  //                                                 into the array)
  for(unsigned ix=0;ix<isize;++ix)
    {
      if(_includeVMD[ix]==1)
	{
	  _VMDmass[ix]=getParticleData(_VMDid[ix])->mass();
	  _VMDwidth[ix]=getParticleData(_VMDid[ix])->width();
	}
    }
}

inline void VectorMesonPScalarFermionsDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void VectorMesonPScalarFermionsDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  PDVector particles(4);
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      particles[0]=getParticleData(_incoming[ix]);
      particles[1]=getParticleData(_outgoingP[ix]);
      particles[2]=getParticleData(_outgoingf[ix]);
      particles[3]=getParticleData(_outgoinga[ix]);
      initializePhaseSpace(ix,particles);
    }
}

inline void VectorMesonPScalarFermionsDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMesonPScalarFermionsDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
