// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMesonPScalarFermionsDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
  using namespace ThePEG;

inline VectorMesonPScalarFermionsDecayer::VectorMesonPScalarFermionsDecayer(const VectorMesonPScalarFermionsDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling), _incoming(x._incoming),
    _outgoingP(x._outgoingP), _outgoingf(x._outgoingf), _outgoinga(x._outgoinga),
    _maxweight(x._maxweight), _weight(x._weight),
    _includeVMD(x._includeVMD), _VMDid(x._VMDid),
    _VMDmass(x._VMDmass), _VMDwidth(x._VMDwidth), _initsize(x._initsize)
{}

inline IBPtr VectorMesonPScalarFermionsDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMesonPScalarFermionsDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMesonPScalarFermionsDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMesonPScalarFermionsDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish(); 
}

inline void VectorMesonPScalarFermionsDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      if(_Initialize)
	{
	  _maxweight[ix] = 2.*mode(ix)->maxWeight();
	  _weight[ix]    = mode(ix)->channelWeight(1);
	}
    }
}

inline void VectorMesonPScalarFermionsDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMesonPScalarFermionsDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
