// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMesonVectorScalarDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline VectorMesonVectorScalarDecayer::VectorMesonVectorScalarDecayer() 
{
  // decay of the phi to the a_0 and f_0 and a photon
  _incoming.push_back(333);_outgoingV.push_back(22);_outgoingS.push_back(9000111);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(333);_outgoingV.push_back(22);_outgoingS.push_back(9010221);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  // Jpsi decayers
  _incoming.push_back(443);_outgoingV.push_back(22);_outgoingS.push_back(10331);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(443);_outgoingV.push_back(223);_outgoingS.push_back(10331);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(443);_outgoingV.push_back(333);_outgoingS.push_back(10331);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(443);_outgoingV.push_back(333);_outgoingS.push_back(9010221);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(443);_outgoingV.push_back(223);_outgoingS.push_back(9010221);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  // upsilon(2s)
  _incoming.push_back(100553);_outgoingV.push_back(22);_outgoingS.push_back(10551);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  // upsilon(3s)
  _incoming.push_back(200553);_outgoingV.push_back(22);_outgoingS.push_back(110551);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  // psi2s decays
  _incoming.push_back(100443);_outgoingV.push_back(22);_outgoingS.push_back(10441);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(100443);_outgoingV.push_back(22);_outgoingS.push_back(331);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(100443);_outgoingV.push_back(22);_outgoingS.push_back(10331);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
  _incoming.push_back(100443);_outgoingV.push_back(333);_outgoingS.push_back(9010221);
  _coupling.push_back(1./GeV);_maxweight.push_back(0.);
}

inline VectorMesonVectorScalarDecayer::VectorMesonVectorScalarDecayer(const VectorMesonVectorScalarDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling),_incoming(x._incoming),
    _outgoingV(x._outgoingV),_outgoingS(x._outgoingS),_maxweight(x._maxweight) {}

inline IBPtr VectorMesonVectorScalarDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMesonVectorScalarDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMesonVectorScalarDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMesonVectorScalarDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  // check consistence of the parameters
  unsigned int isize=_incoming.size();
  if(isize!=_outgoingV.size()||isize!=_outgoingS.size()||
     isize!=_maxweight.size()||isize!=_coupling.size())
    {cerr << "Inconsistent parameters in VectorMesonVectorScalarDecayer" << endl;}
  // set up the integration channels
  vector<double> wgt(1,1.);
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0]=getParticleData(_incoming[ix]);
      extpart[1]=getParticleData(_outgoingV[ix]);
      extpart[2]=getParticleData(_outgoingS[ix]);
      mode=new DecayPhaseSpaceMode(extpart,this);
      addMode(mode,_maxweight[ix],wgt);
    }
}

inline void VectorMesonVectorScalarDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void VectorMesonVectorScalarDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
}

inline void VectorMesonVectorScalarDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMesonVectorScalarDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
