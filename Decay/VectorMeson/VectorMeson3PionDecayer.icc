// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMeson3PionDecayer class.
//

namespace Herwig {

using namespace ThePEG;

inline VectorMeson3PionDecayer::VectorMeson3PionDecayer(const VectorMeson3PionDecayer & x)
  : VectorMesonDecayerBase(x), _incoming(x._incoming), _coupling(x._coupling),
    _directcoupling(x._directcoupling), _directphase(x._directphase), 
    _rho2coupling(x._rho2coupling), _rho2phase(x._rho2phase), 
    _rho3coupling(x._rho3coupling), _rho3phase(x._rho3phase),
    _maxwgt(x._maxwgt), _rho1wgt(x._rho1wgt), _rho2wgt(x._rho2wgt), _rho3wgt(x._rho3wgt),
    _rho1mass(x._rho1mass), _rho2mass(x._rho2mass), _rho3mass(x._rho3mass),
    _rho1width(x._rho1width), _rho2width(x._rho2width), _rho3width(x._rho3width),
    _defaultmass(x._defaultmass), _rho0const(x._rho0const), _rhocconst(x._rhocconst),
    _rhomass(x._rhomass), _rhomass2(x._rhomass2), _ccoupling(x._ccoupling),
    _mpic(x._mpic), _mpi0(x._mpi0), _initsize(x._initsize) {}

inline IBPtr VectorMeson3PionDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMeson3PionDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMeson3PionDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMeson3PionDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void VectorMeson3PionDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  if(_Initialize)
    {
      double temp;
      unsigned int iy;
      for(unsigned int ix=0;ix<_incoming.size();++ix)
	{
	  _maxwgt[ix]== 2.*mode(ix)->maxWeight();
	  for(iy=0;iy<3;++iy)
	    {
	      if(mode(ix)->numberChannels()>3*iy+1)
		{
		  temp=mode(ix)->channelWeight(3*iy)+mode(ix)->channelWeight(3*iy+1)+
		    mode(ix)->channelWeight(3*iy+2);
		  temp/=3.;
		  if(iy==0){_rho1wgt[ix]=temp;}
		  else if(iy==1){_rho2wgt[ix]=temp;}
		  else if(iy==2){_rho3wgt[ix]=temp;}
		}
	    }
	}
    }
}

inline void VectorMeson3PionDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMeson3PionDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
