// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMesonVectorVectorDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline VectorMesonVectorVectorDecayer::VectorMesonVectorVectorDecayer() 
{
  // decay of the psi(4040) to D* D*
  _incoming.push_back(9000443);_outgoing1.push_back(423);_outgoing2.push_back(-423);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  _incoming.push_back(9000443);_outgoing1.push_back(413);_outgoing2.push_back(-413);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  // decay of rho'' to rho rho
  _incoming.push_back(30213);_outgoing1.push_back(213);_outgoing2.push_back(113);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  _incoming.push_back(-30213);_outgoing1.push_back(-213);_outgoing2.push_back(113);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  _incoming.push_back(30113);_outgoing1.push_back(-213);_outgoing2.push_back(213);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  // decay of rho' to rho rho
  _incoming.push_back( 100213);_outgoing1.push_back(213);_outgoing2.push_back(113);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  _incoming.push_back(-100213);_outgoing1.push_back(-213);_outgoing2.push_back(113);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  _incoming.push_back( 100113);_outgoing1.push_back(-213);_outgoing2.push_back(213);
  _coupling.push_back(1.);_maxweight.push_back(1.);
  
}

inline VectorMesonVectorVectorDecayer::VectorMesonVectorVectorDecayer(const VectorMesonVectorVectorDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling), _incoming(x._incoming), 
    _outgoing1(x._outgoing1), _outgoing2(x._outgoing2), _maxweight(x._maxweight) 
 {}

inline IBPtr VectorMesonVectorVectorDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMesonVectorVectorDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMesonVectorVectorDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMesonVectorVectorDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  unsigned int isize=_incoming.size();
  if(isize!=_outgoing1.size()||isize!=_outgoing2.size()||
     isize!=_maxweight.size()||isize!=_coupling.size())
    {throw InitException() << "Inconsistent parameters in " 
			   << "VectorMesonVectorVectorDecayer" << Exception::runerror;}
  // set up the integration channels
  vector<double> wgt(1,1.);
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0]=getParticleData(_incoming[ix]);
      extpart[1]=getParticleData(_outgoing1[ix]);
      extpart[2]=getParticleData(_outgoing2[ix]);
      mode = new DecayPhaseSpaceMode(extpart,this);
      addMode(mode,_maxweight[ix],wgt);
    }
}

inline void VectorMesonVectorVectorDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void VectorMesonVectorVectorDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
}

inline void VectorMesonVectorVectorDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMesonVectorVectorDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
