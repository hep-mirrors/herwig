// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the a1SimpleDecayer class.
//

namespace Herwig {

inline IBPtr a1SimpleDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr a1SimpleDecayer::fullclone() const {
  return new_ptr(*this);
}

inline Complex a1SimpleDecayer::rhoBreitWigner(Energy2 q2,unsigned int ires) const {
  Energy q(sqrt(q2));
  // get the mass and width of the requested resonance
  Energy mass  = _rhomass[ires];
  Energy width = _rhowidth[ires];
  Energy pcm0(Kinematics::pstarTwoBodyDecay(mass,_mpi,_mpi));
  Energy pcm = 2.*_mpi<q ? Kinematics::pstarTwoBodyDecay(q,_mpi,_mpi) : 0.*MeV;
  Energy gamrun(width*mass*Math::Pow<3>(pcm/pcm0)/q);
  return -sqr(mass)/complex<Energy2>(q2-mass*mass,mass*gamrun);
}

// functions to return the Breit-Wigners
inline Complex a1SimpleDecayer::rhoFormFactor(Energy2 q2,int ires) const {
  Complex output(0.),norm(0.);
  for(unsigned int ix=0,N=min(3,int(_rhowgts.size()));ix<N;++ix) norm+=_rhowgts[ix];
  if(ires<0) {
    for(unsigned int ix=0,N=min(3,int(_rhowgts.size()));ix<N;++ix) {
      output+=_rhowgts[ix]*rhoBreitWigner(q2,ix);
    }
  }
  else {
    unsigned int temp(ires);
    if(temp<_rhowgts.size()&&temp<3)
      output=_rhowgts[temp]*rhoBreitWigner(q2,temp);
    else
      output=0.;
  }
  return output/norm;
}
}
