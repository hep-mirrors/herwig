// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the VectorMesonVectorPScalarDecayer class.
//
//  Author: Peter Richardson
//

namespace Herwig {
  
using namespace ThePEG;

inline VectorMesonVectorPScalarDecayer::VectorMesonVectorPScalarDecayer() 
{
  // rho -> gamma pi modes
  _incoming.push_back( 113);_outgoingV.push_back( 22);_outgoingP.push_back( 111);
  _incoming.push_back( 213);_outgoingV.push_back( 22);_outgoingP.push_back( 211);
  _incoming.push_back(-213);_outgoingV.push_back( 22);_outgoingP.push_back(-211);
  _coupling.push_back(0.221/GeV);_maxweight.push_back(0.);
  _coupling.push_back(0.291/GeV);_maxweight.push_back(0.);
  _coupling.push_back(0.291/GeV);_maxweight.push_back(0.);
  // rho  -> gamma eta mode
  _incoming.push_back( 113);_outgoingV.push_back( 22);_outgoingP.push_back( 221);
  _coupling.push_back(0.552/GeV);_maxweight.push_back(0.);
  // omega -> gamma pi 
  _incoming.push_back( 223);_outgoingV.push_back( 22);_outgoingP.push_back( 111);
  _coupling.push_back(0.711/GeV);_maxweight.push_back(0.);
  // omega -> gamma eta
  _incoming.push_back( 223);_outgoingV.push_back( 22);_outgoingP.push_back( 221);
  _coupling.push_back(0.161/GeV);_maxweight.push_back(0.);
  // phi -> gamma pi 
  _incoming.push_back( 333);_outgoingV.push_back( 22);_outgoingP.push_back( 111);
  _coupling.push_back(0.040/GeV);_maxweight.push_back(0.);
  // phi -> gamma eta
  _incoming.push_back( 333);_outgoingV.push_back( 22);_outgoingP.push_back( 221);
  _coupling.push_back(0.661/GeV);_maxweight.push_back(0.);
  // phi -> omega pi
  _incoming.push_back( 333);_outgoingV.push_back(223);_outgoingP.push_back( 111);
  _coupling.push_back(0.060/GeV);_maxweight.push_back(0.);
  // K* -> gamma K 
  _incoming.push_back( 313);_outgoingV.push_back( 22);_outgoingP.push_back( 311);
  _incoming.push_back(-313);_outgoingV.push_back( 22);_outgoingP.push_back(-311);
  _incoming.push_back( 323);_outgoingV.push_back( 22);_outgoingP.push_back( 321);
  _incoming.push_back(-323);_outgoingV.push_back( 22);_outgoingP.push_back(-321);
  _coupling.push_back(0.384/GeV);_maxweight.push_back(0.);
  _coupling.push_back(0.384/GeV);_maxweight.push_back(0.);
  _coupling.push_back(0.800/GeV);_maxweight.push_back(0.);
  _coupling.push_back(0.800/GeV);_maxweight.push_back(0.);
}

inline VectorMesonVectorPScalarDecayer::VectorMesonVectorPScalarDecayer(const VectorMesonVectorPScalarDecayer & x)
  : VectorMesonDecayerBase(x), _coupling(x._coupling), _incoming(x._incoming), 
    _outgoingV(x._outgoingV), _outgoingP(x._outgoingP), _maxweight(x._maxweight) 
{}

inline IBPtr VectorMesonVectorPScalarDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr VectorMesonVectorPScalarDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void VectorMesonVectorPScalarDecayer::doupdate() throw(UpdateException) {
  VectorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void VectorMesonVectorPScalarDecayer::doinit() throw(InitException) {
  VectorMesonDecayerBase::doinit();
  // check consistency of the parameters
  unsigned int isize=_incoming.size();
  if(isize!=_outgoingV.size()||isize!=_outgoingP.size()||
     isize!=_maxweight.size()||isize!=_coupling.size())
    {cerr << "Inconsistent parameters in VectorMesonVectorPScalarDecayer" << endl;}
  // set up the integration channels
  vector<bool> dummyon;
  vector<double> dummyweights;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {setMode(ix,_maxweight[ix],dummyon,dummyweights);}
}

inline void VectorMesonVectorPScalarDecayer::dofinish() {
  VectorMesonDecayerBase::dofinish();
}

inline void VectorMesonVectorPScalarDecayer::doinitrun() {
  VectorMesonDecayerBase::doinitrun();
  PDVector particles(3);
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      particles[0]=getParticleData(_incoming[ix]);
      particles[1]=getParticleData(_outgoingV[ix]);
      particles[2]=getParticleData(_outgoingP[ix]);
      initializePhaseSpace(ix,particles);
    }
}

inline void VectorMesonVectorPScalarDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VectorMesonDecayerBase::rebind(trans);
}

inline IVector VectorMesonVectorPScalarDecayer::getReferences() {
  IVector ret = VectorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
