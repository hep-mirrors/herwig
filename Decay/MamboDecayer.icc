// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MamboDecayer class.
//

namespace Herwig {

inline MamboDecayer::MamboDecayer() : _maxweight(10.) {}
  
inline IBPtr MamboDecayer::clone() const {
  return new_ptr(*this);
}
  
inline IBPtr MamboDecayer::fullclone() const {
  return new_ptr(*this);
}
    
inline long double MamboDecayer::BessK0(const long double & x) const {
  long double y,ans;
  if(x <= 2.0) {
      y = x*x/4.0;
      ans = (-log(x/2.0)*BessI0(x))-0.57721566+y*(0.42278420+y*(0.23069756+y*(0.03488590+y*(0.00262698+y*(0.00010750+y*0.00000740)))));
  }
  else {
      y = 2.0/x;
      ans = (1.25331414+y*(-0.07832358+y*(+0.02189568+y*(-0.01062446+y*(+0.00587872+y*(-0.00251540+y*0.00053208))))))*(exp(-x)/sqrt(x));
  }
  return ans;
}
  
inline long double MamboDecayer::BessI0(const long double & x) const {
  long double y,ans;
  long double abx = abs(x);
  if(abx < 3.75) {
    y = (x/3.75)*(x/3.75);
    ans = 1.+y*(3.5156229+y*(3.0899424+y*(1.2067492+y*(0.2659732+y*(0.0360768+y*0.0045813)))));
  }
  else {
    y = (3.75/abx);
    ans = (exp(abx)/sqrt(abx))*(0.39894228+y*(0.01328592+y*(0.00225319+y*(-0.00157565+y*(0.00916281+y*(-0.02057706+y*(0.02635537+y*(-0.01647633+y*0.00392377))))))));
  }
  return ans;
}

inline long double MamboDecayer::BessK1(const long double & x) const {
  long double y,ans;
  if(x <= 2.0) {
    y = x*x/4.;
    ans = (log(x/2.)*BessI1(x))+(1./x)*(1.+y*(0.15443144+y*(-0.67278579+y*(-0.18156897+y*(-0.01919402+y*(-0.00110404-(y*0.00004686)))))));
  }
  else {
    y = 2./x;
    ans = (exp(-x)/sqrt(x))*(1.25331414+y*(0.23498619+y*(-0.03655620+y*(0.01504268+y*(-0.00780353+y*(0.00325614+y*(-0.00068245)))))));
  }
  return ans;
}
  
inline long double MamboDecayer::BessI1(const long double & x) const {
  long double y,ans;
  long double abx = abs(x);
    if(abx < 3.75) {
      y = (x/3.75)*(x/3.75);
      ans = abx*(0.5+y*(0.87890594+y*(0.51498869+y*(0.15084934+y*(0.02658733+y*(0.00301532+y*0.00032411))))));
    }
    else {
      y = 3.75/x;
      ans = (0.39894228+y*(-0.03988024+y*(-0.00362018+y*(0.00163801+y*(-0.01031555+y*(0.02282967+y*(-0.02895312+y*(0.01787654-y*0.00420059))))))))*(exp(abx)/sqrt(abx));
    }
    return ans;
}
  
inline long double MamboDecayer::BessKPrime(const long double & x) const {
  long double y = BessK0(x)/BessK1(x);
  return y*y + (y/x) - 1;
}
  
}
