// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the TensorMesonVectorVectorDecayer class.
//

namespace Herwig {
using namespace ThePEG;

inline TensorMesonVectorVectorDecayer::TensorMesonVectorVectorDecayer() 
{
  // a_2 -> gamma gamma
  _incoming.push_back(115);_outgoing1.push_back( 22);_outgoing2.push_back(22);
  _coupling.push_back(0.00743/GeV);_maxweight.push_back(0.00100581);
  // f_2 -> gamma gamma
  _incoming.push_back(225);_outgoing1.push_back( 22);_outgoing2.push_back(22);
  _coupling.push_back(0.0126/GeV);_maxweight.push_back(0.00261856);
  // f'_2 -> gamma gamma
  _incoming.push_back(335);_outgoing1.push_back( 22);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  // chi_b(2P) decays
  _incoming.push_back(100555);_outgoing1.push_back(553);_outgoing2.push_back(223);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(100555);_outgoing1.push_back(553);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(100555);_outgoing1.push_back(100553);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(100555);_outgoing1.push_back(333);_outgoing2.push_back(333);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  // chi_c decays
  _incoming.push_back(445);_outgoing1.push_back(443);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(445);_outgoing1.push_back(323);_outgoing2.push_back(-323);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(445);_outgoing1.push_back(313);_outgoing2.push_back(-313);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(445);_outgoing1.push_back(333);_outgoing2.push_back(333);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  _incoming.push_back(445);_outgoing1.push_back(22);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
  // chi_b(1P) decays
  _incoming.push_back(555);_outgoing1.push_back(553);_outgoing2.push_back(22);
  _coupling.push_back(0.00182/GeV);_maxweight.push_back(9.34851e-05);
}

inline TensorMesonVectorVectorDecayer::TensorMesonVectorVectorDecayer(const TensorMesonVectorVectorDecayer & x)
  : TensorMesonDecayerBase(x), _incoming(x._incoming), _outgoing1(x._outgoing1),
    _outgoing2(x._outgoing2), _coupling(x._coupling), _maxweight(x._maxweight) {}

inline IBPtr TensorMesonVectorVectorDecayer::clone() const {
  return new_ptr(*this);
}

inline IBPtr TensorMesonVectorVectorDecayer::fullclone() const {
  return new_ptr(*this);
}

inline void TensorMesonVectorVectorDecayer::doupdate() throw(UpdateException) {
  TensorMesonDecayerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void TensorMesonVectorVectorDecayer::doinit() throw(InitException) {
  TensorMesonDecayerBase::doinit();
  // check consistence of the parameters
  unsigned int isize=_incoming.size();
  if(isize!=_outgoing1.size()||isize!=_outgoing2.size()||
     isize!=_maxweight.size()||isize!=_coupling.size())
    {throw InitException() << "Inconsistent parameters TensorMesonVectorVectorDecayer" 
			   << Exception::abortnow;}
  // set up the integration channels
  vector<double> wgt;
  PDVector extpart(3);
  DecayPhaseSpaceModePtr mode;
  for(unsigned int ix=0;ix<_incoming.size();++ix)
    {
      extpart[0]=getParticleData(_incoming[ix]);
      extpart[1]=getParticleData(_outgoing1[ix]);
      extpart[2]=getParticleData(_outgoing2[ix]);
      mode = new DecayPhaseSpaceMode(extpart,this);
      addMode(mode,_maxweight[ix],wgt);
    }
}

inline void TensorMesonVectorVectorDecayer::dofinish() {
  TensorMesonDecayerBase::dofinish();
}

inline void TensorMesonVectorVectorDecayer::doinitrun() {
  TensorMesonDecayerBase::doinitrun();
}

inline void TensorMesonVectorVectorDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  TensorMesonDecayerBase::rebind(trans);
}

inline IVector TensorMesonVectorVectorDecayer::getReferences() {
  IVector ret = TensorMesonDecayerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
