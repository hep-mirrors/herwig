// -*- C++ -*-
//
// MPIHandler.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the MPIHandler class.
//
namespace Herwig {

inline tEHPtr MPIHandler::eventHandler() const {
  return theHandler;
}

inline tCutsPtr MPIHandler::cuts() const {
  return theCuts;
}

inline const MPIHandler::SubHandlerList &
MPIHandler::subProcesses() const {
  return theSubProcesses;
}

inline MPIHandler::SubHandlerList &
MPIHandler::subProcesses() {
  return theSubProcesses;
}

inline int MPIHandler::Algorithm() const {
  return theAlgorithm;
}

inline long MPIHandler::maxLoop() const {
  return eventHandler()->maxLoop();
}

inline tSamplerPtr MPIHandler::sampler() {
  return theSampler;
}

inline tcSamplerPtr MPIHandler::sampler() const {
  return theSampler;
}

inline const cPDPair & MPIHandler::incoming() const {
  return eventHandler()->incoming();
}

inline const LuminosityFunction & MPIHandler::lumiFn() const {
  // Did that in that strange way, because lumiFn is protected
  return *eventHandler()->lumiFnPtr();
}

inline int MPIHandler::lumiDim() const {
  return lumiFn().nDim(incoming());
}

inline int MPIHandler::maxDim(int bin) const {
  return theMaxDims[bin];
}

inline int MPIHandler::nDim(int bin) const {
  return lumiDim() + maxDim(bin);
}

inline int MPIHandler::statLevel() const {
  return eventHandler()->statLevel();
}

inline const MPIHandler::XVector &
MPIHandler::xCombs() const {
  return theXCombs;
}

inline MPIHandler::XVector & MPIHandler::xCombs() {
  return theXCombs;
}

inline const MPIHandler::XSVector &
MPIHandler::xSecs() const {
  return theXSecs;
}

inline MPIHandler::XSVector & MPIHandler::xSecs() {
  return theXSecs;
}

inline int MPIHandler::binStrategy() const {
  return theBinStrategy;
}

inline unsigned int MPIHandler::multiplicity() const {
  return theMultiplicities.select(UseRandom::rnd());
}

inline tStdXCombPtr MPIHandler::generate() {
  double wgt = sampler()->generate();
  return select(sampler()->lastBin(), wgt);
}

inline IBPtr MPIHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr MPIHandler::fullclone() const {
  return new_ptr(*this);
}
  /*Functions for the integrand struct*/
inline Eikonalization::Eikonalization(tMPIHPtr handler, CrossSection xsec, int option)
    : theHandler(handler), theUneikXSec(xsec), theoption(option) {}

}
