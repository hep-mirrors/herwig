#ifndef HERWIG_UA5_H_
#define HERWIG_UA5_H_

#include <ThePEG/Handlers/HadronizationHandler.h>
#include "Herwig++/Hadronization/ClusterFissioner.h"
#include "Herwig++/Hadronization/ClusterDecayer.h"
#include "Herwig++/Hadronization/PartonSplitter.h"
#include "Herwig++/Utilities/GlobalParameters.h"
#include "Herwig++/Decay/HwDecayHandler.h"
#include <ThePEG/Handlers/EventHandler.h>

namespace Herwig {

using namespace ThePEG;

/** \ingroup UnderlyingEvent
 *
 *  This is the class definition for the UA5Handler. This 
 *  class is designed to generate an underlying event     
 *  based on the UA5 model. This is intended as a basic   
 *  underlying event model which will be superceded by a  
 *  new model in Herwig++.                                
 *                                                        
 *  This class interfaces with the Hadron decays and with 
 *  the cluster hadronization. To that end there is an    
 *  interface set up with the ClusterFissioner class and  
 *  with the ClusterDecayer class. The simple steps can   
 *  accessed through the following interfaces:            
 *                                                        
 *  pair<PPtr,PPtr>                                       
 *       ClusterDecayer::decayIntoTwoHadrons(tClusterPtr&)
 *  pair<pair<PPtr,PPtr>,pair<PPtr,PPtr> >                
 *       ClusterFissioner::cut(tClusterPtr&)              
 *  pair<PPtr,PPtr>                                       
 *       ClusterFissioner::produceCluster(...)            
 *                                                        
 *  The first method is used to split a cluster into two  
 *  hadrons. The returned value are the pointers to the   
 *  two new hadrons. The second method is used to split a 
 *  cluster C->C1+C2 or C->C1+H2 or C->H1+C2 or C->H1+H2  
 *  but the results depend on the mass of the input and   
 *  the mass generated by the distributions. If the given 
 *  distributions aren't sufficient, the third method can 
 *  be used to subvert the process. This will generate one
 *  cluster based on the input values. The second method  
 *  returns two pairs of particles. In each pair the first
 *  particle is one of the decay products, the second is  
 *  the particle drawn from the vacuum in order to create 
 *  the new particle. The produceCluster method returns a 
 *  similar things, the first is the new cluster and the  
 *  second is the flavour drawn from the vacuum.          
 */

class UA5Handler : public HadronizationHandler {

public:

  /** @name Standard constructors and destructors. */
  //@{
  /**
   * The default constructor.
   */
   UA5Handler();

  /**
   * The copy constructor.
   */
   UA5Handler(const UA5Handler &);

  /**
   * The destructor.
   */
   virtual ~UA5Handler();
   //@}

  /**
   * The standard Init function used to initialize the interfaces.
   * Called exactly once for each class by the class description system
   * before the main function starts or
   * when this class is dynamically loaded.
   */
  static void Init();

public:

  /** @name Functions used by the persistent I/O system. */
  //@{
  /**
   * Function used to write out object persistently.
   * @param os the persistent output stream written to.
   */
  void persistentOutput(PersistentOStream & os) const;

  /**
   * Function used to read in object persistently.
   * @param is the persistent input stream read from.
   * @param version the version number of the object when written.
   */
  void persistentInput(PersistentIStream & is, int version);
  //@}

public:

  /**
   * This is the routine that starts the algorithm.
   */
  virtual void handle(EventHandler &ch, const tPVector &tagged,
		      const Hint &hint) 
    throw(Veto,Stop,Exception);

protected:

  /** @name Clone Methods. */
  //@{
  /**
   * Make a simple clone of this object.
   * @return a pointer to the new object.
   */
  inline virtual IBPtr clone() const;

  /** Make a clone of this object, possibly modifying the cloned object
   * to make it sane.
   * @return a pointer to the new object.
   */
  inline virtual IBPtr fullclone() const;
  //@}

private:

  /**
   * Perform the decay of an unstable hadron.
   * @param parent the decaying particle
   * @param totalcharge The totalcharge of the decay proiducts
   * @param numbercharge The number of stabel charged decay products
   */
  void performDecay(PPtr parent,int & totalcharge,int & numbercharge);

  /**
   *  Decay a cluster
   * @param cluster The cluster to decay
   */
  void decayCluster(ClusterPtr cluster);

  /**
   *  Recursively add particle and decay products to the step
   * @param particle The particle
   * @param step The step
   * @param all Insert this particle as well as children
   */
  void insertParticle(PPtr particle,StepPtr step,bool all);

   /**
    * This generates the distribution of the negative binomial given the mean, the N and ek.
    * @param N
    * @param mean
    * @param ek
    * @return a value distributed according the negative binomial distribution
    */
   inline double negativeBinomial(int N, double mean, double ek);

   /**
    * The value of the mean multiplicity for a given energy E.
    * This is N1*pow(E,N2)+N3 wher N1, N2 and N3 are parameters.
    * @param E the energy to calculate the mean multiplicity for
    * @return the mean multiplicity
    */
   inline double meanMultiplicity(Energy E);

   /**
    * Generates a multiplicity for the energy E according to the negitive
    * binomial distribution.
    * @param E The energy to generate for
    * @return the randomly generated multiplicity for the energy given
    */
   unsigned int multiplicity(Energy E);

   /**
    * Gaussian distribution
    * @param mean the mean of the distribution
    * @param stdev the standard deviation of the distribution
    * @return the gaussian distribution
    */
   inline double gaussDistribution(double mean, double stdev);

   /**
    * This counts the number of charges and the total charge for the particles given.
    */
   void countCharges(tPVector &particles, int &numCharges, int &modCharge, StepPtr &newStep);
   /**
    * This returns the rotation matrix needed to rotate p into the z axis
    */
   LorentzRotation rotate(LorentzMomentum &p);

   /**
    * This generates the momentum of the produced particles according to the cylindrical phase space algorithm given
    * in Computer Physics Communications 9 (1975) 297-304 by S. Jadach.
    * @param clusters The list of clusters produced
    * @param CME The center of mass energy
    * @param cm The center of mass momentum (of the underlying event)
    */
   void generateMomentum(ClusterVector &clusters, double CME, Lorentz5Momentum cm) throw(Veto);

   /**
    * The implementation of the cylindrical phase space.
    * @param clusters The list of clusters to generate the momentum for
    * @param CME The center of mass energy
    */
   void generateCylindricalPS(ClusterVector &clusters, double CME);

   /**
    * This returns a random number with a flat distribution
    * [-A,A] plus gaussian tail with stdev B 
    * TODO: Should move this to Utilities
    * @param A The width of the flat part
    * @param B The standard deviation of the gaussian tail
    * @return the randomly generated value
    */
   inline double randUng(double A, double B);

   /**
    * Generates a random azimuthal angle and puts x onto px and py 
    * TODO: Should move this to Utilities
    * @param x the magnitude of the vector
    * @param px the x component after random rotation
    * @param py the y component after random rotation
    */
   inline void randAzm(double x, double &px, double &py);

   /**
    * This returns random number from dN/d(x**2)=exp(-B*TM) distribution, where
    * TM = SQRT(X**2+AM0**2).  Uses Newton's method to solve F-R=0
    * TODO: Should move to Utilities
    * @param av the average of the distributions
    * @return the value distributed from dN/d(x^2) = exp(-b*x) with mean av
    */
   inline double randExt(double AM0, double B);
   
   /**
    * transforms B (given in rest from of A). Returns vector in lab frame
    * @param A The vector in the whose rest B is in 
    * @param B The vector we want to boost into the lab frame
    * @return the new vector
    */
   Lorentz5Momentum transformToLab(Lorentz5Momentum &A, Lorentz5Momentum &B);

   void addFission(PPair &products, StepPtr &newStep, ClusterPtr &cluster, 
                   pair<tPPtr,tPPtr> &had, int &newHads, long id1, long id2);

   static ClassDescription<UA5Handler> initUA5Handler;

   /**
    * This is never defined and since it can never be called it isn't 
    * needed. The prototype is defined so the compiler doesn't use the 
    * default = operator.
    */
   UA5Handler& operator=(const UA5Handler &);

   GlobParamPtr        globalParams;
   ClusterFissionerPtr clusterFissioner;
   ClusterDecayerPtr   clusterDecayer;
   PartonSplitterPtr   split;
   HwDecayHandlerPtr   decayer;

   /**
    * The parameters to the mean multiplicity distribution at mass 
    * s^(1/2) given by N1 * s^N2 + N3.
    */
   double  N1, N2, N3;  

   /**
    * These are used to specify the k of the inverse binomial 
    * distribution given by
    *   P(n) = G(n+k)/(n! G(k)) (n_/k)^n/(1+n_/k)^(n+k)
    * where n_ is the mean of the distribution and G(x) is the 
    * Gamma function.
    */
   double  K1, K2; 

   /**
    * These are parameters used in the mass distribution of the 
    * clusters given as  (M-m1-m2-_M1) exp(-_M2 * M)  where M is 
    * the decaying cluster mass and m1, m2 are the consituent masses.
    */
   double M1, M2;  

   /**
    * This is used to generate pt of a soft cluster. These parameters 
    * control the slope of the distribution of (d,u) clusters, 
    * (s,c) clusters and diquark clusters respectively. 
    * The distribution is given as
    *         P(pt) ~ pt*exp(-b (pt^2+M^2)^(1/2)) 
    * where b is the given by the relevant parameter.
    */
   double P1, P2, P3;  

   /**
    * This is the probability of having a soft underlying event.
    */
   double probSoft;

   /**
    * This is a parameter used to enhance the CM energy used to 
    * generate the multiplicity distribution.
    */
   double enhanceCM; 

};

}

namespace ThePEG {

/** This template specialization informs ThePEG about the
 *  base classes of UA5Handler. */
template<>
struct BaseClassTrait<Herwig::UA5Handler,1> { 
  /** Typedef of the first base class of UA5Handler. */
  typedef HadronizationHandler NthBase;
};

/** This template specialization informs ThePEG about the name of
 *  the UA5Handler class and the shared object where it is defined. */
template<>
struct ClassTraits<Herwig::UA5Handler> :
  public ClassTraitsBase<Herwig::UA5Handler> {
  /** Return a platform-independent class name */
    static string className() { return "Herwig++::UA5Handler"; }
  /** Return the name of the shared library be loaded to get
   *  access to the WeakPartonicDecayer class and every other class it uses
   *  (except the base class). */
    static string library() { return "HwUA5.so"; }
};

}

#include "UA5.icc"

#endif
