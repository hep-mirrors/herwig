#ifndef HERWIG_UA5_H_
#define HERWIG_UA5_H_

#include <ThePEG/Handlers/MultipleInteractionHandler.h>
#include "Herwig++/Hadronization/ClusterFissioner.h"
#include "Herwig++/Hadronization/ClusterDecayer.h"
#include "Herwig++/Hadronization/PartonSplitter.h"
#include "Herwig++/Utilities/GlobalParameters.h"
#include <ThePEG/Handlers/EventHandler.h>
 

namespace Herwig {

using namespace ThePEG;

/** \ingroup UnderlyingEvent
 *
 *  This is the class definition for the UA5Handler. This 
 *  class is designed to generate an underlying event     
 *  based on the UA5 model. This is intended as a basic   
 *  underlying event model which will be superceded by a  
 *  new model in Herwig++.                                
 *                                                        
 *  This class interfaces with the Hadron decays and with 
 *  the cluster hadronization. To that end there is an    
 *  interface set up with the ClusterFissioner class and  
 *  with the ClusterDecayer class. The simple steps can   
 *  accessed through the following interfaces:            
 *                                                        
 *  pair<PPtr,PPtr>                                       
 *       ClusterDecayer::decayIntoTwoHadrons(tClusterPtr&)
 *  pair<pair<PPtr,PPtr>,pair<PPtr,PPtr> >                
 *       ClusterFissioner::cut(tClusterPtr&)              
 *  pair<PPtr,PPtr>                                       
 *       ClusterFissioner::produceCluster(...)            
 *                                                        
 *  The first method is used to split a cluster into two  
 *  hadrons. The returned value are the pointers to the   
 *  two new hadrons. The second method is used to split a 
 *  cluster C->C1+C2 or C->C1+H2 or C->H1+C2 or C->H1+H2  
 *  but the results depend on the mass of the input and   
 *  the mass generated by the distributions. If the given 
 *  distributions aren't sufficient, the third method can 
 *  be used to subvert the process. This will generate one
 *  cluster based on the input values. The second method  
 *  returns two pairs of particles. In each pair the first
 *  particle is one of the decay products, the second is  
 *  the particle drawn from the vacuum in order to create 
 *  the new particle. The produceCluster method returns a 
 *  similar things, the first is the new cluster and the  
 *  second is the flavour drawn from the vacuum.          
 */

class UA5Handler : public MultipleInteractionHandler {

public:
   UA5Handler();
   UA5Handler(const UA5Handler &);
   virtual ~UA5Handler();
   
   /**
    * Input/Output methods for working with the repository. 
    */
   void persistentOutput(PersistentOStream &) const;
   void persistentInput(PersistentIStream &, int);

   /**
    * This is the routine that starts the algorithm.
    */
   virtual void handle(EventHandler &ch, const tPVector &tagged,
		       const Hint &hint) 
     throw(Veto,Stop,Exception);

   static void Init();

protected:

   /**
    * Required functions for the repository/interface types.
    */
   virtual IBPtr clone() const;
   virtual IBPtr fullclone() const;

   virtual void doupdate() throw(UpdateException);
   virtual void doinit() throw(InitException);
   virtual void dofinish();

   virtual void rebind(const TranslationMap &) throw(RebindException);
   virtual IVector getReferences();

private:

   ParticleVector decayHadron(tPPtr &) const throw(Veto,Exception);

   double negativeBinomial(int N, double mean, double ek);
   double meanMultiplicity(Energy E);
   int multiplicity(Energy E);

   static ClassDescription<UA5Handler> initUA5Handler;

   /**
    * This is never defined and since it can never be called it isn't 
    * needed. The prototype is defined so the compiler doesn't use the 
    * default = operator.
    */
   UA5Handler& operator=(const UA5Handler &);

   GlobParamPtr        _globalParams;
   ClusterFissionerPtr _clusterFissioner;
   ClusterDecayerPtr   _clusterDecayer;
   PartonSplitterPtr   _split;

   /**
    * The parameters to the mean multiplicity distribution at mass 
    * s^(1/2) given by N1 * s^N2 + N3.
    */
   double  _N1, _N2, _N3;  

   /**
    * These are used to specify the k of the inverse binomial 
    * distribution given by
    *   P(n) = G(n+k)/(n! G(k)) (n_/k)^n/(1+n_/k)^(n+k)
    * where n_ is the mean of the distribution and G(x) is the 
    * Gamma function.
    */
   double  _K1, _K2; 

   /**
    * These are parameters used in the mass distribution of the 
    * clusters given as  (M-m1-m2-_M1) exp(-_M2 * M)  where M is 
    * the decaying cluster mass and m1, m2 are the consituent masses.
    */
   double _M1, _M2;  

   /**
    * This is used to generate pt of a soft cluster. These parameters 
    * control the slope of the distribution of (d,u) clusters, 
    * (s,c) clusters and diquark clusters respectively. 
    * The distribution is given as
    *         P(pt) ~ pt*exp(-b (pt^2+M^2)^(1/2)) 
    * where b is the given by the relevant parameter.
    */
   double _P1, _P2, _P3;  

   /**
    * This is the probability of having a soft underlying event.
    */
   double _probSoft;

   /**
    * This is a parameter used to enhance the CM energy used to 
    * generate the multiplicity distribution.
    */
   double _enhanceCM; 

};

}

namespace ThePEG {

template<>
struct BaseClassTrait<Herwig::UA5Handler,1> { 
  typedef MultipleInteractionHandler NthBase;
};

template<>
struct ClassTraits<Herwig::UA5Handler> :
  public ClassTraitsBase<Herwig::UA5Handler> {
    static string className() { return "/Herwig++/UA5Handler"; }
    static string library() { return "libUA5.so"; }
};

}

#endif
