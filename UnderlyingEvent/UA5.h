#ifndef HERWIG_UA5_H_
#define HERWIG_UA5_H_

#include <ThePEG/Handlers/MultipleInteractionHandler.h>
#include "Herwig++/Hadronization/ClusterFissioner.h"
#include "Herwig++/Hadronization/ClusterDecayer.h"
#include "Herwig++/Utilities/GlobalParameters.h"
#include <ThePEG/Handlers/PartialCollisionHandler.h>
 
/**********************************************************
 * This is the class definition for the UA5Handler. This  *
 * class is designed to generate an underlying event      *
 * based on the UA5 model. This is intended as a basic    *
 * underlying event model which will be superceded by a   *
 * new model in Herwig++.                                 *
 *                                                        *
 * This class interfaces with the Hadron decays and with  *
 * the cluster hadronization. To that end there is an     *
 * interface set up with the ClusterFissioner class and   *
 * with the ClusterDecayer class. The simple steps can    *
 * accessed through the following interfaces:             *
 *                                                        *
 * pair<PPtr,PPtr>                                        *
 *      ClusterDecayer::decayIntoTwoHadrons(tClusterPtr&) *
 * pair<pair<PPtr,PPtr>,pair<PPtr,PPtr> >                 *
 *      ClusterFissioner::cut(tClusterPtr&)               *
 * pair<PPtr,PPtr>                                        *
 *      ClusterFissioner::produceCluster(...)             *
 *                                                        *
 * The first method is used to split a cluster into two   *
 * hadrons. The returned value are the pointers to the    *
 * two new hadrons. The second method is used to split a  *
 * cluster C->C1+C2 or C->C1+H2 or C->H1+C2 or C->H1+H2   *
 * but the results depend on the mass of the input and    *
 * the mass generated by the distributions. If the given  *
 * distributions aren't sufficient, the third method can  *
 * be used to subvert the process. This will generate one *
 * cluster based on the input values. The second method   *
 * returns two pairs of particles. In each pair the first *
 * particle is one of the decay products, the second is   *
 * the particle drawn from the vacuum in order to create  *
 * the new particle. The produceCluster method returns a  *
 * similar things, the first is the new cluster and the   *
 * second is the flavour drawn from the vacuum.           *
 *********************************************************/

namespace Herwig {

using namespace ThePEG;

class UA5Handler : public MultipleInteractionHandler {

public:
   UA5Handler();
   UA5Handler(const UA5Handler &);
   virtual ~UA5Handler();
   
   void persistentOutput(PersistentOStream &) const;
   void persistentInput(PersistentIStream &, int);
   // Input/Output methods for working with the repository

   virtual void handle(PartialCollisionHandler &ch, const tPVector &tagged,
		       const Hint &hint) 
     throw(Veto,Stop,Exception);
   // This is the routine that starts the algorithm

   static void Init();

protected:
   virtual IBPtr clone() const;
   virtual IBPtr fullclone() const;
   // Required functions for the repository/interface types

   virtual void doupdate() throw(UpdateException);
   virtual void doinit() throw(InitException);
   virtual void dofinish();

   virtual void rebind(const TranslationMap &) throw(RebindException);
   virtual IVector getReferences();

private:
   ParticleVector decayHadron(tPPtr &) const throw(Veto,Exception);

   static ClassDescription<UA5Handler> initUA5Handler;

   UA5Handler& operator=(const UA5Handler &);
   // This is never defined and since it can never be called it isn't 
   // needed. The prototype is defined so the compiler doesn't use the 
   // default = operator.
   GlobParamPtr        _globalParams;
   ClusterFissionerPtr _clusterFissioner;
   ClusterDecayerPtr   _clusterDecayer;
};

}

namespace ThePEG {

template<>
struct BaseClassTrait<Herwig::UA5Handler,1> { 
  typedef MultipleInteractionHandler NthBase;
};

template<>
struct ClassTraits<Herwig::UA5Handler> :
  public ClassTraitsBase<Herwig::UA5Handler> {
    static string className() { return "/Herwig++/UA5Handler"; }
    static string library() { return "libUA5.so"; }
};

}

#endif
