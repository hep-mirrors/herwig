#! @PYTHON@
from __future__ import print_function
import logging, sys,subprocess,math,time

if sys.version_info[:3] < (2,4,0):
    print ("rivet scripts require Python version >= 2.4.0... exiting")
    sys.exit(1)

import os, yoda

# #############################################
if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog name")
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least the name of the files")
        sys.exit(1)

# #######################################
yodafiles=[]
for energy in [225,251,296,300,318,"318-CMS"] :
    for process in ["e+","e-","e+-CC","e--CC","e+"] :
        mergeargs=["rivet-merge"]
        for q2 in ["VeryLow","Low","Med","High"] : 
            fname = "Rivet-%s-%s-%s-%sQ2.yoda" % (args[0], energy ,process,q2)
            if(os.path.isfile(fname)) :
                mergeargs.append(fname)
        if len(mergeargs)==1 : continue
        if "e+" in process : beam="EPLUS"
        else : beam="EMINUS"
        if type(energy) == int :
            mergeargs.append("-a")
            mergeargs.append("HERA_2015_I1377206:ENERGY=%s"%energy)
            mergeargs.append("-a")
            mergeargs.append("HERA_2015_I1377206:BEAM=%s" %beam)
        fname = "Rivet-%s-%s-%s.yoda"% (args[0], energy ,process)
        mergeargs.append("-o")
        mergeargs.append(fname)
        yodafiles.append(fname)
        p = subprocess.Popen(mergeargs)
# need a sleep here otherwise merged files not ready
time.sleep(5) 
## Get histos
outhistos={}

for f in yodafiles:
    if not os.access(f, os.R_OK):
        logging.error("%s can not be read" % f)
        continue
    try:
        aos = yoda.read(f)
    except:
        logging.error("%s can not be parsed as YODA" % f)
        continue
    ## Get histos from this YODA file
    for aopath, ao in aos.items() :
        if("RAW" in aopath) : continue
        elif(aopath.find("_XSEC")>=0 or aopath.find("_EVTCOUNT")>=0) :
            continue
        elif "HERA_2015_I1377206" in aopath :
            path=aopath.split(":")
            ao.setPath(path[0]+"/"+path[2].split("/")[1])
            if "d06" in aopath or "d07" in aopath :
                if "CC" in f : outhistos[aopath] = ao
            else :
                if "CC" not in f : outhistos[aopath] = ao
        else :
            outhistos[aopath] = ao
            
# Choose output file
name = args[0]+".yoda"
# remove any scatters with nans, causes yoda to crash
remove = [] 
for key in outhistos.keys() :
    ao = outhistos[key]
    if type(ao)==yoda.core.Scatter2D :
        skip=False
        for p in ao.points() :
            if math.isnan(p.y()) : skip=True
        if(skip) : remove.append(key)
for key in remove : del outhistos[key]
# output the yoda file
yoda.writeYODA(outhistos,name)
sys.exit(0)
