#! @PYTHON@
# -*- mode: python -*-
from __future__ import print_function
import yoda,glob,optparse
import numpy as np
import subprocess,os
op = optparse.OptionParser(usage=__doc__)
op.add_option("-e"         , dest="plots_energy" , default=[], action="append")
op.add_option("-f"         , dest="plots_fixed"  , default=[], action="append")

opts, args = op.parse_args()


if(len(args)!=1) :
    print ('Must be one and only 1 name')
    quit()

name=args[0].split("-")

cmd3_weights = { 2007. : [0.5 ,4259], 1980 : [1 , 2368], 1951 : [11,5230],
                 1907.5: [17.5,5497], 1877 : [7 ,16803], 1830 : [30,8287],
                 1740. : [40  ,8728], 1640 : [40, 7299] }
wSum=0.
for key in cmd3_weights.keys() :
    wSum+= cmd3_weights[key][1]

for key in cmd3_weights.keys() :
    cmd3_weights[key][1] /= wSum 
output=""
labels={ "NonPerturbative" : "Non-Pert" ,
         "Perturbative"    : "Pert"     ,
         "Resonance"       : "Res"      }
for runType in ["NonPerturbative","Perturbative","Resonance"]:
    outhistos={}
    inhistos={}
    for fileName in glob.glob("Rivet-LowEnergy-%s-%s-*.yoda" % (name[0],runType) ):
        energy = float(fileName.split("-")[-1].strip(".yoda"))
        energyMeV = energy*1000.
        aos = yoda.read(fileName)
        for hpath,histo in aos.items():
            if("/_" in hpath or "TMP" in hpath or "RAW" in hpath) : continue
            if(len(opts.plots_fixed)>0 and hpath in opts.plots_fixed) :
                if hpath in inhistos :
                    inhistos[hpath][energy] = histo
                else :
                    inhistos[hpath] = { energy : histo}
            if(len(opts.plots_energy)>0 and hpath not in opts.plots_energy) : continue
            if(type(histo)==yoda.core.Histo1D or
               (type(histo)==yoda.core.Scatter2D and hpath=="/BESIII_2019_I1726357/d03-x01-y01") ) :
                if( "CMD3_2019_I1770428" in hpath ) :
                    val=0.
                    for key in cmd3_weights.keys() :
                        if(abs(energyMeV-val)>abs(energyMeV-key)) :
                            val=key
                    histo.scaleW(cmd3_weights[val][1])
                    if(hpath in outhistos) :
                        outhistos[hpath] += histo
                    else :
                        outhistos[hpath] = histo
                else :
                    outhistos[hpath] = histo
                continue
            # create histo if it doesn't exist
            elif(hpath not in outhistos) :
                title=""
                path=""
                if hasattr(histo, 'title'):
                    title=histo.title()
                if hasattr(histo, 'path'):
                    path=histo.path()
                if hasattr(aos[hpath],'points') :
                    outhistos[hpath] = yoda.core.Scatter2D(path,title)
                else :
                    try : 
                        outhistos[hpath] = yoda.core.BinnedEstimate1D(aos[hpath].xEdges(),path,title)
                    except :
                        print(hpath,aos[hpath])
                        quit()
            matched = False
            if hasattr(aos[hpath],"points") :
                for i in range(0,aos[hpath].numPoints()) :
                    x = aos[hpath].points()[i].x()
                    delta=1e-5
                    if("KLOE_2009_I797438"   in hpath or "KLOE_2005_I655225"   in hpath or 
                       "KLOE2_2017_I1634981" in hpath or "FENICE_1994_I377833" in hpath or
                       "FENICE_1996_I426675" in hpath):
                        x=np.sqrt(x)
                        delta=1e-3
                    if(abs(x-energy)<1e-3*delta or abs(x-energyMeV)<delta) :
                        duplicate = False
                        for j in range(0,outhistos[hpath].numPoints()) :
                            if(outhistos[hpath].points()[j].x()==aos[hpath].points()[i].x()) :
                                duplicate = True
                                break
                        if(not duplicate) :
                            outhistos[hpath].addPoint(aos[hpath].points()[i])
                        matched = True
                        break
                if(matched) : continue
                for i in range(0,aos[hpath].numPoints()) :
                    xmin = aos[hpath].points()[i].xMin()
                    xmax = aos[hpath].points()[i].xMax()
                    if("KLOE_2009_I797438"   in hpath or "KLOE_2005_I655225"   in hpath or 
                       "KLOE2_2017_I1634981" in hpath or "FENICE_1994_I377833" in hpath or
                       "FENICE_1996_I426675" in hpath) :
                        xmin=np.sqrt(xmin)
                        xmax=np.sqrt(xmax)
                    if((energy    > xmin and energy    < xmax) or
                       (energyMeV > xmin and energyMeV < xmax) ) :
                        duplicate = False
                        for j in range(0,outhistos[hpath].numPoints()) :
                            if(outhistos[hpath].points()[j].x()==aos[hpath].points()[i].x()) :
                                duplicate = True
                                break
                        if(not duplicate) :
                            outhistos[hpath].addPoint(aos[hpath].points()[i])
                        break
            else :
                for i,bin in enumerate(aos[hpath].bins()) :
                    if bin.edge(0) :
                        x = bin.edge(0)
                    else :
                        x = bin.mid(0)
                    if isinstance(x, str) :
                        x = x.split("_")[0]
                        if "-" in x and len(x)>1:
                            elim =x.split("-")
                            x=0.5*(float(elim[0])+float(elim[1]))
                        elif hpath=="/DM1_1979_I132828/d01-x01-y01" :
                            if x == '-'         : x = 985
                        elif hpath=="/CMD3_2016_I1385598/d01-x01-y06" :
                            if x=="1900 (2012)" : x = 1900
                    try :
                        x = float(x)
                    except :
                        print("Cannot convert %s to float in %s" % (x,hpath) )
                        quit()
                    delta=1e-5
                    if("KLOE_2009_I797438"   in hpath or "KLOE_2005_I655225"   in hpath or 
                       "KLOE2_2017_I1634981" in hpath or "FENICE_1994_I377833" in hpath or
                       "FENICE_1996_I426675" in hpath):
                        x=np.sqrt(x)
                        delta=1e-3
                    elif "SND_2024_I2809929" in hpath or "SND_2024_I2696331" in hpath:
                        x=2.*x
                    if(abs(x-energy)<1e-3*delta or abs(x-energyMeV)<delta) :
                        duplicate = False
                        outhistos[hpath].bin(bin.index()).setVal(bin.val())
                        for key in bin.sources() :
                            outhistos[hpath].bin(bin.index()).setErr(bin.err(key),key)
                        matched = True
                        break
                if(matched) : continue
    for key,histos in inhistos.items() :
        if(len(histos)==1) :
            for (key2,val2) in histos.items():
                outhistos[key] = val2
        else :
            for (key2,val2) in histos.items():
                outhistos[key] = yoda.BinnedEstimate1D(val2.xEdges(),key)
                break
            fact = 1./len(histos)
            for i in range(0,outhistos[key].numBins()) :
                val=0.
                errs={}
                for (key2,val2) in histos.items() :
                    val += val2.bin(i+1).val()
                    for src in  val2.bin(i+1).sources() :
                        if src not in errs : errs[src] = val2.bin(i+1).errAvg(src)**2
                        else               : errs[src] + val2.bin(i+1).errAvg(src)**2
                val *=fact
                outhistos[key].bin(i+1).setVal(val)
                for src in errs :
                    outhistos[key].bin(i+1).setErr(np.sqrt(errs[src])*fact,src)
    yoda.writeYODA(outhistos,"LowEnergy-%s-%s.yoda" % (runType,args[0]))
    output+="LowEnergy-%s-%s.yoda:%s " % (runType,args[0],labels[runType])
print(output)
