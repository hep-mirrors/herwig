#! @PYTHON@
from __future__ import print_function
import logging, sys, os, yoda, math, subprocess, time

"""%prog

Script for merging yoda files

"""
if sys.version_info[:3] < (2,4,0):
    print ("rivet scripts require Python version >= 2.4.0... exiting")
    sys.exit(1)

if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog base")
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least the name of the files")
        sys.exit(1)
# merge the prompt photon results
files=["-GammaGamma-7.yoda"]
for en in [7,8,13] :
    files.append("-%s-DiPhoton-GammaGamma.yoda"%en)
    files.append("-%s-DiPhoton-GammaJet.yoda"  %en)
    mergeargs=["rivet-merge"]
    for process in range(1,6) : 
        fname = "Rivet-%s-%s-PromptPhoton-%s.yoda" % (args[0], en ,process)
        if(os.path.isfile(fname)) :
            mergeargs.append(fname)
    if len(mergeargs)==1 : continue
    mergeargs.append("-o")
    mergeargs.append("Rivet-%s-%s-PromptPhoton.yoda"% (args[0], en))
    files.append("-%s-PromptPhoton.yoda"%  en)
    p = subprocess.Popen(mergeargs)
# need a sleep here otherwise merged files not ready
time.sleep(5)

## Get histos
outhistos={}
for f in files:
    fname='Rivet-'+args[0]+f
    if not os.access(fname, os.R_OK):
        logging.error("%s can not be read" % fname)
        continue
    try:
        aos = yoda.read(fname)
    except:
        logging.error("%s can not be parsed as yoda" % fname)
        continue
    ## Get histos from this YODA fname
    for aopath, ao in aos.items() :
        if("RAW" in aopath) :continue
        if(aopath.find("XSEC")>=0 or aopath.find("EVTCOUNT")>=0) : continue
        if(fname.find("PromptPhoton")>=0) :
            outhistos[aopath] = ao
        else : 
            if ( aopath in outhistos ) :
                aotype = type(ao)
                if aotype in (yoda.Counter, yoda.Histo1D, yoda.Histo2D, yoda.Profile1D, yoda.Profile2D):
                    outhistos[aopath] += ao
                else :
                    quit()
            else:
                outhistos[aopath] = ao
# Choose output file
name = args[0]+"-Photon.yoda"
# remove any scatters with nans, causes yoda to crash
remove = [] 
for key in outhistos.keys() :
    ao = outhistos[key]
    if type(ao)==yoda.core.Scatter2D :
        skip=False
        for p in ao.points() :
            if math.isnan(p.y()) : skip=True
        if(skip) : remove.append(key)
for key in remove : del outhistos[key]
# output histos
yoda.writeYODA(outhistos,name)
sys.exit(0)
