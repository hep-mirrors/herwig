#! /usr/bin/env python
import logging
import sys

if sys.version_info[:3] < (2,4,0):
    print "rivet scripts require Python version >= 2.4.0... exiting"
    sys.exit(1)

import os, yoda

# #############################################

def fillAbove(desthisto, sourcehistosbyq2):
    q2high=1e100
    q2low=-1e100
    for q2,h in  sorted(sourcehistosbyq2.iteritems(),reverse=True) :
        q2low=q2
        for i in range(0,h.numBins) :
            if(h.bins[i].xMin  >= q2low and 
               h.bins[i].xMin  <  q2high ) :
                desthisto.bins[i] += h.bins[i]
        q2high=q2

def merge(hpath):
    global inhistos
    global outhistos
    try:
        fillAbove(outhistos[hpath], inhistos[hpath])
    except:
        pass

def useOne(hpath, q2):
    global inhistos
    global outhistos
    try:
        outhistos[hpath] =  inhistos[hpath][float(q2)]
    except:
        pass

if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog name")
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least the name of the files")
        sys.exit(1)

# #######################################

yodafiles=["-e--LowQ2.yoda","-e+-LowQ2.yoda","-e+-HighQ2.yoda"]

## Get histos
inhistos = {}
outhistos={}
weights = {}

for f in yodafiles:
    file = args[0]+f
    if(file.find("Low")> 0) :
        q2=0
    elif(file.find("High")>0) :
        q2=50

    if not os.access(file, os.R_OK):
        logging.error("%s can not be read" % file)
        break
    try:
        aos = yoda.read(file)
    except:
        logging.error("%s can not be parsed as YODA" % file)
        break
    ## Get histos from this YODA file
    for aopath, ao in aos.iteritems() :
        if(aopath.find("4129130")>0 ) :
           if not inhistos.has_key(aopath):
               inhistos[aopath] = {}
           tmpE = inhistos[aopath]
           if not tmpE.has_key(q2):
               tmpE[q2] = ao
           else:
                raise Exception("A set with q2    = %s already exists" % ( q2   ))
        elif(aopath.find("2919893")>0 ) :
            outhistos[aopath] = ao
        elif(aopath.find("_XSEC")>=0 or aopath.find("_EVTCOUNT")>=0) :
            continue
        else :
            logging.error("Analysis %s is unknown" % aopath)
            sys.exit(1)

## Make empty output histos if needed
for hpath,hsets in inhistos.iteritems():
    if( hpath.find("4129130")>0 and (hpath.find("d33")>0 or hpath.find("d34")>0)) :
        if(type(hsets.values()[0])==yoda.core.Scatter2D) :
            outhistos[hpath] = yoda.core.Scatter2D(hsets.values()[0].path,hsets.values()[0].title)
        elif(type(hsets.values()[0])==yoda.core.Profile1D) :
            outhistos[hpath] = yoda.core.Profile1D(hsets.values()[0].path,hsets.values()[0].title)
            for i in range(0,hsets.values()[0].numBins) :
                outhistos[hpath].addBin(hsets.values()[0].bins[i].xMin,hsets.values()[0].bins[i].xMax)
        else :
            logging.error("Histogram %s is of unknown type" % hpath)
            sys.exit(1)

# H1 transverse energy
useOne("/H1_2000_S4129130/d01-x01-y01","0")
useOne("/H1_2000_S4129130/d02-x01-y01","0")
useOne("/H1_2000_S4129130/d03-x01-y01","0")
useOne("/H1_2000_S4129130/d04-x01-y01","0")
useOne("/H1_2000_S4129130/d05-x01-y01","0")
useOne("/H1_2000_S4129130/d06-x01-y01","0")
useOne("/H1_2000_S4129130/d07-x01-y01","0")
useOne("/H1_2000_S4129130/d08-x01-y01","0")
useOne("/H1_2000_S4129130/d09-x01-y01","0")
useOne("/H1_2000_S4129130/d10-x01-y01","0")
useOne("/H1_2000_S4129130/d11-x01-y01","0")
useOne("/H1_2000_S4129130/d12-x01-y01","0")
useOne("/H1_2000_S4129130/d13-x01-y01","0")
useOne("/H1_2000_S4129130/d14-x01-y01","0")
useOne("/H1_2000_S4129130/d15-x01-y01","0")
useOne("/H1_2000_S4129130/d16-x01-y01","50")
useOne("/H1_2000_S4129130/d17-x01-y01","50")
useOne("/H1_2000_S4129130/d18-x01-y01","50")
useOne("/H1_2000_S4129130/d19-x01-y01","50")
useOne("/H1_2000_S4129130/d20-x01-y01","50")
useOne("/H1_2000_S4129130/d21-x01-y01","50")
useOne("/H1_2000_S4129130/d22-x01-y01","50")
useOne("/H1_2000_S4129130/d23-x01-y01","50")
useOne("/H1_2000_S4129130/d24-x01-y01","50")
useOne("/H1_2000_S4129130/d25-x01-y01","0")
useOne("/H1_2000_S4129130/d26-x01-y01","0")
useOne("/H1_2000_S4129130/d27-x01-y01","0")
useOne("/H1_2000_S4129130/d28-x01-y01","0")
useOne("/H1_2000_S4129130/d29-x01-y01","50")
useOne("/H1_2000_S4129130/d30-x01-y01","50")
useOne("/H1_2000_S4129130/d31-x01-y01","50")
useOne("/H1_2000_S4129130/d32-x01-y01","50")

merge("/H1_2000_S4129130/d33-x01-y01")
merge("/H1_2000_S4129130/d34-x01-y01")

# Choose output file
name = args[0]+".yoda"
# output the yoda file
yoda.writeYODA(outhistos,name)
sys.exit(0)
