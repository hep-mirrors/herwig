#! /usr/bin/env python
import logging
import sys

if sys.version_info[:3] < (2,4,0):
    print "rivet scripts require Python version >= 2.4.0... exiting"
    sys.exit(1)

import os, yoda

# #############################################

def fillAbove(desthisto, sourcehistosbysqrts):
    for sqrts, h in sorted(sourcehistosbysqrts) :
        for i in range(0,h.numPoints) :
            if(h.points[i].x-0.01<sqrts2 and
               h.points[i].x+0.01>sqrts2) :
                desthisto.addPoint(h.points[i])

def merge(hpath):
    global inhistos
    global outhistos
    try:
        fillAbove(outhistos[hpath], inhistos[hpath])
    except:
        logging.error("Unknown analysis object" + hpath)
        sys.exit(1)

def useOne(hpath, sqrts):
    global inhistos
    global outhistso
    try:
        outhistos[hpath] =  inhistos[hpath][float(sqrts)]
    except:
        try:
            outhistos[hpath] =  inhistos[hpath][sqrts]
        except:
            pass

if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog name")
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least the name of the files")
        sys.exit(1)

# #######################################

yodafiles=["-9.46","-10.00","-10.52","-10.52-sym","-10.54",
           "-10.58-res","-10.58","-Upsilon",
           "-Upsilon2","-Upsilon4","-10.45","-10.47","-Tau","-Phi"]

## Get histos
inhistos = {}
outhistos={}
weights = {}
for f in yodafiles:
    file = "Rivet-%s%s.yoda" % (args[0], f)
    if(file.find("9.46")>0) :
        sqrts=9.46
    elif(file.find("10.00")>0) :
        sqrts=10.00
    elif(file.find("10.45")>0) :
        sqrts=10.45
    elif(file.find("10.47")>0) :
        sqrts=10.47
    elif(file.find("10.52")>0) :
        sqrts=10.52
    elif(file.find("10.54")>0) :
        sqrts=10.54
    elif(file.find("10.58")>0) :
        sqrts=10.58
    elif(file.find("Tau")>0) :
        sqrts=10.58
    elif(file.find("Upsilon4")>0) :
        sqrts="U4"
    elif(file.find("Upsilon2")>0) :
        sqrts="U2"
    elif(file.find("Upsilon")>0) :
        sqrts="U1"
    if not os.access(file, os.R_OK):
        if(file.find("Upsilon")>=0 or file.find("Tau")>=0) : continue
        logging.error("%s can not be read" % file)
        continue
    try:
        aos = yoda.read(file)
    except:
        logging.error("%s can not be parsed as yoda" % file)
        continue




    
           
           
        else :

## Make empty output histos if needed
for hpath,hsets in inhistos.iteritems():
    if() :
        if(type(hsets.values()[0])==yoda.core.Scatter2D) :
            outhistos[hpath] = yoda.core.Scatter2D(hsets.values()[0].path,hsets.values()[0].title)
        else :
            outhistos[hpath] = hsets.values()[0]

# Choose output file
name = args[0]+".yoda"
# output the yoda file
yoda.writeYODA(outhistos,name)
sys.exit(0)
