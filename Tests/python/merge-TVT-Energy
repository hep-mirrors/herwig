#! /usr/bin/env python
import logging
import sys

if sys.version_info[:3] < (2,4,0):
    print "rivet scripts require Python version >= 2.4.0... exiting"
    sys.exit(1)

import os, yoda

# #############################################

def fillAbove(desthisto, sourcehistosbyptmin):
    pthigh= 1e100
    ptlow =-1e100
    for pt, h in sorted(sourcehistosbyptmin.iteritems(),reverse=True):
        ptlow=pt
        for i in range(0,h.numBins) :
            if(h.bins[i].xMin  >= ptlow and 
               h.bins[i].xMin  <  pthigh ) :
                desthisto.bins[i] += h.bins[i]
        pthigh=pt

def mergeByPt(hpath, sqrts):
    global inhistos
    global outhistos
    try:
        fillAbove(outhistos[hpath], inhistos[hpath][float(sqrts)])
    except:
        pass

# #######################################

if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog name")
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least the name of the files")
        sys.exit(1)

yodafiles=["-Run-II-UE.yoda","-Run-II-Jets-0.yoda",
           "-300-UE.yoda"   ,"-300-Jets-1.yoda"  ,
           "-900-UE.yoda"   ,"-900-Jets-1.yoda"  ]

## Get histos
inhistos = {}
outhistos={}
weights = {}
for f in yodafiles:
    file=args[0]+f
    if(file.find("Run-II-UE")>0) :
        sqrts=1960
        ptmin=0.
    elif(file.find("Run-II-Jets-0")>0) :
        sqrts=1960
        ptmin=15
    elif(file.find("300-UE")>0) :
        sqrts=300
        ptmin=0.
    elif(file.find("300-Jets-1")>0) :
        sqrts=300
        ptmin=6.
    elif(file.find("900-UE")>0) :
        sqrts=900
        ptmin=0.
    elif(file.find("900-Jets-1")>0) :
        sqrts=900
        ptmin=10.
    if not os.access(file, os.R_OK):
        logging.error("%s can not be read" % file)
        break
    try:
        aos = yoda.read(file)
    except:
        logging.error("%s can not be parsed as YODA" % file)
        break
    ## Get histos from this YODA file
    for aopath, ao in aos.iteritems() :
        if(aopath.find("NOTE10874")<0) : continue
        if not inhistos.has_key(aopath):
            inhistos[aopath] = {}
        tmpE = inhistos[aopath]
        if not tmpE.has_key(sqrts):
            tmpE[sqrts] = {}
        tmpP = tmpE[sqrts]
        if not tmpP.has_key(ptmin):
            tmpP[ptmin] = ao
        else:
            raise Exception("A set with ptmin = %s already exists" % ( ptmin))

## Make empty output histos if needed
for hpath,hsets in inhistos.iteritems():
    if(type(hsets.values()[0].values()[0])==yoda.core.Scatter2D) :
        outhistos[hpath] = yoda.core.Scatter2D(hsets.values()[0].values()[0].path,
                                               hsets.values()[0].values()[0].title)
    elif(type(hsets.values()[0].values()[0])==yoda.core.Profile1D) :
        outhistos[hpath] = yoda.core.Profile1D(hsets.values()[0].values()[0].path,
                                               hsets.values()[0].values()[0].title)
        for i in range(0,hsets.values()[0].values()[0].numBins) :
            outhistos[hpath].addBin(hsets.values()[0].values()[0].bins[i].xMin,
                                    hsets.values()[0].values()[0].bins[i].xMax)
    else :
        logging.error("Histogram %s is of unknown type" % hpath)
        sys.exit(1)

## Field analysis
logging.info("Processing CDF_2012_NOTE10874")
## Angular distributions in different pT bins
mergeByPt("/CDF_2012_NOTE10874/d01-x01-y01", "300")
mergeByPt("/CDF_2012_NOTE10874/d01-x01-y02", "900")
mergeByPt("/CDF_2012_NOTE10874/d01-x01-y03","1960")
mergeByPt("/CDF_2012_NOTE10874/d02-x01-y01", "300")
mergeByPt("/CDF_2012_NOTE10874/d02-x01-y02", "900")
mergeByPt("/CDF_2012_NOTE10874/d02-x01-y03","1960")
mergeByPt("/CDF_2012_NOTE10874/d03-x01-y01", "300")
mergeByPt("/CDF_2012_NOTE10874/d03-x01-y02", "900")
mergeByPt("/CDF_2012_NOTE10874/d03-x01-y03","1960")

# Choose output file
for i in range(1,4) :
    if(i==1) : 
        name = args[0]+"-300-Energy.yoda"
    elif(i==2) :
        name = args[0]+"-900-Energy.yoda"
    elif(i==3) :
        name = args[0]+"-1960-Energy.yoda"
    temphistos={}
    for hpath, h in sorted(outhistos.iteritems()):
        if(hpath.find("y0"+str(i))>0) :
            temphistos[hpath] = h
    yoda.writeYODA(temphistos,name)

sys.exit(0)
