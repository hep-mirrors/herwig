#! @PYTHON@
from __future__ import print_function
import yoda,os,math,subprocess,optparse
from string import Template
# get the path for the rivet data
p = subprocess.Popen(["rivet-config", "--datadir"],stdout=subprocess.PIPE)
path=p.communicate()[0].strip().decode("UTF-8")
#Define the arguments
op = optparse.OptionParser(usage=__doc__)
op.add_option("--process"         , dest="processes"       , default=[], action="append")
op.add_option("--path"            , dest="path"            , default=path)
op.add_option("--non-perturbative", dest="nonPerturbative" , default=False, action="store_true")
op.add_option("--perturbative"    , dest="perturbative"    , default=False, action="store_true")
op.add_option("--dest"            , dest="dest"            , default="Rivet")
op.add_option("--list"            , dest="list"            , default=False, action="store_true")
op.add_option("--plots"           , dest="plot"           , default=False, action="store_true")
opts, args = op.parse_args()
path=opts.path
thresholds = [0.7,2.*.5,2.*1.87,2.*5.28]
# the list of analyses and processes
analyses = { 'KK'           : {}, 'PiPi'      : {}, 'PPbar'   : {}, "3Pi"      : {},
             "EtaprimePiPi" : {}, "4Pi"       : {}, "EtaPhi"  : {}, "EtaOmega" : {},
             "2K1Pi"        : {}, "2K2Pi"     : {}, "4K"      : {}, "6m"       : {},
             "EtaPiPi"      : {}, "OmegaPi"   : {}, "PiGamma" : {}, "EtaGamma" : {},
             "PhiPi"        : {}, "OmegaPiPi" : {}, "DD"      : {}, "BB"       : {},
             "5Pi"          : {}, "LL"        : {}, "Baryon"  : {} }
# pi+pi-
analyses["PiPi"]["CELLO_1992_I345437"   ] = ["d01-x01-y01"]
# proton-antiproton
# list the analysis if required and quit()
allProcesses=False
if "All" in opts.processes :
    allProcesses=True
    processes = sorted(list(analyses.keys()))
else :
    processes = sorted(list(set(opts.processes)))
if(opts.list) :
    for process in processes :
        print (" ".join(analyses[process]))
    quit()
if(opts.plot) :
    output=""
    for process in processes:
        for analysis in analyses[process] :
            if(analysis=="CELLO_1992_I345437") :
                for iy in range(1,22) :
                    output+= " -m/%s/%s" % (analysis,"d02-x01-y%02d"%iy)
            for plot in analyses[process][analysis]:
                output+= " -m/%s/%s" % (analysis,plot)
    print (output)
    quit()
# mapping of process to me to use
me = { "PiPi"         : "MEgg2PiPi"}

# get the particle masses from Herwig
particles = { "pi+" : 0., "pi0" : 0. ,"eta" : 0. ,"eta'" : 0. ,"phi" : 0. ,"omega" : 0. ,"p+" : 0. ,"K+" : 0.}
for val in particles :
    tempTxt = "get /Herwig/Particles/%s:NominalMass\nget /Herwig/Particles/%s:WidthLoCut\n" % (val,val)
    with open("temp.in",'w') as f:
        f.write(tempTxt)
    p = subprocess.Popen(["../src/Herwig", "read","temp.in"],stdout=subprocess.PIPE)
    vals = p.communicate()[0].split()
    mass = float(vals[0])-float(vals[1])
    particles[val]=mass
    os.remove("temp.in")
# minimum CMS energies for specific processes
minMass = { "PiPi"         : 2.*particles["pi+"],
            "KK"           : 2.*particles["K+"],
            "3Pi"          : 2.*particles["pi+"]+particles["pi0"],
            "4Pi"          : 2.*particles["pi+"]+2.*particles["pi0"],
            "EtaPiPi"      : particles["eta"]+2.*particles["pi+"],
            "EtaprimePiPi" : particles["eta'"]+2.*particles["pi+"],
            "EtaPhi"       : particles["phi"]+particles["eta"],
            "EtaOmega"     : particles["omega"]+particles["eta"],
            "OmegaPi"      : particles["omega"]+particles["pi0"],
            "OmegaPiPi"    : particles["omega"]+2.*particles["pi0"],
            "PhiPi"        : particles["phi"]+particles["pi0"],
            "PiGamma"      : particles["pi0"],
            "EtaGamma"     : particles["eta"],
            "PPbar"        : 2.*particles["p+"],
            "LL"           : 0.,
            "2K1Pi"        : 2.*particles["K+"]+particles["pi0"] }
# energies we need
energies={}
def nearestEnergy(en) :
    Emin=0
    delta=1e30
    anals=[]
    for val in energies :
        if(abs(val-en)<delta) :
            delta = abs(val-en)
            Emin = val
            anals=energies[val]
    return (Emin,delta,anals)

for process in processes:
    if(process not in analyses) : continue
    matrix=""
    if( process in me ) :
        matrix = me[process]
    for analysis in analyses[process] :
        aos=yoda.read(os.path.join(os.path.join(os.getcwd(),path),analysis+".yoda"))
        if(len(aos)==0) : continue
        for plot in analyses[process][analysis] :
            histo = aos["/REF/%s/%s" %(analysis,plot)]
            for point in histo.points() :
                energy = point.x()
                if(analysis=="KLOE_2009_I797438" or
                   analysis=="KLOE_2005_I655225" or
                   analysis=="KLOE2_2017_I1634981" or
                   analysis=="FENICE_1994_I377833") :
                    energy = math.sqrt(energy)
                if(energy>200) :
                    energy *= 0.001
                emin,delta,anals = nearestEnergy(energy)
                if(energy in energies) :
                    if(analysis not in energies[energy][1]) :
                        energies[energy][1].append(analysis)
                    if(matrix!="" and matrix not in energies[energy][0] and
                       minMass[process]<=energy) :
                        energies[energy][0].append(matrix)
                elif(delta<1e-7) :
                    if(analysis not in anals[1]) :
                        anals[1].append(analysis)
                    if(matrix!="" and matrix not in anals[0] and
                       minMass[process]<=energy) :
                        anals[0].append(matrix)
                else :
                    if(matrix=="") :
                        energies[energy]=[[],[analysis]]
                    elif(minMass[process]<=energy) :
                        energies[energy]=[[matrix],[analysis]]

with open("python/LowEnergy-GammaGamma-Perturbative.in", 'r') as f:
    templateText = f.read()
perturbative=Template( templateText )
with open("python/LowEnergy-GammaGamma-NonPerturbative.in", 'r') as f:
    templateText = f.read()
nonPerturbative=Template( templateText )

targets=""
for energy in sorted(energies) :
    anal=""
    for analysis in energies[energy][1]: 
        anal+= "insert /Herwig/Analysis/Rivet:Analyses 0 %s\n" %analysis
    proc=""
    matrices = energies[energy][0]
    if(allProcesses) : matrices = me.values()
    for matrix in  matrices:
        proc+="insert SubProcess:MatrixElements 0 %s\n" % matrix
    maxflavour =5
    if(energy<thresholds[1]) :
        maxflavour=2
    elif(energy<thresholds[2]) :
        maxflavour=3
    elif(energy<thresholds[3]) :
        maxflavour=4
    # input file for perturbative QCD
    if(opts.perturbative and energy> thresholds[0]) :
        inputPerturbative = perturbative.substitute({"ECMS" : "%8.6f" % energy, "ANALYSES" : anal,
                                                     "lepton" : "", "maxflavour" : 10+maxflavour})
        with open(opts.dest+"/Rivet-LowEnergy-GammaGamma-Perturbative-%8.6f.in" % energy ,'w') as f:
            f.write(inputPerturbative)
        targets += "Rivet-LowEnergy-GammaGamma-Perturbative-%8.6f.yoda " % energy
    # input file for currents
    if(opts.nonPerturbative and proc!="") :
        inputNonPerturbative = nonPerturbative.substitute({"ECMS" : "%8.6f" % energy, "ANALYSES" : anal,
                                                           "processes" : proc})
        with open(opts.dest+"/Rivet-LowEnergy-GammaGamma-NonPerturbative-%8.6f.in" % energy ,'w') as f:
            f.write(inputNonPerturbative)
        targets += "Rivet-LowEnergy-GammaGamma-NonPerturbative-%8.6f.yoda " % energy
print (targets)
