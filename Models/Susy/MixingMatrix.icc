// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MixingMatrix class.
//

namespace Herwig {

inline MixingMatrix::MixingMatrix() {}
  
inline MixingMatrix::MixingMatrix(const CMatrix & mix,
				  const vector<long> & ids): 
  _theMixingMatrix(mix),_theIds(ids), _theSize(make_pair(mix.size(),mix[0].size())) 
{}

inline MixingMatrix::MixingMatrix(unsigned int row, unsigned int col) 
  :  _theMixingMatrix(row,vector<Complex>(col,Complex(0.,0.))), _theSize(row,col)
{}

inline IBPtr MixingMatrix::clone() const {
  return new_ptr(*this);
}

inline IBPtr MixingMatrix::fullclone() const {
  return new_ptr(*this);
}

inline void MixingMatrix::setMatrix(const CMatrix & mixing) {
  _theMixingMatrix = mixing;
  _theSize = make_pair(mixing.size(),mixing[0].size());
}
  
inline CMatrix MixingMatrix::getMatrix() const {
  return _theMixingMatrix;
}

inline const Complex MixingMatrix::operator()(unsigned int row,
					      unsigned int col) const {
  
  return _theMixingMatrix.at(row).at(col);
}

inline Complex & MixingMatrix::operator()(unsigned int row,
					  unsigned int col) {
  return _theMixingMatrix.at(row).at(col);
}
 
  inline pair<unsigned int,unsigned int> MixingMatrix::size() const {
  return _theSize;
}

inline void MixingMatrix::addCode(long id) {
  if(_theIds.size() >= _theSize.first) {
    throw MixingMatrixError() << "MixingMatrix::addCode() - Trying to add a"
			      << "PDG code but the vector already contains the "
			      << "same number as the matrix size " 
			      << Exception::warning;
    return;
  }
  _theIds.push_back(id);
}

inline void MixingMatrix::setIds(const vector<long> & mixingCodes) {
  if(mixingCodes.size() != _theSize.first) {
    throw MixingMatrixError() << "MixingMatrix::setIds() - The number "
			      << "of PDG codes does not match the size of the "
			      << "matrix" << Exception::warning;
    return;
  }
  _theIds = mixingCodes;
}

inline const vector<long> & MixingMatrix::getIds() const {
  return _theIds;
}

// inline MixingMatrix MixingMatrix::operator*(const MixingMatrix & mix) const {
//   if(_theMixingMatrix.size() != mix.size()) {
//     MixingMatrixError() << "MixingMatrix::operator*() - "
// 			<< "MatrixSizes do not match "
// 			<< " cannot continue with multplication." 
// 			<< Exception::warning;
//     return MixingMatrix();
//   }
//   else {
//     unsigned int msize(_theMixingMatrix.size());
//     MixingMatrix product(msize);
//     for(unsigned int ix=0;ix<msize;++ix) {
//       for(unsigned int iy=0;iy<msize;++iy) {
// 	for(unsigned int ik=0;ik<msize;++ik) {
// 	  product(ix,iy) += _theMixingMatrix[ix][ik]*mix(ik,iy);
// 	}
//       }      
//     }
//   return product;
//   }
// }

}
