// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RSModel class.
//
namespace Herwig {

inline RSModel::RSModel() {}

inline RSModel::RSModel(const RSModel & x)
  : StandardModel(x), _theLambda_pi(x._theLambda_pi), _theFFGRVertex(x._theFFGRVertex),
    _theVVGRVertex(x._theVVGRVertex), _theSSGRVertex(x._theSSGRVertex),
    _theFFVGRVertex(x._theFFVGRVertex), _theVVVGRVertex(x._theVVVGRVertex) {}

inline IBPtr RSModel::clone() const {
  return new_ptr(*this);
}

inline IBPtr RSModel::fullclone() const {
  return new_ptr(*this);
}

inline void RSModel::doupdate() throw(UpdateException) {
  StandardModel::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void RSModel::doinit() throw(InitException) {
  StandardModel::doinit();
}

inline void RSModel::dofinish() {
  StandardModel::dofinish();
}

inline void RSModel::doinitrun() {
  StandardModel::doinitrun();
}

inline void RSModel::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  StandardModel::rebind(trans);
}

inline IVector RSModel::getReferences() {
  IVector ret = StandardModel::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline Energy RSModel::lambda_pi() const {return _theLambda_pi;}

inline tFFTPtr   RSModel::vertexFFGR()  const {return _theFFGRVertex;}
inline tVVTPtr   RSModel::vertexVVGR()  const {return _theVVGRVertex;}
inline tSSTPtr   RSModel::vertexSSGR()  const {return _theSSGRVertex;}
inline tFFVTPtr  RSModel::vertexFFVGR() const {return _theFFVGRVertex;}
inline tVVVTPtr  RSModel::vertexVVVGR() const {return _theVVVGRVertex;}

}
