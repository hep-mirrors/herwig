// -*- C++ -*-
#ifndef HERWIG_HPDiagram_H
#define HERWIG_HPDiagram_H
//
// This is the declaration of the HPDiagram struct.
//

#include "ThePEG/Persistency/PersistentOStream.h"
#include "ThePEG/Persistency/PersistentIStream.h"
#include "ThePEG/Helicity/Vertex/VertexBase.h"

namespace Herwig {
using namespace ThePEG;
using Helicity::VertexBasePtr;

  /** Pair of particle ids. */
  typedef pair<long, long> IDPair;
  
  /** Pair of bool's*/
  typedef pair<bool, bool> BPair;

  /** Convenient typedef of VertexBasePtr */
  typedef VertexBasePtr VBPtr;

  /** Pair of VertexBasePtrs */
  typedef pair<VBPtr, VBPtr> VBPair;
  
  /** Pair of int,double */
  typedef pair<unsigned int, double> CFPair;
  
  /**
   * The HPDiagram struct contains information about a 2->2 hard-process that 
   * has been automatically generated by HardProcessConstructor.
   */  
struct HPDiagram {

  /** Enumeration for channel type */
  enum Channel {UNDEFINED = -1, sChannel, tChannel, fourPoint};

  /** Standard Constructor */
  HPDiagram() : incoming(make_pair(0, 0)), outgoing(make_pair(0, 0)),
		ordered(make_pair(true,true)), channelType(UNDEFINED),
		colourFlow(0) {}

  /** Incoming particle id's */
  IDPair incoming;
  
  /** Outgoing particle id's */
  IDPair outgoing;

  /** Particle ordering for t-channel diagrams */
  BPair ordered;

  /** ParticleData pointer to intermediate, null for 4-point vertices */
  PDPtr intermediate;

  /** The two vertices for the diagram */
  VBPair vertices;
  
  /** Enum of channel type */
  Channel channelType;

  /** Store colour flow information */
  vector<CFPair> colourFlow;

  /**
   * Test whether this and x are identical
   */
  inline bool operator==(const HPDiagram & x) const;

  /**
   * Test whether this and x are the same process
   * @param x The other process to check
   */
  inline bool sameProcess(HPDiagram & x) const;
};
  
  
  
  /** 
   * Output operator to allow the structure to be persistently written
   * @param os The output stream
   * @param x The HPDiagram 
   */
  inline PersistentOStream & operator<<(PersistentOStream & os, 
					const HPDiagram  & x);

  /** 
   * Input operator to allow persistently written data to be read in
   * @param is The input stream
   * @param x The HPDiagram 
  */
  inline PersistentIStream & operator>>(PersistentIStream & is,
					HPDiagram & x);
}

#include "HPDiagram.icc"

#endif /* HERWIG_HPDiagram_H */
