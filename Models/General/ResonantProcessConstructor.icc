// -*- C++ -*-
//
// ResonantProcessConstructor.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the ResonantProcessConstructor class.
//

namespace Herwig {

inline ResonantProcessConstructor::ResonantProcessConstructor()  
  : theIncoming(0), theIntermediates(0), theOutgoing(0), theDiagrams(0),
    theDebug(false) {}

inline IBPtr ResonantProcessConstructor::clone() const {
  return new_ptr(*this);
}

inline IBPtr ResonantProcessConstructor::fullclone() const {
  return new_ptr(*this);
}

inline void ResonantProcessConstructor::doinit() throw(InitException) {
  Interfaced::doinit();
  EGPtr eg = generator();
  theModel = dynamic_ptr_cast<HwSMPtr>(eg->standardModel());
  if(!theModel)
    throw InitException() << "ResonantProcessConstructor:: doinit() - "
			  << "The model pointer is null!"
			  << Exception::abortnow;
  if(eg->eventHandler()) {
    string subProcessName = 
      eg->preinitInterface(eg->eventHandler(), "SubProcessHandlers", "get","");
   theSubProcess = eg->getObject<SubProcessHandler>(subProcessName);
   if(!theSubProcess)
     throw InitException() << "ResonantProcessConstructor:: doinit() - "
			   << "There was an error getting the SubProcessHandler "
			   << "from the current event handler. "
			   << Exception::abortnow;
  }
  else
    throw
      InitException() << "ResonantProcessConstructor:: doinit() - "
		      << "The eventHandler pointer was null therefore "
		      << "could not get SubProcessHandler pointer " 
		      << Exception::abortnow;
}
  
}
