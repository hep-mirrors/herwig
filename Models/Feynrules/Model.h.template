// -*- C++ -*-
//
// ${ModelName}.h is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
#ifndef HERWIG_${ModelName}_H
#define HERWIG_${ModelName}_H
//
// This is the declaration of the ${ModelName} class.
#include "Herwig++/Models/StandardModel/StandardModel.h"
//#include "Herwig++/Models/General/BSMModel.h"
#include "ThePEG/StandardModel/StandardModelBase.h"


namespace Herwig {
using namespace ThePEG;


/** \ingroup Models
 *  
 *  This is the Herwig++ ${ModelName} class which inherits from ThePEG 
 *  FeynRules Model class and implements additional FeynRules Model couplings, 
 *  access to vertices for helicity amplitude calculations etc.
 *
 *  @see StandardModel
 */
//class ${ModelName}: public StandardModel {
class ${ModelName}: public StandardModel {

public:
  /// Default constructor
  ${ModelName}();

public:

  /** @name Functions used by the persistent I/O system. */
  //@{
  /**
   * Function used to write out object persistently.
   * @param os the persistent output stream written to.
   */
  void persistentOutput(PersistentOStream & os) const;

  /**
   * Function used to read in object persistently.
   * @param is the persistent input stream read from.
   * @param version the version number of the object when written.
   */
  void persistentInput(PersistentIStream & is, int version);
  //@}
  
  /**
   * Standard Init function used to initialize the interfaces.
   */
  static void Init();

protected:
  virtual bool registerDefaultVertices() const { return false; }

public:

  /**
   * Pointers to the objects handling the vertices.
   */
  //@{

${getters}
${parmgetters}


Complex params_array[${num_params}];

  Complex test() const { return Complex(1,0); }


  //@}  
  
protected:
  
  /** @name Clone Methods. */
  //@{
  /**
   * Make a simple clone of this object.
   * @return a pointer to the new object.
   */
  virtual IBPtr clone() const;

  /** Make a clone of this object, possibly modifying the cloned object
   * to make it sane.
   * @return a pointer to the new object.
   */
  virtual IBPtr fullclone() const;
  //@}
  
protected:

  /**
   * Initialize this object after the setup phase before saving and
   * EventGenerator to disk.
   * @throws InitException if object could not be initialized properly.
   */
  virtual void doinit();
  //@}

private:
  
  /**
   * Describe a concrete class with persistent data.
   */
  static ClassDescription<${ModelName}> init${ModelName};
  
  /** 
   * Private and non-existent assignment operator.
   */
  ${ModelName} & operator=(const ${ModelName} &);
  
private:

  /**
   * Pointers to the vertices for ${ModelName} Model helicity amplitude
   * calculations.
   */
  //@{

${decls}
${parmdecls}
};

}

namespace ThePEG {

  ThePEG_DECLARE_POINTERS(Herwig::${ModelName},Hw${ModelName}Ptr);


/** @cond TRAITSPECIALIZATIONS */

/**
 * The following template specialization informs ThePEG about the
 * base class of ${ModelName}.
 */
template <>
struct BaseClassTrait<Herwig::${ModelName},1> {
    /** Typedef of the base class of ${ModelName}. */
  typedef Herwig::StandardModel NthBase;
};

/**
 * The following template specialization informs ThePEG about the
 * name of this class and the shared object where it is defined.
 */
template <>
struct ClassTraits<Herwig::${ModelName}>
  : public ClassTraitsBase<Herwig::${ModelName}> {

  /**
   * Return the class name.
   */
  static string className() { return "Herwig::${ModelName}"; }
  /**
   * The name of a file containing the dynamic library.
   */
  static string library() { return "${ModelName}.so"; }
};

/** @endcond */

}


#endif /* HERWIG_${ModelName}_H */
