// -*- C++ -*-
//
// FR${classname}Vertex.cc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.

#include "ThePEG/Helicity/Vertex/Vector/${lorentztag}Vertex.h"
#include "ThePEG/StandardModel/StandardModelBase.h"
#include "ThePEG/Interface/ClassDocumentation.h"
#include "ThePEG/Persistency/PersistentOStream.h"
#include "ThePEG/Persistency/PersistentIStream.h"

namespace Herwig 
{
  using namespace ThePEG;

  class FR${classname}Vertex: public ${lorentztag}Vertex {
  public:
    FR${classname}Vertex();
    virtual void setCoupling(Energy2 q2,
			     tcPDPtr part1,tcPDPtr part2,tcPDPtr part3);

  public:
    void persistentOutput(PersistentOStream & os) const;
    void persistentInput(PersistentIStream & is, int version);
    static void Init();

  protected:
    virtual IBPtr clone() const { return new_ptr(*this); }
    virtual IBPtr fullclone() const { return new_ptr(*this); }
    virtual void doinit();
  
  private:
    static ClassDescription<FR${classname}Vertex> initFR${classname}Vertex;
    FR${classname}Vertex & operator=(const FR${classname}Vertex &);

  private:
    ${couplings}
    Complex _couplast;
    Energy2 _q2last;
  };
}
    
namespace ThePEG 
{
  template <>
  struct BaseClassTrait<Herwig::FR${classname}Vertex,1> {
    typedef ThePEG::Helicity::${lorentztag}Vertex NthBase;
  };
  template <>
  struct ClassTraits<Herwig::FR${classname}Vertex>
    : public ClassTraitsBase<Herwig::FR${classname}Vertex> {
      static string className() { return "Herwig::FR${classname}Vertex"; }
      static string library() { return "FeynrulesModel.so"; }
    };
}

namespace Herwig {
using namespace ThePEG;
void FR${classname}Vertex::persistentOutput(PersistentOStream & os) const {
  os ${outputCouplings};
}
void FR${classname}Vertex::persistentInput(PersistentIStream & is, int) {
  is ${inputCouplings};
}

ClassDescription<FR${classname}Vertex> 
FR${classname}Vertex::initFR${classname}Vertex;

void FR${classname}Vertex::Init() {
  static ClassDocumentation<FR${classname}Vertex> documentation
    ("The FR${classname}Vertex class is the implementation of"
     "the coupling of the Z boson to the Standard Model fermions");
}

void FR${classname}Vertex::setCoupling(Energy2 q2,tcPDPtr,tcPDPtr,tcPDPtr) {
  // first the overall normalisation
  if(q2!=_q2last||_couplast==0.) {
    _couplast = -electroMagneticCoupling(q2);
    _q2last=q2;
  }
  norm(_couplast);
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  left(${left});
  right(${right});
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

FR${classname}Vertex::FR${classname}Vertex() : _couplast(0.0), _q2last(ZERO) {
  ${addToPlist}
}

void FR${classname}Vertex::doinit() {
  ${parameters}
  ${setCouplings}
  orderInGem(${qedorder});
  orderInGs(${qcdorder});
  cerr << "HERE IS ${classname}\n";
  ${lorentztag}Vertex::doinit();
}

}
