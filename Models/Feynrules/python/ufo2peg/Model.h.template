// -*- C++ -*-
//
// ${ModelName}.h is a part of Herwig - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2013 The Herwig Collaboration
//
// Herwig is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
#ifndef HERWIG_${ModelName}_H
#define HERWIG_${ModelName}_H

// This is the declaration of the ${ModelName} class.
#include "Herwig/Models/General/BSMModel.h"

namespace Herwig {
using namespace ThePEG;
using ThePEG::Constants::pi;

const Complex ii = Complex(0,1);

/** \ingroup Models
 *  
 *  This is the Herwig ${ModelName} class which inherits from ThePEG 
 *  FeynRules Model class and implements additional FeynRules Model couplings, 
 *  access to vertices for helicity amplitude calculations etc.
 *
 *  @see BSMModel
 */
class ${ModelName}: public BSMModel {

public:
  /// Default constructor
  ${ModelName}();

public:

  /** @name Functions used by the persistent I/O system. */
  //@{
  /**
   * Function used to write out object persistently.
   * @param os the persistent output stream written to.
   */
  void persistentOutput(PersistentOStream & os) const;

  /**
   * Function used to read in object persistently.
   * @param is the persistent input stream read from.
   * @param version the version number of the object when written.
   */
  void persistentInput(PersistentIStream & is, int version);
  //@}

  /**
   * Write out a UFO param_card.dat that matches the configured values
   */
  void writeParamCard() const;

  /**
   * Standard Init function used to initialize the interfaces.
   */
  static void Init();

protected:
  virtual bool registerDefaultVertices() const { return false; }

public:

  /**
   * Pointers to the objects handling the vertices.
   */
  //@{

${getters}
${parmgetters}

  //@}  
  
protected:
  
  /** @name Clone Methods. */
  //@{
  /**
   * Make a simple clone of this object.
   * @return a pointer to the new object.
   */
  virtual IBPtr clone() const;

  /** Make a clone of this object, possibly modifying the cloned object
   * to make it sane.
   * @return a pointer to the new object.
   */
  virtual IBPtr fullclone() const;
  //@}
  
protected:

  /**
   * Initialize this object after the setup phase before saving and
   * EventGenerator to disk.
   * @throws InitException if object could not be initialized properly.
   */
  virtual void doinit();

  /**
   * Initialize this object. Called in the run phase just before
   * a run begins.
   */
  virtual void doinitrun();
  //@}

private:
  
  /** 
   * Private and non-existent assignment operator.
   */
  ${ModelName} & operator=(const ${ModelName} &);

private:

  /**
   *  Helper functions for doinit
   */
  //@{

${calcfunctions}
  //@}
  
private:

  /**
   * Pointers to the vertices for ${ModelName} Model helicity amplitude
   * calculations.
   */
  //@{

${decls}
${parmdecls}
  //@}
};

}

namespace ThePEG {
  ThePEG_DECLARE_POINTERS(Herwig::${ModelName},Hw${ModelName}Ptr);
}


#endif /* HERWIG_${ModelName}_H */
