class ${ModelName}${classname}: public Abstract${lorentztag}Vertex {
 public:
  ${ModelName}${classname}() {
    colourStructure(ColourStructure::${colourStructure});
    ${addToPlist}
  }

  ${evaldefs}
  
  void persistentOutput(PersistentOStream & os) const { os << model_; }
  void persistentInput(PersistentIStream & is, int) { is >> model_; }
  
  virtual void setCoupling(Energy2, tcPDPtr,
			   tcPDPtr, tcPDPtr) {assert(false);} 

  virtual void setCoupling(Energy2,tcPDPtr,tcPDPtr,tcPDPtr,
			   tcPDPtr) {assert(false);}
  
 protected:
  
  IBPtr clone() const { return new_ptr(*this); }
  IBPtr fullclone() const { return new_ptr(*this); }
  void doinit() {
    model_ = dynamic_ptr_cast<tcHw${ModelName}Ptr>
	     (generator()->standardModel());
    assert(model_);
    ${couplingOrders}
    Abstract${lorentztag}Vertex::doinit();
  }
  
 private:
  
  ${ModelName}${classname} & operator=(const ${ModelName}${classname} &);
  
  tcHw${ModelName}Ptr model_;
};
DescribeClass<${ModelName}${classname},Helicity::Abstract${lorentztag}Vertex>
describeHerwig${ModelName}${classname}("Herwig::${ModelName}${classname}",
				       "${ModelName}.so");

${evalimpls}
