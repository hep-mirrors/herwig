#! /usr/bin/env python
from __future__ import division
import os, sys, argparse, re, string

slha_pat   = re.compile('^# SLHA # (.*)')
setter_pat = re.compile('^set ([:\w]+) (.+)')
comment_pat = re.compile('\s*#.*$')
block_pat = re.compile('^block\s+(\w+)',flags=re.I)

PARAMS = {}

TEMPLATE = []

def process_setter_line(line, label):
	m = setter_pat.match(line)
	if not m: raise Exception('Unexpected SLHA line: %s' % line)
	param, value = m.groups()
	PARAMS[label] = value
	TEMPLATE.append('set {} ${{{}}}'.format(param,label))

# set up the option parser for command line input 
parser = argparse.ArgumentParser(
    description='Modify a ThePEG model file with parameters from a matching SLHA file.'
)
parser.add_argument(
    'modelfile', 
    metavar='ThePEG_model', 
    help='ThePEG model file to use as template. Must have "# SLHA #"" annotations.'
)
parser.add_argument(
    'slhafile', 
    metavar='SLHA_file', 
    help='SLHA spectrum file.'
)

args = parser.parse_args()

with open(args.modelfile) as f:
	label = None
	for line in f:
		line = line.rstrip()
		m = slha_pat.match(line)
		if m:
			TEMPLATE.append(line)
			label = m.group(1)
		elif label is not None:
			process_setter_line(line, label)
			label = None
		else:
			TEMPLATE.append(line)

template = string.Template('\n'.join(TEMPLATE))

################### TEMPLATE created ######################

with open(args.slhafile) as f:
	for line in f:
		line = comment_pat.sub('',line.rstrip())
		if not line: continue
		if block_pat.match(line):
			print line

