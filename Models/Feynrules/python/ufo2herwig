#! /usr/bin/env python
from __future__ import division
import os, sys, pprint, argparse, re
from string import strip, Template

# add path to the ufo conversion modules
modulepath = os.path.join("@PKGLIBDIR@",'python')
sys.path.append(modulepath)

from ufo2peg import *

# set up the option parser for command line input 
parser = argparse.ArgumentParser(
    description='Create Herwig model files from Feynrules UFO input.'
)
parser.add_argument(
    'ufodir', 
    metavar='UFO_directory', 
    help='the UFO model directory'
)
parser.add_argument(
    '-v', '--verbose', 
    action="store_true", 
    help="print verbose output"
)
parser.add_argument(
    '-n','--name', 
    default="FRModel", 
    help="set custom nametag for the model"
)
parser.add_argument(
    '--ignore-skipped', 
    action="store_true", 
    help="ignore skipped vertices and produce output anyway"
)
parser.add_argument(
    '--split-model', 
    action="store_true", 
    help="Split the model file into pieces to improve compilation for models with many parameters"
)
parser.add_argument(
    '--no-generic-loop-vertices',
    action="store_true",
    help="Don't include the automatically generated generic loop vertices for h->gg and h->gamma gamma"
)

parser.add_argument(
    '--forbidden-particle-name',
    action="append",
    default=["eta","phi"],
    help="Add particle names not allowed as names in UFO models to avoid conflicts with"+\
    "Herwig internal particles, names will have _UFO appended"
)

vertex_skipped = False

args = parser.parse_args()

def should_print():
    return not vertex_skipped or args.ignore_skipped

import imp
path,mod = os.path.split(os.path.abspath(args.ufodir))
FR = imp.load_module(mod,*imp.find_module(mod,[path]))

##################################################
##################################################

# get the Model name from the arguments
modelname = args.name
libname = modelname + '.so'



# define arrays and variables     
#allplist = ""
parmdecls = []
parmgetters = []
parmconstr = []
doinit = []

paramstoreplace_ = []
paramstoreplace_expressions_ = []

# get external parameters for printing
parmsubs = dict( [ (p.name, p.value) 
                   for p in FR.all_parameters 
                   if p.nature == 'external' ] ) 

# evaluate python cmath
def evaluate(x):
    import cmath
    return eval(x, 
                {'cmath':cmath,
                 'complexconjugate':FR.function_library.complexconjugate}, 
                parmsubs)


## get internal params into arrays
internal = ( p for p in FR.all_parameters 
             if p.nature == 'internal' )

#paramstoreplaceEW_ = []
#paramstoreplaceEW_expressions_ = []

# calculate internal parameters
for p in internal:
    parmsubs.update( { p.name : evaluate(p.value) } )
#    if 'aS' in p.value and p.name != 'aS':
#        paramstoreplace_.append(p.name)
#        paramstoreplace_expressions_.append(p.value)
#    if 'aEWM1' in p.value and p.name != 'aEWM1':
#        paramstoreplaceEW_.append(p.name)
#        paramstoreplaceEW_expressions_.append(p.value)

        
    
# more arrays used for substitution in templates 
paramsforstream = []
parmmodelconstr = []

# loop over parameters and fill in template stuff according to internal/external and complex/real
# WARNING: Complex external parameter input not tested!
if args.verbose:
    print 'verbose mode on: printing all parameters'
    print '-'*60
    paramsstuff = ('name', 'expression', 'default value', 'nature')
    pprint.pprint(paramsstuff)



interfacedecl_T = """\
static Parameter<{modelname}, {type}> interface{pname}
  ("{pname}",
   "The interface for parameter {pname}",
   &{modelname}::{pname}_, {value}, 0, 0,
   false, false, Interface::nolimits);
"""

massnames = {}
widthnames = {}

for particle in FR.all_particles:
    if particle.mass != 'ZERO':
        massnames[particle.mass] = abs(particle.pdg_code)

    if particle.width != 'ZERO':
        widthnames[particle.width] = abs(particle.pdg_code)

interfaceDecls = []
modelparameters = {}

for p in FR.all_parameters:
    value = parmsubs[p.name]

    if p.type == 'real':
        assert( value.imag < 1.0e-16 )
        value = value.real
        if p.nature == 'external':
            if p.name not in massnames and p.name not in widthnames:
                interfaceDecls.append( 
                    interfacedecl_T.format(modelname=modelname,
                                           pname=p.name,
                                           value=value,
                                           type=typemap(p.type)) 
                )
            else:
                interfaceDecls.append('\n// no interface for %s. Use particle definition instead.\n' % p.name)
            if hasattr(p,'lhablock'):
                lhalabel = '{lhablock}_{lhacode}'.format( lhablock=p.lhablock.upper(), lhacode='_'.join(map(str,p.lhacode)) )
                if p.name not in massnames and p.name not in widthnames:
                    parmmodelconstr.append('set %s:%s ${%s}' % (modelname, p.name, lhalabel))
                else:
                    parmmodelconstr.append('# %s is taken from the particle setup' % p.name)
                modelparameters[lhalabel] = value
                parmsubs[p.name] = lhalabel
            else:
                if p.name not in massnames and p.name not in widthnames:
                    parmmodelconstr.append('set %s:%s %s' % (modelname, p.name, value))
                else:
                    parmmodelconstr.append('# %s is taken from the particle setup' % p.name)
                parmsubs[p.name] = value
            if p.name not in massnames and p.name not in widthnames:
                parmconstr.append('%s_(%s)' % (p.name, value))
            else:
                parmconstr.append('%s_()' % p.name)
        else :
            parmconstr.append('%s_()' % p.name)
            parmsubs[p.name] = value
    elif p.type == 'complex':
        value = complex(value)
        if p.nature == 'external':
#
# TODO: WE DO NOT HAVE COMPLEX INTERFACES IN THEPEG (yet?)
#
#            interfaceDecls.append( 
#                interfacedecl_T.format(modelname=modelname,
#                                       pname=p.name,
#                                       value='Complex(%s,%s)'%(value.real,value.imag),
#                                       type=typemap(p.type)) 
#            )
#
#            parmmodelconstr.append('set %s:%s (%s,%s)' % (modelname, p.name, value.real, value.imag))
            parmconstr.append('%s_(%s,%s)' % (p.name, value.real, value.imag))
        else :
            parmconstr.append('%s_(%s,%s)' % (p.name, 0.,0.))
        parmsubs[p.name] = value
    else:
        raise Exception('Unknown data type "%s".' % p.type)

    parmdecls.append('  %s %s_;' % (typemap(p.type), p.name))
    parmgetters.append('  %s %s() const { return %s_; }' % (typemap(p.type),p.name, p.name))
    paramsforstream.append('%s_' % p.name)
    expression, symbols = 'return %s_' % p.name, None
    if p.nature != 'external':
        expression, symbols = py2cpp(p.value)
        text = add_brackets(expression, symbols)
        text=text.replace('()()','()')
        doinit.append('   %s_ = %s;'  % (p.name, text) )
        if p.name in massnames:
            doinit.append('   getParticleData(%s)->mass(%s_ * GeV);'  % (massnames[p.name], p.name) )
        elif p.name in widthnames:
            doinit.append('   getParticleData(%s)->width(%s_ * GeV);' % (widthnames[p.name], p.name) )
            doinit.append('   getParticleData(%s)->cTau (%s_ == 0.0 ? ZERO : hbarc/(%s_*GeV));' % (widthnames[p.name], p.name, p.name) )
            doinit.append('   getParticleData(%s)->widthCut(10. * %s_ * GeV);' % (widthnames[p.name], p.name) )


    elif p.nature == 'external':
        if p.name in massnames:
            doinit.append('   %s_ = getParticleData(%s)->mass()  / GeV;'  % (p.name, massnames[p.name]) )
        elif p.name in widthnames:
            doinit.append('   %s_ = getParticleData(%s)->width() / GeV;'  % (p.name, widthnames[p.name]) )

    if args.verbose:
        pprint.pprint((p.name,p.value, value, p.nature))

pcwriter = ParamCardWriter(FR.all_parameters)
paramcard_output = '\n'.join(pcwriter.output)

### special treatment
#    if p.name == 'aS':
#        expression = '0.25 * sqr(strongCoupling(q2)) / Constants::pi'
#    elif p.name == 'aEWM1':
#        expression = '4.0 * Constants::pi / sqr(electroMagneticCoupling(q2))'
#    elif p.name == 'Gf':
#        expression = 'generator()->standardModel()->fermiConstant() * GeV2'

paramconstructor=': '

for ncount in range(0,len(parmconstr)) :
    paramconstructor += parmconstr[ncount]
    if(ncount != len(parmconstr) -1) :
        paramconstructor += ','
    if(ncount%5 == 0 ) :
        paramconstructor += "\n"

paramout=""
paramin =""
for ncount in range(0,len(paramsforstream)) :
    if(ncount !=0 ) :
        paramout += "<< " + paramsforstream[ncount]
        paramin  += ">> " + paramsforstream[ncount]
    else :
        paramout += paramsforstream[ncount]
        paramin  += paramsforstream[ncount]
    if(ncount%5 == 0 ) :
        paramout += "\n"
        paramin  += "\n"

parmtextsubs = { 'parmgetters' : '\n'.join(parmgetters),
                 'parmdecls' : '\n'.join(parmdecls),
                 'parmconstr' : paramconstructor,
                 'getters' : '',
                 'decls' : '',
                 'addVertex' : '',
                 'doinit' : '\n'.join(doinit),
                 'ostream' : paramout,
                 'istream' : paramin ,
                 'refs' : '',
                 'parmextinter': ''.join(interfaceDecls),
                 'ModelName': modelname,
                 'calcfunctions': '',
                 'param_card_data': paramcard_output
                 }

##################################################
##################################################
##################################################


# get vertex template
VERTEX = getTemplate('Vertex.cc')
VERTEXCLASS = getTemplate('Vertex_class')
VERTEXHEADER = """\
#include "ThePEG/Helicity/Vertex/{spindirectory}/{lorentztag}Vertex.h"
"""

def write_vertex_file(subs):
    newname = '%s_Vertices_%03d.cc' % (subs['ModelName'],subs['vertexnumber'])
    writeFile( newname, VERTEX.substitute(subs) )

if args.verbose:
    print 'verbose mode on: printing all vertices'
    print '-'*60
    labels = ('vertex', 'particles', 'Lorentz', 'C_L', 'C_R', 'norm')
    pprint.pprint(labels)

### initial pass to find global sign
def global_sign():
    return 1.0
    for v in FR.all_vertices:
        pids = sorted([ p.pdg_code for p in v.particles ])
        if pids != [-11,11,22]: continue
        coup = v.couplings
        assert( len(coup) == 1 )
        val = coup.values()[0].value
        val = evaluate(val)
        assert( val.real == 0 )
        return 1 if val.imag > 0 else -1

vertexclasses, vertexheaders = [], set()

ONE_EACH = True
if ONE_EACH:
    all_vertices = FR.all_vertices
else:
    all_vertices = collapse_vertices(FR.all_vertices)

globalsign = global_sign()
for vertexnumber,vertex in enumerate(all_vertices,1):

    lorentztag = unique_lorentztag(vertex)
    
    vertex.herwig_skip_vertex = False

    # remove vertices involving ghost fields
    if 'U' in lorentztag:
        vertex.herwig_skip_vertex = True
        continue


    gsnames = ['goldstone',
           'goldstoneboson',
           'GoldstoneBoson']

    for p in vertex.particles:
        def gstest(name):
            try:
                return getattr(p,name)
            except AttributeError:
                return False

        if any(map(gstest, gsnames)):
            vertex.herwig_skip_vertex = True
            break
        
    if vertex.herwig_skip_vertex: 
        continue


    lfactors = { 
        'FFV'  : '-complex(0,1)',  # ok
        'VVV'  : 'complex(0,1)',   # changed to fix ttbar
        'VVVV' : 'complex(0,1)',
        'VVS'  : '-complex(0,1)',
        'VSS'  : '-complex(0,1)', # changed to minus to fix dL ->x1 W- d
        'SSS'  : '-complex(0,1)',  # ok
        'VVSS' : '-complex(0,1)',  # ok
        'VVT'  : 'complex(0,2)',
        'VVVT' : '-complex(0,2)',
        'SSSS' : '-complex(0,1)',  # ok
        'FFS'  : '-complex(0,1)',  # ok
        'SST'  : 'complex(0,2)',
        'FFT'  : '-complex(0,8)',
        'FFVT' : '-complex(0,4)',
    }

    try:
        lf = lfactors[lorentztag]
    except KeyError:
        msg = 'Warning: Lorentz structure {tag} ( {ps} ) in {name} ' \
              'is not supported.\n'.format(tag=lorentztag, name=vertex.name, 
                                           ps=' '.join(map(str,vertex.particles)))
        sys.stderr.write(msg)
        vertex.herwig_skip_vertex = True
        vertex_skipped = True
        continue

    ### Particle ids
    if ONE_EACH:
        plistarray = [ ','.join([ str(p.pdg_code) for p in vertex.particles ]) ]
    else:
        plistarray = [ ','.join([ str(p.pdg_code) for p in pl ])
                       for pl in vertex.particles_list ]

    try:
        L,pos = colors(vertex)
        cf = colorfactor(vertex,L,pos)
    except SkipThisVertex:
        vertex.herwig_skip_vertex = True
        vertex_skipped = True
        continue
    
    ### classname
    classname = 'V_%s' % vertex.name

    ### parse couplings
    unique_qcd = CheckUnique()
    unique_qed = CheckUnique()
    
    coup_left  = []
    coup_right = []
    coup_norm = []
    couplings_VVS = []
    kinematics = "false"
    if ONE_EACH:
        items = vertex.couplings.iteritems()
    else:
        items = vertex.couplings

    try:
        for (color_idx,lorentz_idx),coupling in items:

            qcd, qed = qcd_qed_orders(vertex, coupling)
            unique_qcd( qcd )
            unique_qed( qed )

            L = vertex.lorentz[lorentz_idx]
            prefactors = '(%s) * (%s) * (%s)' \
                            % (globalsign**(len(lorentztag)-2),lf,cf[color_idx])

            ordering = ''
            if lorentztag in ['FFS','FFV']:
                left,right = parse_lorentz(L.structure)
                if left:
                    coup_left.append('(%s) * (%s) * (%s)' % (prefactors,left,coupling.value))
                if right:
                    coup_right.append('(%s) * (%s) * (%s)' % (prefactors,right,coupling.value))
                if lorentztag == 'FFV':
                    ordering = ('if(p1->id()!=%s) {Complex ltemp=left(), rtemp=right(); left(-rtemp); right(-ltemp);}' 
                                % vertex.particles[0].pdg_code)
            elif 'T' in lorentztag :
                all_coup, left_coup, right_coup, ordering = \
                    tensorCouplings(vertex,coupling,prefactors,L,lorentztag,pos)
                coup_norm  += all_coup
                coup_left  += left_coup
                coup_right += right_coup
            elif lorentztag == 'VVS' :
                tc = VVSCouplings(vertex,coupling,prefactors,L,lorentztag)
                if(len(couplings_VVS)==0) :
                    couplings_VVS=tc
                else :
                    for ix in range(0,len(couplings_VVS)) :
                        if(tc[ix] == 0.) :
                            continue
                        elif(couplings_VVS[ix]==0.) :
                            couplings_VVS[ix]=tc[ix]
                        else :
                            couplings_VVS[ix] = '(( %s ) + ( %s ) )' % (couplings_VVS[ix],tc[ix])
            else:
                if lorentztag == 'VSS':
                    if L.structure == 'P(1,3) - P(1,2)':
                        prefactors += ' * (-1)'
                    ordering = 'if(p2->id()!=%s){norm(-norm());}' \
                                   % vertex.particles[1].pdg_code
                elif lorentztag == 'VVVV':
                    if qcd==2:
                        ordering = 'setType(1);\nsetOrder(0,1,2,3);'
                    else:
                        ordering, factor = EWVVVVCouplings(vertex,L)
                        prefactors += ' * (%s)' % factor
                elif lorentztag == 'VVV':
                    if len(pos[8]) != 3:
                        ordering = VVVordering(vertex)

                if type(coupling) is not list:
                    value = coupling.value
                else:
                    value = "("
                    for coup in coupling :
                        value += '+(%s)' % coup.value
                    value +=")"
                coup_norm.append('(%s) * (%s)' % (prefactors,value))


            #print 'Colour  :',vertex.color[color_idx]
            #print 'Lorentz %s:'%L.name, L.spins, L.structure
            #print 'Coupling %s:'%C.name, C.value, '\nQED=%s'%qed, 'QCD=%s'%qcd
            #print '---------------'
    except SkipThisVertex:
        vertex.herwig_skip_vertex = True
        vertex_skipped = True
        continue


    leftcontent  = ' + '.join(coup_left)  if coup_left  else '0'
    rightcontent = ' + '.join(coup_right) if coup_right else '0'
    normcontent  = ' + '.join(coup_norm)  if coup_norm  else '1'
#    #print 'Left:',leftcontent
#    #print 'Right:',rightcontent
#    #print 'Norm:',normcontent
#    #print '---------------'


        
    couplingptrs = [',tcPDPtr']*len(lorentztag)
    if lorentztag == 'VSS':
        couplingptrs[1] += ' p2'
    elif lorentztag == 'FFV':
        couplingptrs[0] += ' p1'
    elif lorentztag == 'VVV' and ordering != '':
        couplingptrs[0] += ' p1'
        couplingptrs[1] += ' p2'
        couplingptrs[2] += ' p3'
    elif lorentztag == 'VVVT' and ordering != '':
        couplingptrs[0] += ' p1'
        couplingptrs[1] += ' p2'
        couplingptrs[2] += ' p3'
    elif lorentztag == 'VVVV' and qcd != 2:
        couplingptrs[0] += ' p1'
        couplingptrs[1] += ' p2'
        couplingptrs[2] += ' p3'
        couplingptrs[3] += ' p4'
        
#    ### do we need left/right?
    symbols = set()
    left = ''
    right = ''
    leftcalc = ''
    rightcalc = ''
    if 'FF' in lorentztag and lorentztag != "FFT":
#        leftcalc = aStoStrongCoup(py2cpp(leftcontent)[0], paramstoreplace_, paramstoreplace_expressions_)
#        rightcalc = aStoStrongCoup(py2cpp(rightcontent)[0], paramstoreplace_, paramstoreplace_expressions_)
        leftcalc, sym = py2cpp(leftcontent)
        symbols |= sym
        rightcalc, sym = py2cpp(rightcontent)
        symbols |= sym
        left = 'left(' + leftcalc + ');'
        right = 'right(' + rightcalc + ');'
    elif lorentztag == 'VVS':
        if(couplings_VVS[0]==0. and couplings_VVS[1]==0. and couplings_VVS[2]==0. and \
           couplings_VVS[3]==0. and couplings_VVS[4]==0. and couplings_VVS[5]!=0) :
            normcontent  = couplings_VVS[5]
        else :
            for ix in range(0,len(couplings_VVS)) :
                if(couplings_VVS[ix] !=0.) :
                    couplings_VVS[ix], sym = py2cpp(couplings_VVS[ix])
                    symbols |= sym
            lorentztag = 'GeneralVVS'
            kinematics='true'
            # g_mu,nv piece of coupling 
            if(couplings_VVS[5]!=0.) :
                left  = 'a00( %s + Complex(( %s )* GeV2/invariant(1,2)));' % ( couplings_VVS[0],couplings_VVS[5])
            else :
                left  = 'a00( %s );' % couplings_VVS[0]
            # other couplings
            right = 'a11( %s );\n    a12( %s );\n    a21( %s );\n    a22( %s ); aEp( %s ); ' % \
                   ( couplings_VVS[1],couplings_VVS[2],couplings_VVS[3],couplings_VVS[4],couplings_VVS[6] )

#    normcalc = aStoStrongCoup(py2cpp(normcontent)[0], paramstoreplace_, paramstoreplace_expressions_)
    normcalc, sym = py2cpp(normcontent)
    symbols |= sym
    # UFO is GeV by default (?)
    if lorentztag in ['VVS','SSS']:
        normcalc = 'Complex((%s) * GeV / UnitRemoval::E)' % normcalc
    elif lorentztag in ['GeneralVVS']:
        normcalc = 'Complex(-(%s) * UnitRemoval::E / GeV )' % normcalc
    elif lorentztag in ['FFT','VVT', 'SST', 'FFVT', 'VVVT' ]:
        normcalc = 'Complex((%s) / GeV * UnitRemoval::E)' % normcalc
    norm = 'norm(' + normcalc + ');'

    # define unkown symbols from the model
    symboldefs = [ def_from_model(FR,s) for s in symbols ]
    ### assemble dictionary and fill template
    subs = { 'lorentztag' : lorentztag,                   # ok
             'classname'  : classname,            # ok
             'symbolrefs' : '\n    '.join(symboldefs),
             'left'       : left,                 # doesn't always exist in base
             'right'      : right,                 # doesn't always exist in base 
             'norm'      : norm,                 # needs norm, too

             #################### need survey which different setter methods exist in base classes

             'addToPlist' : '\n'.join([ 'addToList(%s);'%s for s in plistarray]),
             'parameters' : '',
             'setCouplings' : '',
             'qedorder'   : qed,
             'qcdorder' : qcd,
             'couplingptrs' : ''.join(couplingptrs),
             'spindirectory' : spindirectory(lorentztag),
             'ModelName' : modelname,
             'ordering' : ordering,
             'kinematics' : kinematics
             }             # ok

    if args.verbose:
        print '-'*60
        pprint.pprint(( classname, plistarray, leftcalc, rightcalc, normcalc ))
        
    vertexclasses.append(VERTEXCLASS.substitute(subs))
    vertexheaders.add(VERTEXHEADER.format(**subs))

    WRAP = 25
    if vertexnumber % WRAP == 0:
        write_vertex_file({'classname':classname,
                           'vertexnumber' : vertexnumber//WRAP,
                           'vertexclasses' : '\n'.join(vertexclasses),
                           'vertexheaders' : ''.join(vertexheaders),
                           'ModelName' : modelname})
        vertexclasses = []
        vertexheaders = set()


if not should_print():
    sys.stderr.write(
"""
Error: The conversion was unsuccessful, some vertices could not be
       generated. If you think the missing vertices are not important 
       and want to go ahead anyway, use --ignore-skipped. 
       Herwig may not give correct results, though.

"""
    )
    
    sys.exit(1)
        
if vertexclasses:
    write_vertex_file({'classname':classname,
                       'vertexnumber' : vertexnumber//WRAP + 1,
                       'vertexclasses' : '\n'.join(vertexclasses),
                       'vertexheaders' : ''.join(vertexheaders),
                       'ModelName' : modelname})
        
print '='*60

##################################################
##################################################
##################################################

vertexline = """\
create Herwig::{modelname}V_{vname} /Herwig/{modelname}/V_{vname}
insert {modelname}:ExtraVertices 0 /Herwig/{modelname}/V_{vname}
"""

def get_vertices():
    vlist = ['library %s\n' % libname]
    for v in all_vertices:
        if v.herwig_skip_vertex: continue
        vlist.append( vertexline.format(modelname=modelname, vname=v.name) )
    if( not args.no_generic_loop_vertices) :
        vlist.append('insert {modelname}:ExtraVertices 0 /Herwig/{modelname}/V_GenericHPP\n'.format(modelname=modelname) )
        vlist.append('insert {modelname}:ExtraVertices 0 /Herwig/{modelname}/V_GenericHGG\n'.format(modelname=modelname) )
    return ''.join(vlist)


plist, names = thepeg_particles(FR,parmsubs,modelname,modelparameters,args.forbidden_particle_name)

particlelist = [
    "# insert HPConstructor:Outgoing 0 /Herwig/{n}/Particles/{p}".format(n=modelname,p=p)
    for p in names
]
# make the first one active to have something runnable in the example .in file
particlelist[0] = particlelist[0][2:]
particlelist = '\n'.join(particlelist)

modelfilesubs = { 'plist' : plist,
                  'vlist' : get_vertices(),
                  'setcouplings': '\n'.join(parmmodelconstr),
                  'ModelName': modelname
                  }

# write the files from templates according to the above subs
if should_print():
    MODEL_HWIN = getTemplate('LHC-FR.in')
    if(not args.split_model) :
        MODEL_CC = [getTemplate('Model.cc')]
    else :
        MODEL_EXTRA_CC=getTemplate('Model6.cc')
        extra_names=[]
        extra_calcs=[]
        parmtextsubs['doinit']=""
        for i in range(0,len(doinit)) :
            if( i%20 == 0 ) :
                function_name = "initCalc" +str(int(i/20))
                parmtextsubs['doinit'] += function_name +"();\n"
                parmtextsubs['calcfunctions'] += "void " + function_name + "();\n"
                extra_names.append(function_name)
                extra_calcs.append("")
            extra_calcs[-1] += doinit[i] + "\n"
        for i in range(0,len(extra_names)) :
            ccname =  '%s_extra_%s.cc' % (modelname,i)
            writeFile( ccname,     MODEL_EXTRA_CC.substitute({'ModelName' : modelname,
                                                              'functionName' : extra_names[i],
                                                              'functionCalcs' : extra_calcs[i] }) )




        MODEL_CC = [getTemplate('Model1.cc'),getTemplate('Model2.cc'),getTemplate('Model3.cc'),
                    getTemplate('Model4.cc'),getTemplate('Model5.cc')]
    MODEL_H  = getTemplate('Model.h')
    print 'LENGTH',len(MODEL_CC)
    MODELINFILE = getTemplate('FR.model')
    writeFile( 'LHC-%s.in' % modelname, 
               MODEL_HWIN.substitute({ 'ModelName' : modelname,
                                       'Particles' : particlelist })
    )

    modeltemplate = Template( MODELINFILE.substitute(modelfilesubs) )

    writeFile( '%s.h' % modelname,      MODEL_H.substitute(parmtextsubs) )
    for i in range(0,len(MODEL_CC)) :
        if(len(MODEL_CC)==1) :
            ccname = '%s.cc' % modelname
        else :
            ccname = '%s.cc' % (modelname + str(i))
        writeFile( ccname,     MODEL_CC[i].substitute(parmtextsubs) )
    writeFile( modelname +'.template', modeltemplate.template )
    writeFile( modelname +'.model', modeltemplate.substitute( modelparameters ) )
    # copy the Makefile-FR to current directory,
    # replace with the modelname for compilation
    with open(os.path.join(modulepath,'Makefile-FR'),'r') as orig:
        with open('Makefile','w') as dest:
            dest.write(orig.read().replace("FeynrulesModel.so", libname))


print 'finished generating model:\t', modelname
print 'model directory:\t\t', args.ufodir
print 'generated:\t\t\t', len(FR.all_vertices), 'vertices'
print '='*60
print 'library:\t\t\t', libname
print 'input file:\t\t\t', 'LHC-' + modelname +'.in'
print 'model file:\t\t\t', modelname +'.model'
print '='*60
print """\
To complete the installation, compile by typing "make".
An example input file is provided as LHC-FRModel.in, 
you'll need to change the required particles in there.
"""
print 'DONE!'
print '='*60

