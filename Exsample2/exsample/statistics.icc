// -*- C++ -*-
//
// statistics.icc is part of ExSample -- A Library for Sampling Sudakov-Type Distributions
//
// Copyright (C) 2008-2011 Simon Platzer -- simon.plaetzer@desy.de
//
// ExSample is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
namespace exsample {

  inline statistics::statistics()
    : average_weight_(0.), average_abs_weight_(0.), average_weight_variance_(-1.),
      iteration_points_(0),
      attempted_(0), accepted_(0), accepted_negative_(0),
      sum_weights_(0.), sum_abs_weights_(0.), sum_weights_squared_(0.),
      max_weight_(0.), n_iterations_(0) {
  }

  inline void statistics::presampled(double weight) {
    ++iteration_points_;
    sum_weights_ += weight;
    sum_abs_weights_ += std::abs(weight);
    sum_weights_squared_ += sqr(weight);      
    max_weight_ = std::max(max_weight_,std::abs(weight));   
  }

  inline void statistics::select(double weight,
				 bool calculate_integral) {
    ++attempted_;
    if (calculate_integral) {
      ++iteration_points_;
      sum_weights_ += weight;
      sum_abs_weights_ += std::abs(weight);
      sum_weights_squared_ += sqr(weight);
      max_weight_ = std::max(max_weight_,std::abs(weight));
    }
  }

  inline void statistics::reset() {
    if (iteration_points_ == 0)
      return;
    double average = sum_weights_/iteration_points_;
    double average_abs = sum_abs_weights_/iteration_points_;
    double variance =
      std::abs(sum_weights_squared_/iteration_points_ - sqr(sum_weights_/iteration_points_)) /
      iteration_points_;
    if (n_iterations_ == 0 || 
	std::sqrt(variance)/average <= std::sqrt(average_weight_variance_)/average_weight_) {

      if (n_iterations_ > 0) {
	average_weight_ = average_weight_ + average;
	average_abs_weight_ = average_abs_weight_ + average_abs;
	average_weight_variance_ = average_weight_variance_ + variance;
      } else {
	average_weight_ = average;
	average_abs_weight_ = average_abs;
	average_weight_variance_ = variance;
      }
      ++n_iterations_;
    }
    sum_weights_ = 0.;
    sum_abs_weights_ = 0.;
    sum_weights_squared_ = 0.;
    iteration_points_ = 0;
  }

  inline std::pair<double,double> statistics::current() const {
    double average = sum_weights_/iteration_points_;
    double variance =
      std::abs(sum_weights_squared_/iteration_points_ - sqr(sum_weights_/iteration_points_)) /
      iteration_points_;
    std::pair<double,double> res;
    if (n_iterations_ > 0) {
      res.first = average_weight_ + average;
      res.second = average_weight_variance_ + variance;
    } else {
      res.first = average;
      res.second = variance;
    }
    res.first = (n_iterations_ == 0 ? 0. : res.first/n_iterations_);
    res.second = (n_iterations_ == 0 ? 0. : res.second/n_iterations_);
    return res;
  }


  template<class OStream>
  void statistics::put(OStream& os) const {
    os << average_weight_;
    ostream_traits<OStream>::separator(os);
    os << average_abs_weight_;
    ostream_traits<OStream>::separator(os);
    os << average_weight_variance_;
    ostream_traits<OStream>::separator(os);
    os << n_iterations_;
    ostream_traits<OStream>::separator(os);
  }

  template<class IStream>
  void statistics::get(IStream& is) {
    is >> average_weight_
       >> average_abs_weight_
       >> average_weight_variance_
       >> n_iterations_;
  }

}
