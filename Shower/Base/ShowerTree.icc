// -*- C++ -*- 
namespace Herwig {

using namespace ThePEG;

inline bool ShowerTree::hardMatrixElementCorrection() const {
  return _hardMECorrection;
}

inline void ShowerTree::hardMatrixElementCorrection(bool in) {
  _hardMECorrection=in;
}

inline map<ShowerProgenitorPtr,ShowerParticlePtr> & ShowerTree::incomingLines() { 
  return _incomingLines; 
}

inline map<ShowerProgenitorPtr,tShowerParticlePtr> & ShowerTree::outgoingLines() { 
  return _outgoingLines; 
}

inline void ShowerTree::addFinalStateBranching(ShowerParticlePtr parent,
					       const ShowerParticleVector & children) {
  assert(children.size()==2);
  _forward.erase(parent);
  for(unsigned int ix=0; ix<children.size(); ++ix) {
    _forward.insert(children[ix]);
  }
}

inline void ShowerTree::addInitialStateBranching(ShowerParticlePtr oldParent,
						 ShowerParticlePtr newParent,
						 ShowerParticlePtr otherChild) {
  _backward.erase(oldParent);
  _backward.insert(newParent);
  _forward.insert(otherChild);
}

inline tShowerParticlePtr 
ShowerTree::getFinalStateShowerProduct(ShowerProgenitorPtr progenitor) {
  return _outgoingLines.find(progenitor)==_outgoingLines.end()
    ? tShowerParticlePtr() : _outgoingLines[progenitor];
}

inline bool ShowerTree::isHard() const   {
  return  _wasHard;
} 

inline bool ShowerTree::isDecay() const  {
  return !_wasHard;
}

inline void ShowerTree::setParents() {
  // set the parent tree of the children
  map<tShowerTreePtr,pair<tShowerProgenitorPtr,tShowerParticlePtr> >::const_iterator tit;
  for(tit=_treelinks.begin();tit!=_treelinks.end();++tit)
    tit->first->_parent=this;
}

inline void ShowerTree::fillEventRecord(StepPtr pstep, bool ISR, bool FSR) {
  if(_wasHard) insertHard(pstep,ISR,FSR);
  else         insertDecay(pstep,ISR,FSR);
}

inline bool ShowerTree::hasShowered() const {
  return _hasShowered;
}

inline void ShowerTree::hasShowered(bool in) {
  _hasShowered=in;
}

inline ShowerTreePtr ShowerTree::parent() const {
  return _parent;
}

inline void ShowerTree::fixColour(tShowerParticlePtr part) {
  ColinePtr line=part->colourLine();
  if(line) {
    line->removeColoured(part);
    line->addColoured(part);
  }
  line=part->antiColourLine();
  if(line) {
    line->removeAntiColoured(part);
    line->addAntiColoured(part);
  }
}
}
