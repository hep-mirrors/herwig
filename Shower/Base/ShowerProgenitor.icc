// -*- C++ -*- 
namespace Herwig {

using namespace ThePEG;

inline ShowerProgenitor::ShowerProgenitor(PPtr original, PPtr copy,
					  ShowerParticlePtr particle,
					  Energy pT,bool emitted)
  : _original(original), _copy(copy), _perturbative(true),
    _particle(particle), _highestpT(pT), _maxpT(Constants::MaxEnergy), 
    _hasEmitted(emitted) {
  // get the BeamParticleData object
  if ( original->parents().empty() ) {
    _beam=dynamic_ptr_cast<tcBeamPtr>(original->dataPtr());
  } 
  else {
    _beam=dynamic_ptr_cast<tcBeamPtr>(original->parents()[0]->dataPtr());
  }
}

inline ShowerParticlePtr ShowerProgenitor::progenitor() const {
  return _particle;
}

inline void ShowerProgenitor::progenitor(ShowerParticlePtr in) {
  _particle=in;
}

inline PPtr ShowerProgenitor::original() const {
  return _original;
}

inline PPtr ShowerProgenitor::copy() const {
  return _copy;
}

inline void ShowerProgenitor::copy(PPtr in) {
  _copy=in;
}

inline bool ShowerProgenitor::perturbative() const {
  return _perturbative;
}

inline void ShowerProgenitor::perturbative(bool in) {
  _perturbative=in;
}

inline Energy ShowerProgenitor::highestpT() const {
  return _highestpT;
}

inline void ShowerProgenitor::highestpT(Energy in) {
  _highestpT=in;
}

inline Energy ShowerProgenitor::maximumpT() const {
  return _maxpT;
}

inline void ShowerProgenitor::maximumpT(Energy in) {
  _maxpT=in;
}

inline bool ShowerProgenitor::hasEmitted() const {
  return _hasEmitted;
}

inline void ShowerProgenitor::hasEmitted(bool in) {
  _hasEmitted=in;
}

inline long ShowerProgenitor::id() const {
  return _particle->id();
}

inline Ptr<BeamParticleData>::transient_const_pointer ShowerProgenitor::beam() {
  return _beam;
}
}

