// -*- C++ -*-
//
// Evolver.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the Evolver class.
//

namespace Herwig {

inline Evolver::Evolver() : _maxtry(100), _meCorrMode(1), _hardVetoMode(1), 
			    _hardVetoRead(0),
			    _iptrms(), _beta(), _gamma(), _iptmax(), 
			    _initialenhance(1.), _finalenhance(1.), _useCKKW(false),
			    _theUseCKKW(false)
{}

inline IBPtr Evolver::clone() const {
  return new_ptr(*this);
}

inline IBPtr Evolver::fullclone() const {
  return new_ptr(*this);
}

inline bool Evolver::showeringON() const
{
  return 
    _splittingGenerator->isISRadiationON()||
    _splittingGenerator->isFSRadiationON();
}

inline bool Evolver::isISRadiationON() const {
  return _splittingGenerator->isISRadiationON();
}

inline bool Evolver::isFSRadiationON() const {
  return _splittingGenerator->isFSRadiationON();
}

inline ShowerModelPtr Evolver::showerModel() const {
  return _model;
}

inline bool Evolver::ipTon() const {
  return _iptrms != 0.0*MeV || ( _beta == 1.0 && _gamma != 0.0*MeV && _iptmax !=0.0*MeV );
}

inline bool Evolver::MECOn() const {
  return _meCorrMode > 0; 
}

inline bool Evolver::hardMEC() const {
  return (_meCorrMode == 1 || _meCorrMode == 2); 
}

inline bool Evolver::softMEC() const {
  return (_meCorrMode == 1 || _meCorrMode > 2); 
}

inline bool Evolver::hardVetoOn() const {
  return _hardVetoMode > 0; 
}

inline bool Evolver::hardVetoIS() const {
  return (_hardVetoMode == 1 || _hardVetoMode == 2); 
}

inline bool Evolver::hardVetoFS() const {
  return (_hardVetoMode == 1 || _hardVetoMode > 2); 
}

inline bool Evolver::hardVetoXComb() const {
  return (_hardVetoRead == 1); 
}

inline double Evolver::initialStateRadiationEnhancementFactor() const {
  return _initialenhance;
}

inline double Evolver::finalStateRadiationEnhancementFactor() const {
  return _finalenhance;
}

inline void Evolver::initialStateRadiationEnhancementFactor(double in) {
  _initialenhance=in;
}

inline void Evolver::finalStateRadiationEnhancementFactor(double in) {
  _finalenhance=in;
}

inline Ptr<BeamParticleData>::const_pointer 
Evolver::beamParticle() const {
  return _beam;
}

inline void Evolver::setBeamParticle(Ptr<BeamParticleData>::const_pointer in) {
  _beam=in;
}

  inline void Evolver::addVeto (ShowerVetoPtr v) {
    _vetoes.push_back(v);
  }

  inline void Evolver::removeVeto (ShowerVetoPtr v) {
    vector<ShowerVetoPtr>::iterator vit = find(_vetoes.begin(),_vetoes.end(),v);
    if (vit != _vetoes.end())
      _vetoes.erase(vit);
  }


inline void Evolver::rebind(const TranslationMap & trans)
  throw(RebindException) {
  _reconstructor=trans.translate(_reconstructor);
  _reweighter=trans.translate(_reweighter);
  Interfaced::rebind(trans);
}

inline IVector Evolver::getReferences() {
  IVector ret = Interfaced::getReferences();
  ret.push_back(_reconstructor);
  ret.push_back(_reweighter);
  return ret;
}


}
