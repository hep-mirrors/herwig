// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Evolver class.
//

namespace Herwig {

inline Evolver::Evolver() : _maxtry(100), _meCorrMode(1),
			    _initialenhance(1.),_finalenhance(1.) {
}

inline IBPtr Evolver::clone() const {
  return new_ptr(*this);
}

inline IBPtr Evolver::fullclone() const {
  return new_ptr(*this);
}

inline bool Evolver::showeringON() const
{
  return 
    _splittingGenerator->isISRadiationON()||
    _splittingGenerator->isFSRadiationON();
}

inline bool Evolver::isISRadiationON() const {
  return _splittingGenerator->isISRadiationON();
}

inline bool Evolver::isFSRadiationON() const {
  return _splittingGenerator->isFSRadiationON();
}

inline ShowerModelPtr Evolver::showerModel() const {
  return _model;
}

inline bool Evolver::MECOn() const {
  return _meCorrMode > 0; 
}

inline bool Evolver::hardMEC() const {
  return (_meCorrMode == 1 || _meCorrMode == 2); 
}

inline bool Evolver::softMEC() const {
  return (_meCorrMode == 1 || _meCorrMode > 2); 
}

inline double Evolver::initialStateRadiationEnhancementFactor() const {
  return _initialenhance;
}

inline double Evolver::finalStateRadiationEnhancementFactor() const {
  return _finalenhance;
}

inline void Evolver::initialStateRadiationEnhancementFactor(double in) {
  _initialenhance=in;
}

inline void Evolver::finalStateRadiationEnhancementFactor(double in) {
  _finalenhance=in;
}

inline Ptr<BeamParticleData>::const_pointer 
Evolver::beamParticle() const {
  return _beam;
}

inline void Evolver::setBeamParticle(Ptr<BeamParticleData>::const_pointer in) {
  _beam=in;
}
  
inline tShowerTreePtr Evolver::currentTree() {
  return _currenttree;
}

inline void Evolver::currentTree(tShowerTreePtr tree) {
  _currenttree=tree;
}

inline tSplittingGeneratorPtr Evolver::splittingGenerator() const {
  return _splittingGenerator;
}

inline unsigned int Evolver::maximumTries() {
  return _maxtry;
}
 
inline ShowerProgenitorPtr Evolver::progenitor() {
  return _progenitor;
}

inline void Evolver::progenitor(ShowerProgenitorPtr in) {
  _progenitor=in;
}

inline map<tShowerProgenitorPtr,pair<Energy,double> > & Evolver::intrinsicpT() {
  return _intrinsic;
}
}
