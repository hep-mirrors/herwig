// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SudakovFormFactor class.
//

namespace Herwig {

inline SudakovFormFactor::SudakovFormFactor() :
  _minScale( Energy() ),
  _maxScale( Energy() )
{}


inline SudakovFormFactor::SudakovFormFactor(const SudakovFormFactor & x)
  : Pythia7::HandlerBase(x),
	     _splitFun( x._splitFun ),
	     _alpha( x._alpha ),
	     _minScale( x._minScale ),
	     _maxScale( x._maxScale )
{}


inline SudakovFormFactor::SudakovFormFactor 
(const SplitFunPtr inputSplitFun, const tShowerAlphaPtr inputShowerAlpha, 
 const Energy inputMinScale, const Energy inputMaxScale) 
  : _splitFun( inputSplitFun ),
    _alpha( inputShowerAlpha ),
    _minScale( inputMinScale ), 
    _maxScale( inputMaxScale )
{}  


inline tSplitFunPtr SudakovFormFactor::splitFun() const {
  return _splitFun;
}


inline tShowerAlphaPtr SudakovFormFactor::alpha() const {
  return _alpha;
}


//----------------------------------------------------------------------

inline void SudakovFormFactor::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SudakovFormFactor::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
}

inline void SudakovFormFactor::dofinish() {
  Pythia7::HandlerBase::dofinish();
}

inline void SudakovFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}

inline IVector SudakovFormFactor::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
