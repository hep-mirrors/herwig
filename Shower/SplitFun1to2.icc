// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SplitFun1to2 class.
//

namespace Herwig {


inline SplitFun1to2::SplitFun1to2() 
  : SplitFun(),
    _id1( 0 ),
    _m1( Energy() ),
    _id2( 0 ),
    _m2( Energy() ), 
    _qtilde2( Energy2() ), 
    _z( 0 ),  
    _phi( 0 ) 
{}


inline SplitFun1to2::SplitFun1to2(const SplitFun1to2 & x)
  : SplitFun(x),
    _id1( x._id1 ),
    _m1( x._m1 ),
    _id2( x._id2 ),
    _m2( x._m2 ), 
    _qtilde2( x._qtilde2 ), 
    _z( x._z ),  
    _phi( x._phi ) 
{}


inline SplitFun1to2::
SplitFun1to2( const ShowerIndex::InteractionType interaction,
	      const long inputIdEmitter,
	      const long inputIdFirstProduct, const long inputIdSecondProduct ) 
//***LOOKHERE*** TEMPORARY FIX TO AVOID THE BUG
//LEIF  : SplitFun( interaction, 2, inputIdEmitter, ( getParticleData( inputIdEmitter ) 
//LEIF						      ? getParticleData( inputIdEmitter )->mass() 
//LEIF					              : Energy() ) ),
  : SplitFun( interaction, 2, inputIdEmitter, Energy() ),
//***endLOOKHERE***
    _id1( inputIdFirstProduct ),
    _m1( getParticleData( inputIdFirstProduct ) 
	 ? getParticleData( inputIdFirstProduct )->mass() 
	 : Energy() ),
    _id2( inputIdSecondProduct ),
    _m2( getParticleData( inputIdSecondProduct ) 
	 ? getParticleData( inputIdSecondProduct )->mass() 
	 : Energy() )
{}


inline SplitFun1to2::
SplitFun1to2( const ShowerIndex::InteractionType interaction,
	      const long inputIdEmitter, const Energy inputMassEmitter,
	      const long inputIdFirstProduct, const Energy inputMassFirstProduct,
	      const long inputIdSecondProduct, const Energy inputMassSecondProduct ) 
  : SplitFun( interaction, 2, inputIdEmitter, inputMassEmitter ),
    _id1( inputIdFirstProduct ),
    _m1( inputMassFirstProduct ),
    _id2( inputIdSecondProduct ),
    _m2( inputMassSecondProduct )
{}


inline long SplitFun1to2::idFirstProduct() const {
  return _id1;
}

inline Energy SplitFun1to2::massFirstProduct() const {
  return _m1;
}

inline long SplitFun1to2::idSecondProduct() const {
  return _id2;
}

inline Energy SplitFun1to2::massSecondProduct() const {
  return _m2;
}

inline Energy2 SplitFun1to2::qtilde2() const {
  return _qtilde2;
}

inline double SplitFun1to2::z() const {
  return _z;
}

inline double SplitFun1to2::phi() const {
  return _phi;
}


}

