// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Reweighter class.
//

namespace Herwig {

inline Reweighter::Reweighter()
  : Interfaced(),
    _vetoHighest(true),
    _MEalpha(1.)
{}

inline tJetMeasurePtr Reweighter::resolution () const {
  return _resolution;
}

inline bool Reweighter::vetoHighest () const {
  return _vetoHighest;
}

inline void Reweighter::MEalpha (double a) {
  _MEalpha = a;
}

inline double Reweighter::MEalpha () const {
  return _MEalpha;
}

inline tShowerAlphaPtr Reweighter::showerAlpha () const {
  return _showerAlpha;
}

inline CascadeReconstructorPtr Reweighter::reconstructor () const {
  return _reconstructor;
}

inline void Reweighter::rebind(const TranslationMap & trans)
  throw(RebindException) {
  _reconstructor = trans.translate(_reconstructor);
  Interfaced::rebind(trans);
}

inline IVector Reweighter::getReferences() {
  IVector ret = Interfaced::getReferences();
  ret.push_back(_reconstructor);
  return ret;
}

#ifdef HERWIG_CHECK_CKKW_REWEIGHTING

inline void Reweighter::doinitrun() {
  Interfaced::doinitrun();
  _clustering_scales = new_ptr(Histogram2(0,500,500,"sum"));
  _weights = new_ptr(Histogram2(0,1,50,"sum"));
  for(unsigned int i =1; i < 6; ++i) {
    ostringstream mname ("");
    mname << i;
    _weights->insertChannel(mname.str());
    _mult.insert(make_pair(i,mname.str()));
    for (unsigned int j=1; j<=i; ++j) {
      ostringstream name ("");
      name << i << "_" << j;
      _clustering_scales->insertChannel(name.str());
      _mult_cluster.insert(make_pair(make_pair(i,j),name.str()));
    }
  }
}

inline void Reweighter::dofinish() {
  Interfaced::dofinish();

  for(map<pair<unsigned int,unsigned int>,string>::iterator ch = _mult_cluster.begin();
      ch != _mult_cluster.end(); ++ch) {
    _clustering_scales->channel("sum") += _clustering_scales->channel(ch->second);
  }

  for(map<unsigned int,string>::iterator ch = _mult.begin();
      ch != _mult.end(); ++ch) {
    _weights->channel("sum") += _weights->channel(ch->second);
  }

  _weights->store("weights");
  _clustering_scales->store("clustering_scales");

  ofstream weights ("weights.dat");
  ofstream clustering_scales ("clustering_scales.dat");

  vector<string> allChannels = _weights->channels();

  for(vector<string>::iterator c = allChannels.begin();
      c != allChannels.end(); ++c) {
    _weights->output(weights,*c);
    weights << endl << endl;
  }

  allChannels = _clustering_scales->channels();

  for(vector<string>::iterator c = allChannels.begin();
      c != allChannels.end(); ++c) {
    _clustering_scales->output(clustering_scales,*c);
    clustering_scales << endl << endl;
  }

  generator()->log() << "CKKW statistics" << endl
		     << "================================================================================"
		     << endl
		     << "mult\t accepted\t avg weight"
		     << endl
		     << "--------------------------------------------------------------------------------"
		     << endl;
  for (map<unsigned int, pair<unsigned long, double> >::iterator s = _stats.begin();
       s != _stats.end(); ++s)
    generator()->log() << s->first << "\t" << s->second.first << "\t"
		       << s->second.second/s->second.first << endl;
  generator()->log() << "================================================================================"
		     << endl;
}

#endif

}
