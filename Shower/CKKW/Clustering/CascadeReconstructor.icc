// -*- C++ -*-
//
// CascadeReconstructor.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the CascadeReconstructor class.
//

namespace Herwig {

inline CascadeReconstructor::CascadeReconstructor()
  : Interfaced(),
    _forceIncreasing(false),
    _mayUseUnordered(false)
{}

inline IBPtr CascadeReconstructor::clone() const {
  return new_ptr(*this);
}

inline IBPtr CascadeReconstructor::fullclone() const {
  return new_ptr(*this);
}

inline tClusteringParticlePtr CascadeReconstructor::clusteringParticle (tPPtr orig) const {
  map<tPPtr,tClusteringParticlePtr>::const_iterator c = _conversionMap.find(orig);
  if (c != _conversionMap.end())
    return c->second;
  else
    return tClusteringParticlePtr();
}
  
inline Partitioner& CascadeReconstructor::partitioner () {
  return _partitioner;
}

inline bool CascadeReconstructor::forceIncreasing () const {
  return _forceIncreasing;
}

inline bool CascadeReconstructor::mayUseUnordered () const {
  if (!forceIncreasing()) return false;
  return _mayUseUnordered;
}

inline void CascadeReconstructor::resolution (JetMeasurePtr r) {
  _resolution = r;
  for (vector<ClustererPtr>::iterator c = _clusterers.begin();
       c != _clusterers.end(); ++c)
    (**c).jetMeasure(r);
}

inline void CascadeReconstructor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  _resolution = trans.translate(_resolution);
  Interfaced::rebind(trans);
}

inline IVector CascadeReconstructor::getReferences() {
  IVector ret = Interfaced::getReferences();
  ret.push_back(_resolution);
  return ret;
}

}
