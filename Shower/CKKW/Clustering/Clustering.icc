// -*- C++ -*-
//
// Clustering.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the Clustering class.
//

namespace Herwig {

inline Clustering::Clustering()
  : Interfaced(),
    _clusteringScale(0.*GeV2),
    _alphaScale(0.*GeV2),
    _z(0.),
    _weight(0.),
    _veto(false)
{}

inline Clustering::Clustering(const vector<tClusteringParticlePtr>& children,
			      const vector<ClusteringParticlePtr>& parents,
			      tClustererPtr clusterer,
			      tClusteringConfigurationPtr config)
  : _clusterer(clusterer),
    _parents(parents),
    _children(children),
    _clusteringScale(0.*GeV2),
    _alphaScale(0.*GeV2),
    _z(0),
    _weight(0),
    _veto(false),
    _clusteringConfiguration(config)
{}

inline IBPtr Clustering::clone() const {
  return new_ptr(*this);
}

inline IBPtr Clustering::fullclone() const {
  return new_ptr(*this);
}

inline vector<tClusteringParticlePtr> Clustering::children () const {
  return _children;
}

inline vector<ClusteringParticlePtr> Clustering::parents () const {
  return _parents;
}

inline void Clustering::postClustering (PostClusteringPtr pc) {
  _postClustering = pc;
}

inline tPostClusteringPtr Clustering::postClustering () const {
  return _postClustering;
}

inline void Clustering::scale (const Energy2& q) {
  _clusteringScale = q;
}

inline Energy2 Clustering::scale () const {
  return _clusteringScale;
}

inline void Clustering::alphaScale (const Energy2& q) {
  _alphaScale = q;
}

inline Energy2 Clustering::alphaScale () const {
  return _alphaScale;
}

inline void Clustering::momentumFraction (double z) {
  _z=z;
}

inline double Clustering::momentumFraction () const {
  return _z;
}

inline void Clustering::weight (double w) {
  _weight = w;
}

inline double Clustering::weight () const {
  return _weight;
}

inline void Clustering::veto () {
  _veto = true;
}

inline bool Clustering::wasVetoed () const {
  return _veto;
}

inline tClusteringConfigurationPtr Clustering::clusteringConfiguration () const {
  return _clusteringConfiguration;
}

inline tClustererPtr Clustering::clusterer() const {
  return _clusterer;
}

inline void Clustering::eventGenerator(tEGPtr eg) {
  setGenerator(eg);
}

}
