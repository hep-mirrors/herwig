// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the EWKClusterer class.
//

namespace Herwig {

inline EWKClusterer::EWKClusterer()
  : Clusterer(),
    _useColour(true),
    _useHadronic(true),
    _EWKOrder(2),
    _currentEWKOrder(0)
{}

inline bool EWKClusterer::useColour () const {
  return _useColour;
}

inline bool EWKClusterer::useHadronic () const {
  return _useHadronic;
}

inline ClusteringParticleData EWKClusterer::emergingLine
(ClusteringParticleData p1, ClusteringParticleData p2, bool& isEWK) {
  if (!performEWK()) {
    isEWK = false;
    return ClusteringParticleData();
  }
  ClusteringParticleData emerging = doEmergingLine(p1,p2,isEWK);
  if (!isEWK) emerging = doEmergingLine(p2,p1,isEWK);
  return emerging;
}

inline unsigned int EWKClusterer::EWKOrder () const {
  return _EWKOrder;
}

inline void EWKClusterer::reset () {
  _currentEWKOrder = 0;
}

inline bool EWKClusterer::performEWK () {
  _currentEWKOrder += 1;
  if (_currentEWKOrder <= _EWKOrder) return true;
  else return false;
}

inline IBPtr EWKClusterer::clone() const {
  return new_ptr(*this);
}

inline IBPtr EWKClusterer::fullclone() const {
  return new_ptr(*this);
}

inline unsigned int EWKClusterer::toClusterMultiplicity () const {
  return 2;
}

inline unsigned int EWKClusterer::fromClusterMultiplicity () const {
  return 1;
}

}
