// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MECorrections class.
//

namespace Herwig {

inline MECorrections::MECorrections() 
  : _MECorrectionsMode( 0 ),
    _composeMECorrectionsMode( 0 )
{}


inline MECorrections::MECorrections(const MECorrections & x)
  : Pythia7::HandlerBase(x), 
  _vecMECorrection( x._vecMECorrection ),
  _MECorrectionsMode( x._MECorrectionsMode ),
  _composeMECorrectionsMode( x._composeMECorrectionsMode ),
  _mapHardProcesses( x._mapHardProcesses ),
  _mapHardPlusJetProcesses( x._mapHardPlusJetProcesses ),
  _mapDecayProcesses( x._mapDecayProcesses ),
  _mapDecayPlusJetProcesses( x._mapDecayPlusJetProcesses )
{}


inline bool MECorrections::isMECorrectionsON() const {
  return _MECorrectionsMode;
}  

inline bool MECorrections::isComposeMECorrectionsON() const {  
  return _composeMECorrectionsMode;
}


inline void MECorrections::doinitrun() {
  Pythia7::HandlerBase::doinitrun();
  initializeRun();
}

//-------------------------------------------------------------------

inline IBPtr MECorrections::clone() const {
  return new_ptr(*this);
}

inline IBPtr MECorrections::fullclone() const {
  return new_ptr(*this);
}

inline void MECorrections::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MECorrections::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
}

inline void MECorrections::dofinish() {
  Pythia7::HandlerBase::dofinish();
}

inline void MECorrections::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}

inline IVector MECorrections::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
