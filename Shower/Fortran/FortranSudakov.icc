// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the FortranSudakov class.
//

namespace Herwig {

  inline FortranSudakov::FortranSudakov() : _sudord(2), _inter(3), 
					  _vqcut(0.48*GeV),
					  _vgcut(0.10*GeV),
					  _vpcut(0.40*GeV),
					  _nqev(1024)
{}

inline IBPtr FortranSudakov::clone() const {
  return new_ptr(*this);
}

inline IBPtr FortranSudakov::fullclone() const {
  return new_ptr(*this);
}
 
inline Energy FortranSudakov::cutOff(long id) const {
  if(id==ParticleID::g) {
    return showerVariables()->globalParameters()->effectiveGluonMass()+_vgcut;
  }
  else if(abs(id)<=6) {
    return getParticleData(id)->constituentMass()+_vqcut;
  }
  else if(id==ParticleID::gamma) {
    return getParticleData(id)->constituentMass()+_vpcut;
  }
  else {
    return getParticleData(id)->constituentMass();
  }
}

inline unsigned int FortranSudakov::findSudakov(const IdList & ids,const bool cc) const{
  IdList part;
  if(cc) {
    for(unsigned int ix=0;ix<ids.size();++ix) {
      if(getParticleData(ids[ix])->CC()) part.push_back(-ids[ix]);
      else                               part.push_back( ids[ix]);
    }
  }
  else part=ids;
  bool found=false;
  unsigned int iloc;
  for(iloc=0;iloc<particles().size();++iloc) {
    if(particles()[iloc].size()==ids.size()) {
      bool match=true;
      for(unsigned int iy=0;iy<ids.size();++iy) {
	if(particles()[iloc][iy]!=ids[iy]) {
	  match=false;
	  break;
	}
      }
      if(match) {
	found=true;
	break;
      }
    }
  }
  if(!found) throw Exception() << "Can't find Sudakov in table for " 
			       << ids[0] << " " << ids[1] << " " << ids[2] 
			       << " in FortranSudakov::findSudakov()"
			       << Exception::runerror;
  return iloc;
}

inline double FortranSudakovIntegrand::alphaIntegral(double al, double bl, 
						    unsigned int nf) const {
  return 1./_bet[nf-3]*log(bl/(al*(1.+_bep[nf]*bl))*(1.+_bep[nf]*al));
}
  
inline void  FortranSudakovIntegrand::setScales(double qrat,double qlam) {
  _qrat=qrat;
  _qlam=qlam;
}
}

  
