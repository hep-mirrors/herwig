// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ShowerAlphaQED class.
//

namespace Herwig {

inline ShowerAlphaQED::ShowerAlphaQED() : 
  _alpha( 1./137.03599976 )
 {}

inline ShowerAlphaQED::ShowerAlphaQED(const ShowerAlphaQED & x)
  : ShowerAlpha(x), _alpha(x._alpha) {}

inline IBPtr ShowerAlphaQED::clone() const {
  return new_ptr(*this);
}

inline IBPtr ShowerAlphaQED::fullclone() const {
  return new_ptr(*this);
}

inline void ShowerAlphaQED::doupdate() throw(UpdateException) {
  ShowerAlpha::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void ShowerAlphaQED::doinit() throw(InitException) {
  ShowerAlpha::doinit();
}

inline void ShowerAlphaQED::dofinish() {
  ShowerAlpha::dofinish();
}

inline void ShowerAlphaQED::doinitrun() {
  ShowerAlpha::doinitrun();
}

inline void ShowerAlphaQED::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ShowerAlpha::rebind(trans);
}

inline IVector ShowerAlphaQED::getReferences() {
  IVector ret = ShowerAlpha::getReferences();
  // ret.push_back(dummy);
  return ret;
}

// replace with more sensible minimum 
inline double ShowerAlphaQED::overestimateValue() {
  return _alpha;
}
}
