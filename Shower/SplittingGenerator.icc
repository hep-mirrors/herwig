// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SplittingGenerator class.
//

namespace Herwig {


inline SplittingGenerator::SplittingGenerator() 
  : _QCDinteractionMode(1), _QEDinteractionMode(0), _EWKinteractionMode(0),
    _ISR_Mode(0), _ISR_QCDMode(1), _ISR_QEDMode(1), _ISR_EWKMode(1),
    _FSR_Mode(1), _FSR_QCDMode(1), _FSR_QEDMode(1), _FSR_EWKMode(1)
{}


inline SplittingGenerator::SplittingGenerator(const SplittingGenerator & x)
  : ThePEG::HandlerBase(x), 
    _QCDinteractionMode(x._QCDinteractionMode),
    _QEDinteractionMode(x._QEDinteractionMode),
    _EWKinteractionMode(x._EWKinteractionMode),
    _ISR_Mode(x._ISR_Mode), _ISR_QCDMode(x._ISR_QCDMode),
    _ISR_QEDMode(x._ISR_QEDMode), _ISR_EWKMode(x._ISR_EWKMode),
    _FSR_Mode(x._FSR_Mode), _FSR_QCDMode(x._FSR_QCDMode),
    _FSR_QEDMode(x._FSR_QEDMode), _FSR_EWKMode(x._FSR_EWKMode),
    _showerAlphaQCD(x._showerAlphaQCD), _showerAlphaQED(x._showerAlphaQED),
    _showerVariables(x._showerVariables), _fbranchings(x._fbranchings),
    _bbranchings(x._bbranchings)
{}


inline const tShowerAlphaPtr SplittingGenerator::showerAlphaQCD() const {
  return _showerAlphaQCD;
}

inline const tShowerAlphaPtr SplittingGenerator::showerAlphaQED() const {
  return _showerAlphaQED;
}


inline const ShowerVarsPtr & SplittingGenerator::showerVariables() const {
  return _showerVariables;
}


inline bool SplittingGenerator::isISRadiationON() const {
  return _ISR_Mode;
}  

inline bool SplittingGenerator::isFSRadiationON() const {
  return _FSR_Mode;
}

inline void SplittingGenerator::doinitrun() {
  ThePEG::HandlerBase::doinitrun();
  //initializeRun();
}

//--------------------------------------------------------------------------

inline IBPtr SplittingGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr SplittingGenerator::fullclone() const {
  return new_ptr(*this);
}

inline void SplittingGenerator::doupdate() throw(UpdateException) {
  ThePEG::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SplittingGenerator::doinit() throw(InitException) {
  ThePEG::HandlerBase::doinit();
}

inline void SplittingGenerator::dofinish() {
  ThePEG::HandlerBase::dofinish();
}

inline void SplittingGenerator::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ThePEG::HandlerBase::rebind(trans);
}

inline IVector SplittingGenerator::getReferences() {
  IVector ret = ThePEG::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
