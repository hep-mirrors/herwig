// -*- C++ -*-
//
// ShowerHandler.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the ShowerHandler class.
//

namespace Herwig {
 
inline bool ShowerHandler::decayInShower(const long id) const {
  return ( _particlesDecayInShower.find( abs(id) ) != 
	   _particlesDecayInShower.end() ); 
}

inline tUEBasePtr ShowerHandler::getMPIHandler() const {  
  if(!theMPIHandler)
    throw Exception() << "The reference to the MPIHandler is set to zero."
		      << "So this call to ShowerHandler::getMPIHandler() should "
                      << "have never happened."
		      << Exception::runerror;

  return theMPIHandler;    
}

inline bool ShowerHandler::IsMPIOn() const {
  if(!theMPIHandler)
    return false;

  return theMPIHandler->beamOK();
}

inline tCascadeReconstructorPtr ShowerHandler::cascadeReconstructor () const {
  return _reconstructor;
}

inline bool ShowerHandler::IsOrdered() const{
  return theOrderSecondaries;
}

const ShowerHandler * ShowerHandler::currentHandler() {
  if(!theHandler)
    throw Exception() << "The handler you requested, is not set in "
		      << "ShowerHandler::currentHandler()"
		      << Exception::runerror;
  return theHandler;
}

inline tSubProPtr ShowerHandler::currentSubProcess() const {
  if(!theSubProcess)
    throw Exception() << "The subprocess you requested, is not set in "
                      << "ShowerHandler::currentSubProcess()"
                      << Exception::runerror;
  return theSubProcess;
}

inline bool ShowerHandler::FirstInt() const{
  return ( theSubProcess == 
	   eventHandler()->currentCollision()->primarySubProcess() );
}

inline tReweighterPtr ShowerHandler::reweighter () const {
  return _reweighter;
}

}
