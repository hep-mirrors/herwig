// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the InsideRangeShowerEvolver class.
//

namespace Herwig {

inline InsideRangeShowerEvolver::InsideRangeShowerEvolver() {}


inline InsideRangeShowerEvolver::InsideRangeShowerEvolver(const InsideRangeShowerEvolver & x )
  : Pythia7::HandlerBase(x),
	     _pointerPartnerFinder( x._pointerPartnerFinder ),
             _pointerForwardShowerEvolver( x._pointerForwardShowerEvolver ),
             _pointerBackwardShowerEvolver( x._pointerBackwardShowerEvolver ),
             _pointerKinematicsReconstructor( x._pointerKinematicsReconstructor ),
             _pointerSplittingGenerator( x._pointerSplittingGenerator ),
	     _mapShowerHardJets( x._mapShowerHardJets ),
	     _collecMapShowerDecayJets( x._collecMapShowerDecayJets )
 {}

//-------------------------------------------------------------------------

inline IBPtr InsideRangeShowerEvolver::clone() const {
  return new_ptr(*this);
}

inline IBPtr InsideRangeShowerEvolver::fullclone() const {
  return new_ptr(*this);
}

inline void InsideRangeShowerEvolver::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void InsideRangeShowerEvolver::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
}

inline void InsideRangeShowerEvolver::dofinish() {
  Pythia7::HandlerBase::dofinish();
}

inline void InsideRangeShowerEvolver::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}

inline IVector InsideRangeShowerEvolver::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
