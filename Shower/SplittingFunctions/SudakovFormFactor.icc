// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SudakovFormFactor class.
//

namespace Herwig {

inline SudakovFormFactor::SudakovFormFactor()
  : _q(), _z( 0.0 ), _phi(0.0), _pdfmax(35.0) {}

inline SudakovFormFactor::SudakovFormFactor(const SudakovFormFactor & x)
  : Interfaced(x),_q(x._q), _z(x._z), _phi(x._phi), _splittingFn(x._splittingFn),
    _alpha(x._alpha), _pdfmax(x._pdfmax) {}

inline IBPtr SudakovFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr SudakovFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline void SudakovFormFactor::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SudakovFormFactor::doinit() throw(InitException) {
  Interfaced::doinit();
}

inline void SudakovFormFactor::dofinish() {
  Interfaced::dofinish();
}

inline void SudakovFormFactor::doinitrun() {
  Interfaced::doinitrun();
}

inline void SudakovFormFactor::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Interfaced::rebind(trans);
}

inline IVector SudakovFormFactor::getReferences() {
  IVector ret = Interfaced::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline tSplittingFnPtr SudakovFormFactor::splittingFn() const { return _splittingFn; }

inline tShowerAlphaPtr SudakovFormFactor::alpha() const { return _alpha; }

inline ShowerIndex::InteractionType  SudakovFormFactor::interactionType() {
  return _splittingFn->interactionType();}

inline double SudakovFormFactor::z() const { return _z; }

inline double SudakovFormFactor::phi() const { return _phi; }

inline Energy SudakovFormFactor::qtilde() const { return _q; }

inline Energy SudakovFormFactor::resScale() const 
{return _variables->cutoffQScale(_splittingFn->interactionType());}

inline Energy SudakovFormFactor::kinScale() const { return _variables->kinScale(); }
}
