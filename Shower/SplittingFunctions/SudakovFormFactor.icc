// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SudakovFormFactor class.
//

namespace Herwig {

inline SudakovFormFactor::SudakovFormFactor()
  : _q(), _z( 0.0 ), _phi(0.0), _pdfmax(35.0)
{}

inline IBPtr SudakovFormFactor::clone() const {
  return new_ptr(*this);
}

inline IBPtr SudakovFormFactor::fullclone() const {
  return new_ptr(*this);
}

inline tSplittingFnPtr SudakovFormFactor::splittingFn() const { return _splittingFn; }

inline tShowerAlphaPtr SudakovFormFactor::alpha() const { return _alpha; }

inline ShowerIndex::InteractionType  SudakovFormFactor::interactionType() const {
  return _splittingFn->interactionType();
}

inline double SudakovFormFactor::z() const { return _z; }

inline double SudakovFormFactor::phi() const { return _phi; }

inline Energy SudakovFormFactor::qtilde() const { return _q; }

inline Energy SudakovFormFactor::resScale() const 
{return _variables->cutoffQScale(_splittingFn->interactionType());}

inline Energy SudakovFormFactor::kinScale() const { return _variables->kinScale(); }

inline Energy SudakovFormFactor::pT() const {return _pt;}

inline double SudakovFormFactor::guessz () const {
  double lower = _splittingFn->integOverP(_zlimits.first);
  return _splittingFn->invIntegOverP
    (lower + UseRandom::rnd()*(_splittingFn->integOverP(_zlimits.second) - lower));
}

inline bool SudakovFormFactor::SplittingFnVeto(const double z, const Energy2 t) const {
  return UseRandom::rnd()>_splittingFn->ratioP(z, t,_ids);
}

inline bool SudakovFormFactor::alphaSVeto(const Energy2 pt2) const {
  return UseRandom::rnd() > _alpha->ratio(pt2);
}

inline void SudakovFormFactor::setShowerVariables(ShowerVarsPtr in){_variables=in;}

inline Energy2 SudakovFormFactor::guesst(Energy2 t1,unsigned int iopt) const {
  double c = 1./((_splittingFn->integOverP(_zlimits.second) -
		  _splittingFn->integOverP(_zlimits.first))* 
		 _alpha->overestimateValue()/(2.*pi));
  assert(iopt<=2);
  if(iopt==0)
    {return t1*pow(UseRandom::rnd(),
		   c/_variables->finalStateRadiationEnhancementFactor());}
  else if(iopt==1) {
    if(_ids[1]==_ids[2]) c*=2.;
    return t1*pow(UseRandom::rnd(),
		  c/_pdfmax/_variables->initialStateRadiationEnhancementFactor());
  }
  else
    {return t1/pow(UseRandom::rnd(),
		   c/_variables->initialStateRadiationEnhancementFactor());}
}

}
