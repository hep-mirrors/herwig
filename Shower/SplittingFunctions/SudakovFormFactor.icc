// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SudakovFormFactor class.
//

namespace Herwig {

inline SudakovFormFactor::SudakovFormFactor() : _pdfmax(35.0), _z( 0.0 ), 
						_phi(0.0), _pT(0.)
{}

inline tSplittingFnPtr SudakovFormFactor::splittingFn() const { 
  return _splittingFn; 
}

inline tShowerAlphaPtr SudakovFormFactor::alpha() const { 
  return _alpha; 
}

inline tShowerVarsPtr SudakovFormFactor::showerVariables() const {
  return _variables;
}

inline Energy SudakovFormFactor::kinScale() const {
  return _variables->kinScale(); 
}

inline Energy SudakovFormFactor::resScale() const {
  return _variables->cutoffQScale(_splittingFn->interactionType());
}

inline ShowerIndex::InteractionType  SudakovFormFactor::interactionType() const {
  return _splittingFn->interactionType();
}

inline double SudakovFormFactor::z() const { 
  return _z; 
}

inline double SudakovFormFactor::phi() const {
  return _phi; 
}

inline Energy SudakovFormFactor::pT() const {
  return _pT;
}

inline void SudakovFormFactor::z(double in) {
  _z=in;
}
				        
inline void SudakovFormFactor::phi(double in) {
  _phi=in;
}

inline void SudakovFormFactor::pT(Energy in) {
  _pT=in;
}

inline void SudakovFormFactor::setShowerVariables(ShowerVarsPtr in) {
  _variables=in;
}

inline pair<double,double> SudakovFormFactor::zLimits() const {
  return _zlimits;
}

inline void SudakovFormFactor::zLimits(pair<double,double> in) {
  _zlimits=in;
}

inline double SudakovFormFactor::guessz () const {
  double lower = _splittingFn->integOverP(_zlimits.first);
  return _splittingFn->invIntegOverP
    (lower + UseRandom::rnd()*(_splittingFn->integOverP(_zlimits.second) - lower));
}
 
inline bool SudakovFormFactor::SplittingFnVeto(const Energy2 t, 
					       const IdList &ids,
					       const bool mass) const {
  return UseRandom::rnd()>_splittingFn->ratioP(_z, t, ids,mass);
}

inline bool SudakovFormFactor::alphaSVeto(const Energy2 pt2) const {
  return UseRandom::rnd() > _alpha->ratio(pt2);
}

inline Energy2 SudakovFormFactor::guesst(Energy2 t1,unsigned int iopt) const {
  double c = 1./((_splittingFn->integOverP(_zlimits.second) -
		  _splittingFn->integOverP(_zlimits.first))* 
		 _alpha->overestimateValue()/(2.*pi));
  assert(iopt<=2);
  if(iopt==0)
    {return t1*pow(UseRandom::rnd(),
		   c/_variables->finalStateRadiationEnhancementFactor());}
  else if(iopt==1)
    {return t1*pow(UseRandom::rnd(),
		   c/_pdfmax/_variables->initialStateRadiationEnhancementFactor());}
  else
    {return t1/pow(UseRandom::rnd(),
		   c/_variables->initialStateRadiationEnhancementFactor());}
}

}
