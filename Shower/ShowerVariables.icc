// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ShowerVariables class.
//

namespace Herwig {

inline IBPtr ShowerVariables::clone() const {
  return new_ptr(*this);
}

inline IBPtr ShowerVariables::fullclone() const {
  return new_ptr(*this);
}

inline Energy ShowerVariables::
cutoffMassScale(const ShowerIndex::InteractionType interaction) const {
  Energy cutoff = Energy();
  switch ( interaction ) {
  case ShowerIndex::QCD : cutoff = _cutoffQCDMassScale; break; 
  case ShowerIndex::QED : cutoff = _cutoffQEDMassScale; break; 
  case ShowerIndex::EWK : cutoff = _cutoffEWKMassScale; break; 
  default: throw Exception() << "Invalid ShowerIndex in "
			     << "ShowerVariables::cutoffMassScale()" 
			     << Exception::abortnow;
  }
  return cutoff;
}

inline Energy ShowerVariables::
cutoffQScale(const ShowerIndex::InteractionType interaction) const {
  return convertMassScaleToQScale( cutoffMassScale( interaction ) );
}

inline void ShowerVariables::doinit() throw(InitException) {
  Interfaced::doinit();
  // copy particles to decay before showering from input vector to the 
  // set used in the simulation
  _particlesDecayInShower.insert(_inputparticlesDecayInShower.begin(),
				 _inputparticlesDecayInShower.end());
}
  
inline bool ShowerVariables::decayInShower(const long id) const {
  return ( _particlesDecayInShower.find( abs(id) ) != 
	   _particlesDecayInShower.end() ); 
}

inline Energy ShowerVariables::convertMassScaleToQScale(const Energy inputMassScale) const {
  // ***LOOKHERE***: convert on the fly:  Mass Scale -> Q Scale
  return inputMassScale * 1.0;   // To be changed
}

inline Energy ShowerVariables::convertQScaleToMassScale(const Energy inputQScale) const {
  // ***LOOKHERE***: convert on the fly:  Q scale -> Mass scale
  return inputQScale * 1.0;   // To be changed
}

inline Energy ShowerVariables::kinScale() const {
  return _kinCutoffScale;
}

inline bool ShowerVariables::MECOn() const {
  return _meCorrMode > 0; 
}

inline bool ShowerVariables::hardMEC() const {
  return (_meCorrMode == 1 || _meCorrMode == 2); 
}

inline bool ShowerVariables::softMEC() const {
  return (_meCorrMode == 1 || _meCorrMode > 2); 
}

inline tcPDFPtr ShowerVariables::currentPDF() const {
  return _pdf;
}

inline void ShowerVariables::setCurrentPDF(tcPDFPtr in) {
  _pdf=in;
}

inline Ptr<BeamParticleData>::const_pointer 
ShowerVariables::beamParticle() const {
  return _beam;
}

inline void 
ShowerVariables::setBeamParticle(Ptr<BeamParticleData>::const_pointer in) {
  _beam=in;
}

inline Energy ShowerVariables::kinematicCutOff(Energy scale,Energy mq) const {
  return max((scale -_a*mq)/_b,_c);
}

inline Energy ShowerVariables::gluonMass() const {return _gluonMass;}

inline void ShowerVariables::gluonMass(Energy in){_gluonMass=in;}

inline GlobalParametersPtr ShowerVariables::globalParameters() const
{return _globalParameters;}

inline void ShowerVariables::setGluonMass(bool final)
{
  if(_globalParameters->isThePEGStringFragmentationON())
    _gluonMass=0.;
  else
    _gluonMass=_globalParameters->effectiveGluonMass();
}

inline double ShowerVariables::initialStateRadiationEnhancementFactor() const {
  return _initialenhance;
}

inline double ShowerVariables::finalStateRadiationEnhancementFactor() const {
  return _finalenhance;
}

inline void ShowerVariables::initialStateRadiationEnhancementFactor(double in) {
  _initialenhance=in;
}

inline void ShowerVariables::finalStateRadiationEnhancementFactor(double in) {
  _finalenhance=in;
}

inline unsigned int ShowerVariables::finalFinalConditions() const {
  return _finalFinalConditions;
}

inline unsigned int ShowerVariables::initialFinalDecayConditions() const {
  return _initialFinalDecayConditions;
}

inline bool ShowerVariables::useMEForT2() const {
  return _useMEForT2;
}

}
