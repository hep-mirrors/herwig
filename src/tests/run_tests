#!/usr/bin/env python
import sys, time, re
import subprocess


chisq_pattern = re.compile('^Chi Square = ([\d.]*) for (\d*) degrees')

instr_pattern = re.compile('^==.*== Collected : (\d*)')


def untimed_call(command, outfile=file('/dev/null')):
    retval = subprocess.call(command, shell=True, 
                             stdout=outfile, stderr=outfile)
    if retval != 0:
        raise Exception

def timed_call(command, outfile=file('/dev/null')):
    t0 = time.time()   
    retval = subprocess.call(command, shell=True, 
                             stdout=outfile, stderr=outfile)
    dt = time.time() - t0
    if retval != 0:
        raise Exception
    return dt

def write_data_file(filename,value):
    text = 'YVALUE = %s\n' % value
    f = open(filename,'w')
    f.write(text)
    f.close()


class Run:
    def readcmd(self):
        return '%s read %s.in -r %s' % (herwig,self.name,rpopath)

    def runcmd(self):
        return '%s run %s.run -N%s' % (herwig,self.name,self.num_events)

    def valgrindcmd(self):
        return 'valgrind --tool=callgrind ' + self.runcmd()

    def __init__(self,name,N):
        self.name = name
        self.num_events = N
        self.runtime = None
        self.chisq = None
 
    def run(self,valgrind=False):
        print self.readcmd()
        untimed_call(self.readcmd())
        if self.runtime is not None:
            return self.runtime
        if valgrind:
            print self.valgrindcmd()
            filename = self.name + '.tmp'
            out = open(filename,'w')
            untimed_call(self.valgrindcmd(), out)
            out.close()
            f = open(filename)
            for line in f:
                m = instr_pattern.match(line)
                if m:
                    self.runtime = float(m.group(1))/1.0e9
                    break
            f.close()
        else:
            print self.runcmd()
            untimed_call(self.runcmd())
            self.runtime = None
        return self.runtime

    def write_data(self):
        if self.runtime is not None:
            write_data_file(self.name+'.time',self.runtime)
        if self.chisq is not None:
            write_data_file(self.name+'.chisq',self.chisq)

    def calc_chisq(self):
        if self.runtime is not None:
            sumchi = sumdof = 0
            logfile = open(self.name+'.log','r')
            for line in logfile:
                m = chisq_pattern.match(line)
                if m:
                    sumchi += float(m.group(1))
                    sumdof += int(m.group(2))
            logfile.close()
        if sumdof is not 0:
            self.chisq = sumchi / sumdof


if len(sys.argv) != 3:
    print >>sys.stderr,'Expected two arguments'
    print >>sys.stderr,'Usage:',sys.argv[0],'<path to herwig> <path to rpo>'
    sys.exit(1)

herwig = sys.argv[1]
rpopath = sys.argv[2]

N = 10

runlist = [ Run('CHISQ',10000*N), 
            Run('DIS',100*N), 
            Run('ILC',100*N),
            Run('LEP',100*N),
            Run('TVT',N),
            Run('LHC',N)
            ]



import Queue as qu
from threading import Thread

q = qu.Queue()


def worker():
    while True:
        r = q.get()
        print 'Starting',r.name
        if r.name is 'CHISQ':
            r.run(valgrind=False)
            r.calc_chisq()
        else:
            r.run(valgrind=True)

        r.write_data()
        print 'Finished',r.name
        q.task_done()



for run in runlist:
    q.put(run)


for i in range(4):
    t = Thread(target=worker)
    t.setDaemon(True)
    t.start()


q.join()

