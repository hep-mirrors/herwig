// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the WaveFunctionBase class.
//
// Author: Peter Richardson
//

namespace Herwig {
namespace Helicity {
using namespace ThePEG;

// default constructor
inline WaveFunctionBase::WaveFunctionBase()
{_momentum=Lorentz5Momentum();}
// subscript operator to access momentum
inline Energy WaveFunctionBase::operator [](int i) const {return _momentum[i];}
// Get components of the momentum
// get the x component of the momentum
inline Energy WaveFunctionBase::px() const{return _momentum.px();}
// get the y component of the momentum
inline Energy WaveFunctionBase::py() const{return _momentum.py();}
// get the z component of the momentum
inline Energy WaveFunctionBase::pz() const{return _momentum.pz();}
// get the energy
inline Energy WaveFunctionBase::e() const{return _momentum.e();}
// get the mass
inline Energy WaveFunctionBase::mass() const{return _momentum.mass();}
// get offshell mass squared
inline Energy2 WaveFunctionBase::m2() const{return _momentum.m2();}
// Set components of the momentum
// set the x component of the momentum
inline void WaveFunctionBase::setPx(Energy x){_momentum.setX(x);}
// set the y component of the momentum
inline void WaveFunctionBase::setPy(Energy y){_momentum.setY(y);}
// set the z component of the momentum
inline void WaveFunctionBase::setPz(Energy z){_momentum.setZ(z);}
// set the energy
inline void WaveFunctionBase::setE(Energy t){_momentum.setT(t);}
// set the mass
inline void WaveFunctionBase::setMass(Energy m){_momentum.setMass(m);}
// Set 5 momentum
inline void WaveFunctionBase::setMomentum(const Lorentz5Momentum & pin)
{
  if(_dir==outgoing){_momentum=Lorentz5Momentum(-pin.x(),-pin.y(),-pin.z(),
					 -pin.t(),pin.mass());}
  else if(_dir==incoming||_dir==intermediate){_momentum=pin;}
}
// set all components of momentum
inline void WaveFunctionBase::setMomentum(Energy x, Energy y, 
				     Energy z ,Energy t ,Energy m)
{
  if(_dir==1){_momentum=Lorentz5Momentum(-x,-y,-z,-t,m);}
  else if(_dir==-1||_dir==0){_momentum=Lorentz5Momentum(x,y,z,t,m);}
}
// set 4-momentum components 
inline void WaveFunctionBase::setMomentum(Energy x, Energy y,
				     Energy z ,Energy t)
{
  if(_dir==1){_momentum=Lorentz5Momentum(-x,-y,-z,-t);}
  else if(_dir==-1||_dir==0){_momentum=Lorentz5Momentum(x,y,z,t);}
}
// set 4-momentum 
inline void WaveFunctionBase::setMomentum(LorentzVector p)
{
  if(_dir==1){_momentum=Lorentz5Momentum(-p);}
  else if(_dir==-1||_dir==0){_momentum=Lorentz5Momentum(p);}
}
// set mass zero momentum
inline void WaveFunctionBase::setMomentum(Energy m)
{
  _momentum=Lorentz5Momentum(m);
  if(_dir==1){_momentum.setT(-_momentum.t());}
}
// set 4 momentum and mass
inline void WaveFunctionBase::setMomentum(LorentzVector p,Energy m)
{
  if(_dir==1){_momentum=Lorentz5Momentum(-p,m);}
  else if(_dir==-1||_dir==0){_momentum=Lorentz5Momentum(p,m);}
  else
    {
      cerr << "WaveFunction must be either incoming(-1) or outgoing(1)" << endl;
      _momentum=Lorentz5Momentum();
    }
}
// zero the momentum
inline void WaveFunctionBase::setMomentum()
{_momentum=Lorentz5Momentum();}
// set the particle pointer
inline void WaveFunctionBase::setParticle(const tcPDPtr & in)
{
  if(_dir==-1)
    {
      tcPDPtr anti((in->CC()));
      if(anti){_particle=anti;}
      else{_particle=in;}
    }
  else
    {_particle=in;}
}
inline int WaveFunctionBase::id()
{int it=_particle->id(); return it;}
inline PDT::Spin WaveFunctionBase::iSpin() {return _particle->iSpin();}
// get the particle pointer
inline const tcPDPtr & WaveFunctionBase::getParticle() const {return _particle;}
inline void WaveFunctionBase::checkParticle(const tcPDPtr & in){setParticle(in);}
// destructor
inline WaveFunctionBase::~WaveFunctionBase(){;}
// direction of particle
inline Direction WaveFunctionBase::direction(){return _dir;}
inline void WaveFunctionBase::direction(Direction in){_dir=in;}
inline const Lorentz5Momentum & WaveFunctionBase::getMomentum() const {return _momentum;}

}
}

