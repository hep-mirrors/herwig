// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ScalarWaveFunction class.
//
// Author: Peter Richardson
//
namespace Herwig {
namespace Helicity {
using namespace ThePEG;

// use a 5-momentum
inline ScalarWaveFunction::ScalarWaveFunction(const Lorentz5Momentum &p,
					      const tcPDPtr & part, Complex wave)
{
  direction(intermediate);
  setMomentum(p);
  checkParticle(part);
  _wf=wave;
}

// use a 5 momentum
inline ScalarWaveFunction::ScalarWaveFunction(const Lorentz5Momentum & p,
					      const tcPDPtr & part,Complex wave,
					      Direction dir)  
{
  direction(dir);
  setMomentum(p);
  _wf=wave;
  checkParticle(part);
}

// set all components of momentum
inline ScalarWaveFunction::ScalarWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part, Complex wave,
					      Direction dir) 
{
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  _wf=wave;
  checkParticle(part);
}

// set 4-momentum components 
inline ScalarWaveFunction::ScalarWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part, Complex wave,
					      Direction dir)
{
  direction(dir);
  setMomentum(px,py,pz,ee);
  _wf=wave;
  checkParticle(part);
}

// set 4-momentum
inline ScalarWaveFunction::ScalarWaveFunction(LorentzVector pin,
					      const tcPDPtr & part, Complex wave,
					      Direction dir)
{
  direction(dir);
  setMomentum(pin);
  _wf=wave;
  checkParticle(part);
}

// set mass zero momentum	
inline ScalarWaveFunction::ScalarWaveFunction(Energy mm,
					      const tcPDPtr & part, Complex wave,
					      Direction dir)
{
  direction(dir);
  setMomentum(mm);
  _wf=wave;
  checkParticle(part);
}

// set 4 momentum and mass
inline ScalarWaveFunction::ScalarWaveFunction(LorentzVector pin,Energy mm,
					      const tcPDPtr & part, Complex wave,
					      Direction dir)
{
  direction(dir);
  setMomentum(pin,mm); 
  _wf=wave; 
  checkParticle(part);
}

// default constructors (set the momentum and zero the Wavefunction)

// use a 5 momentum
inline ScalarWaveFunction::ScalarWaveFunction(Lorentz5Momentum p,
					      const tcPDPtr & part,Direction dir)
{
  direction(dir);
  setMomentum(p);
  _wf=0.;
  checkParticle(part);
}

// set all components of momentum
inline ScalarWaveFunction::ScalarWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part,Direction dir)
{
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  _wf=0.; 
  checkParticle(part);
}

// set 4-momentum components 
inline ScalarWaveFunction::ScalarWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part,Direction dir)
{
  direction(dir);
  setMomentum(px,py,pz,ee);
  _wf=0.;
  checkParticle(part);
}

// set 4-momentum 
inline ScalarWaveFunction::ScalarWaveFunction(LorentzVector pin,
					      const tcPDPtr & part,Direction dir) 
{
  direction(dir);
  setMomentum(pin);
  _wf=0.; 
  checkParticle(part);
}

// set mass zero momentum
inline ScalarWaveFunction::ScalarWaveFunction(Energy mm,
					      const tcPDPtr & part,Direction dir)
{
  direction(dir);
  setMomentum(mm);
  _wf=0.;
  checkParticle(part);
}

// set 4 momentum and mass
inline ScalarWaveFunction::ScalarWaveFunction(LorentzVector pin,Energy mm,
					      const tcPDPtr & part,Direction dir) 
{
  direction(dir);
  setMomentum(pin,mm);
  _wf=0.;
  checkParticle(part);
}

// default constructor
inline ScalarWaveFunction::ScalarWaveFunction()
{
  direction(intermediate);
  setMomentum();
  _wf=0.;
}

// return the wavefunction
inline Complex ScalarWaveFunction::Wave() const{return _wf;}

// check the particle type
inline void ScalarWaveFunction::checkParticle(const tcPDPtr & in)
{
  setParticle(in);
  if(iSpin()!=1)
    {ThePEG::Helicity::HelicityConsistencyError() 
	<< "Calculating Scalar WaveFunction for non-scalar Particle " 
	<< iSpin() << Exception::abortnow;}
}

// Assignment. 
inline ScalarWaveFunction & ScalarWaveFunction::operator = (const ScalarWaveFunction & w)
{
  setPx(w.px());setPy(w.py());setPz(w.pz());setE(w.e());setMass(w.mass());
  _wf=w.Wave();
  setParticle(w.getParticle());
  return *this;
}

// destructor
ScalarWaveFunction::~ScalarWaveFunction(){;}

// subscript operator
Complex inline ScalarWaveFunction::operator ()(int i) const
{
  if(i!=0)
    {ThePEG::Helicity::HelicityConsistencyError() 
	<< "ScalarWaveFunction requested for non-zero index" << Exception::abortnow;
    return 0.;}
  return _wf;
}

// Set components by index.
inline Complex & ScalarWaveFunction::operator () (int)
{
  return _wf;
}

// reset functions

// reset the momentum, particle type and direction
inline void ScalarWaveFunction::reset(const Lorentz5Momentum & pin, const tcPDPtr & part,
				 Direction dir)
{
  direction(dir);
  checkParticle(part);
  setMomentum(pin);
}

// reset the momentum and direction
inline void ScalarWaveFunction::reset(const Lorentz5Momentum & pin, Direction dir)
{
  direction(dir);
  setMomentum(pin);
}

// reset the momentum
inline void ScalarWaveFunction::reset(const Lorentz5Momentum & pin)
{
  setMomentum(pin);
}

// reset the wavefunction
inline void ScalarWaveFunction::reset(Complex wf){_wf=wf;}

// reset the particle type and direction
inline void ScalarWaveFunction::reset(const tcPDPtr & part,Direction dir)
{
  direction(dir);
  checkParticle(part);
}

// reset the partcle type
inline void ScalarWaveFunction::reset(const tcPDPtr & part)
{
  checkParticle(part);
}	

}
}
