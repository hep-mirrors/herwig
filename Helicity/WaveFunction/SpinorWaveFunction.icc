// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SpinorWaveFunction class.
//
// Author: Peter Richardson
//

namespace Herwig {
using ThePEG::Helicity::LorentzSpinor;
namespace Helicity {
using namespace ThePEG;

// constructors

// use a 5-momentum and specify all components (specifiy Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(const Lorentz5Momentum &p,
					      const tcPDPtr & part,
					      Complex s1, Complex s2,
					      Complex s3, Complex s4, DiracRep dirac) 
{
  direction(intermediate);
  setMomentum(p);
  checkParticle(part);
  _wf = LorentzSpinor(s1,s2,s3,s4,dirac);
}	

// use a 5-momentum and a LorentzSpinor
inline SpinorWaveFunction::SpinorWaveFunction(const Lorentz5Momentum & p,
					      const tcPDPtr & part,
					      LorentzSpinor & inspin)
{
  direction(intermediate);
  setMomentum(p);
  checkParticle(part); 
  _wf=inspin;
}

// use a 5-momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(const Lorentz5Momentum & p,
					      const tcPDPtr & part,int ihel,
					      Direction dir, DiracRep dirac) 
{
  direction(dir);
  setMomentum(p);
  checkParticle(part);
  calculateWaveFunction(ihel,dirac);
}

// set all components of momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part, int ihel,
					      Direction dir, DiracRep dirac) 
{
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  checkParticle(part); 
  calculateWaveFunction(ihel,dirac);
}

// set 4-momentum components (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part, int ihel,
					      Direction dir, DiracRep dirac)
{
  direction(dir);
  setMomentum(px,py,pz,ee);
  checkParticle(part);
  calculateWaveFunction(ihel,dirac);
}

// set 4-momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(LorentzVector pin, const tcPDPtr & part,
					      int ihel, Direction dir, DiracRep dirac)
{
  direction(dir);
  setMomentum(pin);
  checkParticle(part);
  calculateWaveFunction(ihel,dirac);
}

// set mass zero momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy mm, const tcPDPtr & part,
					       int ihel, Direction dir, DiracRep dirac)
{
  direction(dir);
  setMomentum(mm);
  checkParticle(part);
  calculateWaveFunction(ihel,dirac);
}

// set 4 momentum and mass (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(LorentzVector pin,Energy mm,
					      const tcPDPtr & part, int ihel,
					      Direction dir, DiracRep dirac)
{
  direction(dir);
  setMomentum(pin,mm);
  checkParticle(part);
  calculateWaveFunction(ihel,dirac);
}

// default constructors (set the momentum and zero the Wavefunction)

// use a 5 momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Lorentz5Momentum p, const tcPDPtr & part,
					      Direction dir, DiracRep dirac)
{
  direction(dir);
  setMomentum(p);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// set all components of momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee, Energy mm,
					      const tcPDPtr & part, Direction dir,
					      DiracRep dirac)
{
  direction(dir);
  setMomentum(px,py,pz,ee,mm);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// set 4-momentum components (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy px, Energy py,
					      Energy pz, Energy ee,
					      const tcPDPtr & part, Direction dir,
					      DiracRep dirac)
{
  direction(dir);
  setMomentum(px,py,pz,ee);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// set 4-momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(LorentzVector pin, const tcPDPtr & part,
					      Direction dir, DiracRep dirac) 
{
  direction(dir);
  setMomentum(pin);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// set mass zero momentum (specify Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(Energy mm,const tcPDPtr & part,
					      Direction dir,DiracRep dirac)
{
  direction(dir);
  setMomentum(mm);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// set 4 momentum and mass
inline SpinorWaveFunction::SpinorWaveFunction(LorentzVector pin,Energy mm,
					      const tcPDPtr & part, Direction dir, 
					      DiracRep dirac) 
{
  direction(dir);
  setMomentum(pin,mm);
  checkParticle(part);
  zeroWaveFunction(dirac);
}

// default constructor (specfiy Dirac representation)
inline SpinorWaveFunction::SpinorWaveFunction(DiracRep dirac)
{
  direction(intermediate);
  setMomentum();
  zeroWaveFunction(dirac);
}

// descructor
inline SpinorWaveFunction::~SpinorWaveFunction(){;}

// subscript operator
inline Complex SpinorWaveFunction::operator ()(int i) const
{
  if(i<0 || i>3)
    {std::cerr << "SpinorWaveFunction requested for invalid index" << std::endl;
    return 0.;}
  return _wf[i];
}
// Set components by index.
inline Complex & SpinorWaveFunction::operator () (int i)
{
  static Complex dummy;
  if(i>=0 &&i<=3)
    {return _wf(i);}
  else
    {cerr << "Invalid index " << i << " called for SpinorWaveFunction" << endl;
    return dummy;}
}

// Assignment. 
inline SpinorWaveFunction & SpinorWaveFunction::operator = (const SpinorWaveFunction & w)
{
  setPx(w.px());setPy(w.py());setPz(w.pz());setE(w.e());setMass(w.mass());
  _wf=w._wf;
  setParticle(w.getParticle());
  return *this;
}

// return the wavefunction as a LorentzSpinor
inline LorentzSpinor SpinorWaveFunction::Wave() const{return _wf;}

// Get components
inline Complex SpinorWaveFunction::s1() const {return _wf.s1();}
inline Complex SpinorWaveFunction::s2() const {return _wf.s2();}
inline Complex SpinorWaveFunction::s3() const {return _wf.s3();}
inline Complex SpinorWaveFunction::s4() const {return _wf.s4();}

// Set components
inline void SpinorWaveFunction::setS1(Complex in){_wf.setS1(in);}
inline void SpinorWaveFunction::setS2(Complex in){_wf.setS2(in);}
inline void SpinorWaveFunction::setS3(Complex in){_wf.setS3(in);}
inline void SpinorWaveFunction::setS4(Complex in){_wf.setS4(in);}


// reset functions

// momentum, particle type and direction
inline void SpinorWaveFunction::reset(const Lorentz5Momentum & pin, const tcPDPtr & part,
				      Direction dir)
{
  direction(dir);
  checkParticle(part);
  setMomentum(pin);
}

// reset momentum and particle type
inline void SpinorWaveFunction::reset(const Lorentz5Momentum & pin, Direction dir)
{
  direction(dir);
  setMomentum(pin);
}

// reset momentum
inline void SpinorWaveFunction::reset(const Lorentz5Momentum & pin)
{
  setMomentum(pin);
}

// reset the helicity (calculates the new spinor (specify Dirac representation)
inline void SpinorWaveFunction::reset(int ihel,DiracRep dirac)
{calculateWaveFunction(ihel,dirac);}

// reset the particle type and direction
inline void SpinorWaveFunction::reset(const tcPDPtr & part,Direction dir)
{
  direction(dir);
  checkParticle(part);
}

// reset the particle type
inline void SpinorWaveFunction::reset(const tcPDPtr & part)
{checkParticle(part);}	

// zero the wavefunction (set specify Dirac representation)
inline void SpinorWaveFunction::zeroWaveFunction(DiracRep dirac)
{_wf=LorentzSpinor(dirac);}

// check the particles
inline void SpinorWaveFunction::checkParticle(const tcPDPtr & in)
{
  setParticle(in);
  if(iSpin()!=2)
    {cerr << "Calculating Spinor WaveFunction for non-spin 1/2 Particle" << endl;}
}

}
}
