// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SMFFPVertex class.
//
namespace Herwig{
namespace Helicity {
using namespace ThePEG;

inline SMFFPVertex::SMFFPVertex() 
{
  // zero the couplings (will be set in doinit)
  for(int ix=0;ix<17;++ix){_charge[ix]=0.;};_q2last=0.;_couplast=0.;
  // PDG codes for the particles
  vector<int> first,second,third;
  // the quarks
  for(unsigned int ix=1;ix<7;++ix)
    {first.push_back(-ix);second.push_back(ix);third.push_back(22);}
  // the leptons
  for(unsigned int ix=11;ix<17;++ix)
    {first.push_back(-ix);second.push_back(ix);third.push_back(22);}
  setList(first,second,third);
}

inline SMFFPVertex::SMFFPVertex(const SMFFPVertex & x)
  : FFVVertex(x), _theSM(x._theSM), _couplast(x._couplast),
    _q2last(x._q2last)
{for(int ix=0;ix<17;++ix){_charge[ix]=x._charge[ix];}}

inline IBPtr SMFFPVertex::clone() const {
  return new_ptr(*this);
}

inline IBPtr SMFFPVertex::fullclone() const {
  return new_ptr(*this);
}

inline void SMFFPVertex::doupdate() throw(UpdateException) {
  FFVVertex::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SMFFPVertex::doinit() throw(InitException) {
  for(int ix=1;ix<4;++ix)
    {
      _charge[2*ix-1]  = (_theSM->ed());
      _charge[2*ix ]   = (_theSM->eu());
      _charge[2*ix+9 ] = (_theSM->ee());
      _charge[2*ix+10] = (_theSM->enu());
    }
  _couplast = 0.;
  _q2last=0.;
  FFVVertex::doinit();
}

inline void SMFFPVertex::dofinish() {
  FFVVertex::dofinish();
}

inline void SMFFPVertex::doinitrun() {
  FFVVertex::doinitrun();
}

inline void SMFFPVertex::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  FFVVertex::rebind(trans);
}

inline IVector SMFFPVertex::getReferences() {
  IVector ret = FFVVertex::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
}
