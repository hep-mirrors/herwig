// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SMGGGGVertex class.
//
namespace Herwig {
namespace Helicity {
using namespace ThePEG;

inline SMGGGGVertex::SMGGGGVertex() 
{
  // particles
  vector<int> first,second,third,fourth;
  first.push_back(21);second.push_back(21);
  third.push_back(21);fourth.push_back(21);
  setList(first,second,third,fourth);
  // couplings
  _couplast=0.;_q2last=0.;
}

inline SMGGGGVertex::SMGGGGVertex(const SMGGGGVertex & x)
  : VVVVVertex(x), _theSM(x._theSM) {}

inline IBPtr SMGGGGVertex::clone() const {
  return new_ptr(*this);
}

inline IBPtr SMGGGGVertex::fullclone() const {
  return new_ptr(*this);
}

inline void SMGGGGVertex::doupdate() throw(UpdateException) {
  VVVVVertex::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SMGGGGVertex::doinit() throw(InitException) {
  VVVVVertex::doinit();
}

inline void SMGGGGVertex::dofinish() {
  VVVVVertex::dofinish();
}

inline void SMGGGGVertex::doinitrun() {
  VVVVVertex::doinitrun();
}

inline void SMGGGGVertex::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VVVVVertex::rebind(trans);
}

inline IVector SMGGGGVertex::getReferences() {
  IVector ret = VVVVVertex::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
}
