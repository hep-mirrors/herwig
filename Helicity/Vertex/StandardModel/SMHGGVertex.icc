// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SMHGGVertex class.
//

namespace Herwig {
  namespace Helicity {
    using namespace ThePEG;
    
    inline SMHGGVertex::SMHGGVertex() {
      //PDG codes for particles at vertices
      vector<int> first(1,25),second(1,21),third(1,21);
      setList(first,second,third);
      _couplast = 0.;
      _q2last = 0.;
      _mw = 0.;
      _sw =0.;
      _qopt = 0;
    }

    inline SMHGGVertex::SMHGGVertex(const SMHGGVertex & x)
      : SVVLoopVertex(x),_couplast(x._couplast),_q2last(x._q2last),
	_theSM(x._theSM),_mw(x._mw),_sw(x._sw) {}

    inline IBPtr SMHGGVertex::clone() const {
      return new_ptr(*this);
    }

    inline IBPtr SMHGGVertex::fullclone() const {
      return new_ptr(*this);
    }

    inline void SMHGGVertex::doupdate() throw(UpdateException) {
      SVVLoopVertex::doupdate();
      // First update base class.
      bool redo = touched();
      // redo if touched.
      //  UpdateChecker::check(aDependentMember, redo);
      // Update referenced objects on which this depends redo is set to true
      // if the dependent object is touched.
      //  for_each(ContainerOfDependencies, UpdateChecker(redo));
      // Update a container of references.
      //  for_each(MapOfDependencies, UpdateMapChecker(redo));
      // Update a map of references.
      if ( !redo ) return;
      // return if nothing has been touched. Otherwise do the actual update.
      //  touch()
      // Touch if anything has changed.
    }

    inline void SMHGGVertex::doinit() throw(InitException) {
      _theSM = dynamic_ptr_cast<Ptr<Herwig::StandardModel>
	::transient_pointer>(generator()->standardModel());
      _mw = getParticleData(ThePEG::ParticleID::Wplus)->mass();
      _sw = _theSM->sin2ThetaW();
      _sw = sqrt(_sw);
      SVVLoopVertex::doinit();
    }

    inline void SMHGGVertex::dofinish() {
      SVVLoopVertex::dofinish();
    }

    inline void SMHGGVertex::doinitrun() {
      SVVLoopVertex::doinitrun();
    }

    inline void SMHGGVertex::rebind(const TranslationMap & trans)
      throw(RebindException) {
      // dummy = trans.translate(dummy);
      SVVLoopVertex::rebind(trans);
    }

    inline IVector SMHGGVertex::getReferences() {
      IVector ret = SVVLoopVertex::getReferences();
      // ret.push_back(dummy);
      return ret;
    }
  }
}
