// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SMFFHVertex class.
//
namespace Herwig {
namespace Helicity {
using namespace ThePEG;

inline SMFFHVertex::SMFFHVertex() 
{
  // PDG codes for the particles
  vector<int> first,second,third;
  // the quarks
  for(unsigned int ix=1;ix<7;++ix)
    {first.push_back(-ix);second.push_back(ix);third.push_back(25);}
  // the leptons
  for(unsigned int ix=11;ix<17;++ix)
    {first.push_back(-ix);second.push_back(ix);third.push_back(25);}
  setList(first,second,third);
  // set up for the couplings
  _couplast=0.;_idlast=0;_q2last=0.;_masslast=0.;
  _mw=0.;_sw=0.;
}

inline SMFFHVertex::SMFFHVertex(const SMFFHVertex & x)
  : FFSVertex(x), _theSM(x._theSM), _couplast(x._couplast),
    _sw(x._sw), 
    _idlast(x._idlast), _q2last(x._q2last), _masslast(x._masslast), 
    _mw(x._mw) {;}

inline IBPtr SMFFHVertex::clone() const {
  return new_ptr(*this);
}

inline IBPtr SMFFHVertex::fullclone() const {
  return new_ptr(*this);
}

inline void SMFFHVertex::doupdate() throw(UpdateException) {
  FFSVertex::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SMFFHVertex::doinit() throw(InitException) {
  double sw2=_theSM->sin2ThetaW();
  _sw = sqrt(sw2);
  _mw= getParticleData(ThePEG::ParticleID::Wplus)->mass();
  FFSVertex::doinit();
}

inline void SMFFHVertex::dofinish() {
  FFSVertex::dofinish();
}

inline void SMFFHVertex::doinitrun() {
  FFSVertex::doinitrun();
}

inline void SMFFHVertex::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  FFSVertex::rebind(trans);
}

inline IVector SMFFHVertex::getReferences() {
  IVector ret = FFSVertex::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
}
