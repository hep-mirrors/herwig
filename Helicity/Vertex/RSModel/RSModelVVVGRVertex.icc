// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RSModelVVVGRVertex class.
//
namespace Herwig {
namespace Helicity {
using namespace ThePEG;

inline RSModelVVVGRVertex::RSModelVVVGRVertex() 
{
  vector<int> first,second,third,fourth;
  first.push_back(24);second.push_back(-24);third.push_back(22);fourth.push_back(39);
  first.push_back(24);second.push_back(-24);third.push_back(23);fourth.push_back(39);
  first.push_back(21);second.push_back(21);third.push_back(21);fourth.push_back(39);
  setList(first,second,third,fourth);
  _theKappa=0.;
  _couplast[0]=0.;
  _couplast[1]=0.;
 _q2last[0]=0.;
 _q2last[1]=0.;
 _zfact=0.;
}

inline RSModelVVVGRVertex::RSModelVVVGRVertex(const RSModelVVVGRVertex & x)
  : VVVTVertex(x), _theModel(x._theModel), _theKappa(x._theKappa), 
    _zfact(x._zfact)
{for(int ix=0;ix<2;++ix){_couplast[ix]=x._couplast[ix];_q2last[ix]=x._q2last[ix];}}

inline IBPtr RSModelVVVGRVertex::clone() const {
  return new_ptr(*this);
}

inline IBPtr RSModelVVVGRVertex::fullclone() const {
  return new_ptr(*this);
}

inline void RSModelVVVGRVertex::doinit() throw(InitException) {
  VVVTVertex::doinit();
  _zfact = sqrt((1.-_theModel->sin2ThetaW())/_theModel->sin2ThetaW());
  // set the graviton coupling 
  Ptr<Herwig::RSModel>::transient_const_pointer 
    hwRS=dynamic_ptr_cast<Ptr<Herwig::RSModel>::transient_const_pointer>(_theModel);
  if(hwRS){_theKappa=2./hwRS->lambda_pi();}
  else{throw InitException();}
}

}
}
