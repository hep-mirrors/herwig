// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the RSModelVVGRVertex class.
//

namespace Herwig {
namespace Helicity {
using namespace ThePEG;

inline RSModelVVGRVertex::RSModelVVGRVertex() 
{
  vector<int> first,second,third;
  first.push_back(23);second.push_back( 23);third.push_back(39);
  first.push_back(22);second.push_back( 22);third.push_back(39);
  first.push_back(24);second.push_back(-24);third.push_back(39);
  first.push_back(21);second.push_back( 21);third.push_back(39);
  setList(first,second,third);
}

inline RSModelVVGRVertex::RSModelVVGRVertex(const RSModelVVGRVertex & x)
  : VVTVertex(x), _theModel(x._theModel), _theKappa(x._theKappa) {}

inline IBPtr RSModelVVGRVertex::clone() const {
  return new_ptr(*this);
}

inline IBPtr RSModelVVGRVertex::fullclone() const {
  return new_ptr(*this);
}

inline void RSModelVVGRVertex::doupdate() throw(UpdateException) {
  VVTVertex::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void RSModelVVGRVertex::doinit() throw(InitException) {
  VVTVertex::doinit();
  Ptr<Herwig::RSModel>::transient_const_pointer 
    hwRS=dynamic_ptr_cast<Ptr<Herwig::RSModel>::transient_const_pointer>(_theModel);
  if(hwRS){_theKappa=2./hwRS->lambda_pi();}
  else{throw InitException();}
}

inline void RSModelVVGRVertex::dofinish() {
  VVTVertex::dofinish();
}

inline void RSModelVVGRVertex::doinitrun() {
  VVTVertex::doinitrun();
}

inline void RSModelVVGRVertex::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  VVTVertex::rebind(trans);
}

inline IVector RSModelVVGRVertex::getReferences() {
  IVector ret = VVTVertex::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
}
