// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the GeneralSVVVertex class.
//

namespace Herwig {
  namespace Helicity {
    using namespace ThePEG;
    
    inline GeneralSVVVertex::GeneralSVVVertex() {
      setNpoint(3);
      setSpin(1,3,3);
      _a00 = 1.;_a11 = 0.;
      _a12 = 0.;_a21 = 0.;
      _a22 = 0.;_aEp = 0.;
    }
    
    inline GeneralSVVVertex::GeneralSVVVertex(const GeneralSVVVertex & x)
      : VertexBase(x),_a00(x._a00),_a11(x._a11),_a12(x._a12),_a21(x._a21),
	_a22(x._a22),_aEp(x._aEp) {}
    
    inline void GeneralSVVVertex::doupdate() throw(UpdateException) {
      VertexBase::doupdate();
      // First update base class.
      bool redo = touched();
      // redo if touched.
      //  UpdateChecker::check(aDependentMember, redo);
      // Update referenced objects on which this depends redo is set to true
      // if the dependent object is touched.
      //  for_each(ContainerOfDependencies, UpdateChecker(redo));
      // Update a container of references.
      //  for_each(MapOfDependencies, UpdateMapChecker(redo));
      // Update a map of references.
      if ( !redo ) return;
      // return if nothing has been touched. Otherwise do the actual update.
      //  touch()
      // Touch if anything has changed.
    }

    inline void GeneralSVVVertex::doinit() throw(InitException) {
      VertexBase::doinit();
    }

    inline void GeneralSVVVertex::dofinish() {
      VertexBase::dofinish();
    }

    inline void GeneralSVVVertex::doinitrun() {
      VertexBase::doinitrun();
    }

    inline void GeneralSVVVertex::rebind(const TranslationMap & trans)
      throw(RebindException) {
      // dummy = trans.translate(dummy);
      VertexBase::rebind(trans);
    }

    inline IVector GeneralSVVVertex::getReferences() {
      IVector ret = VertexBase::getReferences();
      // ret.push_back(dummy);
      return ret;
    }
    
    //Access tensor Coefficients
    inline Complex GeneralSVVVertex::a00() const {return _a00;}

    inline Complex GeneralSVVVertex::a11() const {return _a11;}

    inline Complex GeneralSVVVertex::a12() const {return _a12;}

    inline Complex GeneralSVVVertex::a21() const {return _a21;}

    inline Complex GeneralSVVVertex::a22() const {return _a22;}

    inline Complex GeneralSVVVertex::aEp() const {return _aEp;}
    
    //Set tensor coefficients
    inline void GeneralSVVVertex::a00(const Complex & val) {_a00 = val;}
    
    inline void GeneralSVVVertex::a11(const Complex & val) {_a11 = val;}
    
    inline void GeneralSVVVertex::a12(const Complex & val) {_a12 = val;}
    
    inline void GeneralSVVVertex::a21(const Complex & val) {_a21 = val;}
    
    inline void GeneralSVVVertex::a22(const Complex & val) {_a22 = val;}
    
    inline void GeneralSVVVertex::aEp(const Complex & val) {_aEp = val;}
  }
}
