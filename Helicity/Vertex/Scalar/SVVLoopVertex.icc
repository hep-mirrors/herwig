// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SVVLoopVertex class.
//

namespace Herwig {
  namespace Helicity {
    using namespace ThePEG;
    using namespace Looptools;
    
    inline SVVLoopVertex::SVVLoopVertex() {
      kinematics(true);
    }
    
    inline SVVLoopVertex::SVVLoopVertex(const SVVLoopVertex & x)
      :GeneralSVVVertex(x),masses(x.masses),type(x.type),
	left(x.left),right(x.right) {}
    
    inline IBPtr SVVLoopVertex::clone() const {
      return new_ptr(*this);
    }
    
    inline IBPtr SVVLoopVertex::fullclone() const {
      return new_ptr(*this);
    }
    
    inline void SVVLoopVertex::doupdate() throw(UpdateException) {
      GeneralSVVVertex::doupdate();
      // First update base class.
      bool redo = touched();
      // redo if touched.
      //  UpdateChecker::check(aDependentMember, redo);
      // Update referenced objects on which this depends redo is set to true
      // if the dependent object is touched.
      //  for_each(ContainerOfDependencies, UpdateChecker(redo));
      // Update a container of references.
      //  for_each(MapOfDependencies, UpdateMapChecker(redo));
      // Update a map of references.
      if ( !redo ) return;
      // return if nothing has been touched. Otherwise do the actual update.
      //  touch()
      // Touch if anything has changed.
    }
    
    inline void SVVLoopVertex::doinit() throw(InitException) {
      GeneralSVVVertex::doinit();
    }
    
    inline void SVVLoopVertex::dofinish() {
      GeneralSVVVertex::dofinish();
    }
    
    inline void SVVLoopVertex::doinitrun() {
      GeneralSVVVertex::doinitrun();
    }
    
    inline void SVVLoopVertex::rebind(const TranslationMap & trans)
      throw(RebindException) {
      // dummy = trans.translate(dummy);
      GeneralSVVVertex::rebind(trans);
    }
    
    inline IVector SVVLoopVertex::getReferences() {
      IVector ret = GeneralSVVVertex::getReferences();
      // ret.push_back(dummy);
      return ret;
    }
  }
}
