// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ClusterDecayer class.
//

namespace Herwig {


inline ClusterDecayer::ClusterDecayer() :
  _ClDir1( 1 ),	     
  _ClDir2( 1 ),	     
  _ClSmr1( 0.0 ),	     
  _ClSmr2( 0.0 )
{}


inline ClusterDecayer::ClusterDecayer(const ClusterDecayer & x)
  : Pythia7::HandlerBase(x) ,
	     _hadronsSelector( x._hadronsSelector ), 	     
	     _globalParameters( x._globalParameters ), 	     
	     _ClDir1( x._ClDir1 ),	     
	     _ClDir2( x._ClDir2 ),	     
	     _ClSmr1( x._ClSmr1 ),	     
	     _ClSmr2( x._ClSmr2 )
{}


inline IBPtr ClusterDecayer::clone() const {
  return new_ptr(*this);
}


inline IBPtr ClusterDecayer::fullclone() const {
  return new_ptr(*this);
}


inline void ClusterDecayer::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}


inline void ClusterDecayer::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
}


inline void ClusterDecayer::dofinish() {
  Pythia7::HandlerBase::dofinish();
}


inline void ClusterDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}


inline IVector ClusterDecayer::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}


}
