// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LightClusterDecayer class.
//

namespace Herwig {


inline LightClusterDecayer::LightClusterDecayer() :
  // _pointerHadronsSelector( Ptr<HadronsSelector>::pointer() ),
  _B1Lim( 0.0 )     
{} 


inline LightClusterDecayer::LightClusterDecayer(const LightClusterDecayer & x)
  : Pythia7::HandlerBase(x),
	     _pointerHadronsSelector( x._pointerHadronsSelector ),
             _B1Lim( x._B1Lim )     
{}


inline IBPtr LightClusterDecayer::clone() const {
  return new_ptr(*this);
}


inline IBPtr LightClusterDecayer::fullclone() const {
  return new_ptr(*this);
}


inline void LightClusterDecayer::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}


inline void LightClusterDecayer::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
}


inline void LightClusterDecayer::dofinish() {
  Pythia7::HandlerBase::dofinish();
}


inline void LightClusterDecayer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}


inline IVector LightClusterDecayer::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}


}
