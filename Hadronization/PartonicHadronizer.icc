// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the PartonicHadronizer class.
//

namespace Herwig {

inline PartonicHadronizer::PartonicHadronizer() 
  : _exclusive(true),_partontries(10),_inter(false) {}

inline PartonicHadronizer::PartonicHadronizer(const PartonicHadronizer & x)
  : Interfaced(x) , 
    _globalParameters(x._globalParameters ),
    _partonSplitter(x._partonSplitter ),
    _clusterFinder(x._clusterFinder ),
    _colourReconnector(x._colourReconnector), 
    _clusterFissioner(x._clusterFissioner),
    _lightClusterDecayer(x._lightClusterDecayer),
    _clusterDecayer(x._clusterDecayer),
    _exclusive(x._exclusive),
    _partontries(x._partontries),
    _inter(x._inter)
{}

inline IBPtr PartonicHadronizer::clone() const {
  return new_ptr(*this);
}

inline IBPtr PartonicHadronizer::fullclone() const {
  return new_ptr(*this);
}

inline void PartonicHadronizer::doupdate() throw(UpdateException) {
  Interfaced::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void PartonicHadronizer::doinit() throw(InitException) {
  Interfaced::doinit();
}

inline void PartonicHadronizer::dofinish() {
  Interfaced::dofinish();
}

inline void PartonicHadronizer::doinitrun() {
  Cluster::setPointerGlobalParameters(_globalParameters);
  Interfaced::doinitrun();
}

inline void PartonicHadronizer::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Interfaced::rebind(trans);
}

inline IVector PartonicHadronizer::getReferences() {
  IVector ret = Interfaced::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
