// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the ClusterFissioner class.
//

namespace Herwig {


inline ClusterFissioner::ClusterFissioner() :
  _ClMax( 3.35*GeV ),
  _ClPow( 2.0 ),
  _PSplt1( 1.0 ),
  _PSplt2( 1.0 ),
  _BtClM( 1.0*GeV ),
  _IOpRem( 1 )
{}


inline ClusterFissioner::ClusterFissioner(const ClusterFissioner & x)
  : ThePEG::HandlerBase(x),
	     _hadronsSelector( x._hadronsSelector ),
	     _globalParameters( x._globalParameters ),
	     _ClMax( x._ClMax ),
             _ClPow( x._ClPow ),
             _PSplt1( x._PSplt1 ),
             _PSplt2( x._PSplt2 ),
             _BtClM( x._BtClM ),
             _IOpRem( x._IOpRem )
{}


inline IBPtr ClusterFissioner::clone() const {
  return new_ptr(*this);
}


inline IBPtr ClusterFissioner::fullclone() const {
  return new_ptr(*this);
}


inline void ClusterFissioner::doupdate() throw(UpdateException) {
  ThePEG::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}


inline void ClusterFissioner::doinit() throw(InitException) {
  ThePEG::HandlerBase::doinit();
}


inline void ClusterFissioner::dofinish() {
  ThePEG::HandlerBase::dofinish();
}


inline void ClusterFissioner::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ThePEG::HandlerBase::rebind(trans);
}


inline IVector ClusterFissioner::getReferences() {
  IVector ret = ThePEG::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}


}
