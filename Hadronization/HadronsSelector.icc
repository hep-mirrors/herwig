// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the HadronsSelector class.
//

namespace Herwig {


inline HadronsSelector::HadronsSelector() :
  _PwtDquark( 1.0 ),
  _PwtUquark( 1.0 ),
  _PwtSquark( 1.0 ),
  _PwtCquark( 1.0 ),
  _PwtBquark( 1.0 ),
  _PwtDIquark( 1.0 ),
  _SngWt( 1.0 ),
  _DecWt( 1.0 ),
  _vecHad( NumHadrons ),
  _Pwt( NumQuarksDiquarks+1 ),
  _locHad( NumQuarksDiquarks+1, vector<HadronLocation>(NumQuarksDiquarks+1) )
{}

inline HadronsSelector::HadronsSelector(const HadronsSelector & x)
  : Pythia7::HandlerBase(x),
             _PwtDquark( x._PwtDquark ),
             _PwtUquark( x._PwtUquark ),
             _PwtSquark( x._PwtSquark ),
             _PwtCquark( x._PwtCquark ),
             _PwtBquark( x._PwtBquark ),
             _PwtDIquark( x._PwtDIquark ),
             _SngWt( x._SngWt ),
             _DecWt( x._DecWt ),
	     _vecHad( x._vecHad ),
	     _Pwt( x._Pwt ),
	     _locHad( x._locHad )
{}


inline IBPtr HadronsSelector::clone() const {
  return new_ptr(*this);
}


inline IBPtr HadronsSelector::fullclone() const {
  return new_ptr(*this);
}


inline void HadronsSelector::doupdate() throw(UpdateException) {
  Pythia7::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}


inline void HadronsSelector::doinit() throw(InitException) {
  Pythia7::HandlerBase::doinit();
  initialize();
}


inline void HadronsSelector::dofinish() {
  Pythia7::HandlerBase::dofinish();
}


inline void HadronsSelector::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  Pythia7::HandlerBase::rebind(trans);
}


inline IVector HadronsSelector::getReferences() {
  IVector ret = Pythia7::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}


inline double HadronsSelector::pwtDquark() const {
  return _PwtDquark;
}

inline double HadronsSelector::pwtUquark() const {
  return _PwtUquark;
}

inline double HadronsSelector::pwtSquark() const {
  return _PwtSquark;
}

inline double HadronsSelector::pwtCquark() const {
  return _PwtCquark;
}

inline double HadronsSelector::pwtBquark() const {
  return _PwtBquark;
}

inline double HadronsSelector::pwtDIquark() const {
  return _PwtDIquark;
}


}
