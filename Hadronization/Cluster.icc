// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Cluster class.
//

namespace Herwig {

  inline PPtr Cluster::clone() const {
    return new_ptr(*this);
  }
  
  inline PPtr Cluster::fullclone() const {
    return clone();
  }

  inline void * Cluster::operator new(size_t) {
    return FixedAllocator<Cluster>::allocate();
  }

  inline void Cluster::operator delete(void * p, size_t) {
    FixedAllocator<Cluster>::deallocate(p);
  }

  inline int Cluster::numComponents() const {
    return _numComp;
  }

  inline void Cluster::setMass(const Energy inputMass) {
    Lorentz5Momentum m = momentum();
    m.setMass(inputMass);
  }

  inline tClusterPtr Cluster::reshufflingPartnerCluster() const {
    return _reshufflingPartner;
  }

  inline void Cluster::reshufflingPartnerCluster(const tClusterPtr cp) {
    _reshufflingPartner = cp;
  } 

  inline bool Cluster::isAvailable() const {
    return _isAvailable;
  }

  inline void Cluster::isAvailable(bool inputAvailable) {
    _isAvailable = inputAvailable;
  }


  inline bool Cluster::isStatusInitial() const {
    return ! parents().size();
  }

  inline bool Cluster::isReadyToDecay() const {
    return (children().size() == 0);
  }

  inline bool Cluster::isRedefined() const {
    return ( children().size() == 1 
	     && children()[0]->id() == ExtraParticleID::Cluster );
  }

  inline bool Cluster::hasBeenReshuffled() const {
    return _reshufflingPartner;
  }

  inline bool Cluster::initPerturbative(tPPtr p) {
    return (p->scale() > _mg2);
  }
}

