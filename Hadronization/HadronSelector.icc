// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the HadronsSelector class.
//

namespace Herwig {


inline HadronSelector::HadronSelector() :
  _PwtDquark( 1.0 ),
  _PwtUquark( 1.0 ),
  _PwtSquark( 1.0 ),
  _PwtCquark( 1.0 ),
  _PwtBquark( 1.0 ),
  _PwtDIquark( 1.0 ),
  _SngWt( 1.0 ),
  _DecWt( 1.0 ),
  _Pwt( NumFlavs+1 ),
  _ClusterDKMode(0),
  _trial(0)
{}

inline HadronSelector::HadronSelector(const HadronSelector & x)
  : ThePEG::HandlerBase(x),
    _PwtDquark( x._PwtDquark ),
    _PwtUquark( x._PwtUquark ),
    _PwtSquark( x._PwtSquark ),
    _PwtCquark( x._PwtCquark ),
    _PwtBquark( x._PwtBquark ),
    _PwtDIquark( x._PwtDIquark ),
    _SngWt( x._SngWt ),
    _DecWt( x._DecWt ),
    _Pwt( x._Pwt ),
    _ClusterDKMode(x._ClusterDKMode),
    _trial(x._trial)
{
  for(int i = D; i<BB; i++)
    for(int j = D; j<BB; j++)
      _table[i][j] = x._table[i][j];
}


inline IBPtr HadronSelector::clone() const {
  return new_ptr(*this);
}


inline IBPtr HadronSelector::fullclone() const {
  return new_ptr(*this);
}


inline void HadronSelector::doupdate() throw(UpdateException) {
  ThePEG::HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}


inline void HadronSelector::doinit() throw(InitException) {
  ThePEG::HandlerBase::doinit();
  initialize();
}


inline void HadronSelector::dofinish() {
  ThePEG::HandlerBase::dofinish();
}


inline void HadronSelector::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ThePEG::HandlerBase::rebind(trans);
}


inline IVector HadronSelector::getReferences() {
  IVector ret = ThePEG::HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}


inline double HadronSelector::pwtDquark() const {return _PwtDquark; }
inline double HadronSelector::pwtUquark() const { return _PwtUquark; }
inline double HadronSelector::pwtSquark() const { return _PwtSquark; }
inline double HadronSelector::pwtCquark() const { return _PwtCquark; }
inline double HadronSelector::pwtBquark() const { return _PwtBquark; }
inline double HadronSelector::pwtDIquark() const { return _PwtDIquark; }

}
