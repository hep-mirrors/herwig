// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MEee2gZ2qq class.
//

namespace Herwig {

inline MEee2gZ2qq::MEee2gZ2qq() : _minflav(1),_maxflav(5) 
{}

inline MEee2gZ2qq::MEee2gZ2qq(const MEee2gZ2qq & x)
  : ME2to2Base(x), _theFFZVertex(x._theFFZVertex) ,_theFFPVertex(x._theFFPVertex),
    _Z0(x._Z0) ,_gamma(x._gamma),_minflav(x._minflav), _maxflav(x._maxflav) {}

inline IBPtr MEee2gZ2qq::clone() const {
  return new_ptr(*this);
}

inline IBPtr MEee2gZ2qq::fullclone() const {
  return new_ptr(*this);
}

inline void MEee2gZ2qq::doupdate() throw(UpdateException) {
  ME2to2Base::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MEee2gZ2qq::doinit() throw(InitException) {
  ME2to2Base::doinit();
  if(_minflav>_maxflav)
    {throw InitException() << "The minimum flavour " << _minflav  
			   << "must be lower the than maximum flavour " << _maxflav
			   << " in MEee2gZ2qq::doinit() " 
			   << Exception::runerror;}
  // set the particle data objects
  _Z0=getParticleData(ThePEG::ParticleID::Z0);
  _gamma=getParticleData(ThePEG::ParticleID::gamma);
  // cast the SM pointer to the Herwig SM pointer
  Ptr<Herwig::StandardModel>::transient_const_pointer hwsm=
    dynamic_ptr_cast<Ptr<Herwig::StandardModel>::transient_const_pointer>(standardModel());
  // do the initialisation
  if(hwsm)
    {
      _theFFZVertex = hwsm->vertexFFZ();
      _theFFPVertex = hwsm->vertexFFP();
    }
  else
    {throw InitException() << "Wrong type of StandardModel object in "
			   << "MEee2gZ2qq::doinit() the Herwig++ version must be used" 
			   << Exception::runerror;}
}

inline void MEee2gZ2qq::dofinish() {
  ME2to2Base::dofinish();
}

inline void MEee2gZ2qq::doinitrun() {
  ME2to2Base::doinitrun();
}

inline void MEee2gZ2qq::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  _theFFZVertex = trans.translate(_theFFZVertex);
  _theFFPVertex = trans.translate(_theFFPVertex);
  _Z0           = trans.translate(_Z0);
  _gamma        = trans.translate(_gamma);
  ME2to2Base::rebind(trans);
}

inline IVector MEee2gZ2qq::getReferences() {
  IVector ret = ME2to2Base::getReferences();
  ret.push_back(_theFFZVertex);
  ret.push_back(_theFFPVertex);
  ret.push_back(_Z0          );
  ret.push_back(_gamma       );
  return ret;
}

}
