// -*- C++ -*-
//
// MatchboxScale.cc is a part of Herwig - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2012 The Herwig Collaboration
//
// Herwig is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the non-inlined, non-templated member
// functions of the MatchboxScale class.
//

#include "MatchboxScale.h"
#include "ThePEG/Interface/ClassDocumentation.h"
#include "ThePEG/Interface/Switch.h"
#include "ThePEG/Interface/Reference.h"
#include "ThePEG/Interface/Parameter.h"
#include "ThePEG/EventRecord/Particle.h"
#include "ThePEG/Repository/Repository.h"
#include "ThePEG/Repository/UseRandom.h"
#include "ThePEG/Repository/EventGenerator.h"
#include "ThePEG/Utilities/DescribeClass.h"
#include "ThePEG/Interface/Command.h"
#include "ThePEG/Utilities/DynamicLoader.h"


#include "ThePEG/Persistency/PersistentOStream.h"
#include "ThePEG/Persistency/PersistentIStream.h"

using namespace Herwig;

//external function which will be filled in doFunktion(..)
Energy2 renScale(vector<Lorentz5Momentum> jet,  vector<Lorentz5Momentum> lepton,  vector<Lorentz5Momentum> boson);


MatchboxScale::MatchboxScale()
   {}

MatchboxScale::~MatchboxScale() {}

IBPtr MatchboxScale::clone() const {
  return new_ptr(*this);
}

IBPtr MatchboxScale::fullclone() const {
  return new_ptr(*this);
}




string MatchboxScale::doFunction(string in) {
  string cmd = "Makefile";
  ofstream makeFile(cmd.c_str());
  cmd = "Scale.cc";
  ofstream scaleFile(cmd.c_str());
  scaleFile<< "#include \"Herwig/MatrixElement/Matchbox/Scales/MatchboxScale.h\"\n" ;
  scaleFile<< "using namespace Herwig ;\n" ;
  scaleFile<< "Energy2 renScale(vector<Lorentz5Momentum> jet,  vector<Lorentz5Momentum> lepton,  vector<Lorentz5Momentum> boson){\n" ;
  scaleFile<< "return \n"<< in.c_str();
  scaleFile<< ";}\n" ;
  scaleFile<< flush ;

  makeFile<< "THEPEG=@THEPEGPATH@\n" ;
  makeFile<< "HERWIG=@prefix@\n" ;
  makeFile<< "INCLUDE=-I $(THEPEG)/include -I $(HERWIG)/include\n" ;
  makeFile<< "LIBPATH=@THEPEGLDFLAGS@\n" ;
  makeFile<< "SHARED_FLAG=@SHARED_FLAG@ @APPLE_DSO_FLAGS@ \n";
  makeFile<< "all:                                             \n" ;
  makeFile<< "\tg++ $(SHARED_FLAG)  -g3  -fPIC -o "<<scalePath<<"Scale.so $(INCLUDE) $(LIBPATH) @THEPEGLIB@   Scale.cc\n" ;
  makeFile<< flush ;	  


  cmd = "make";
  int st = std::system(cmd.c_str());
  Repository::clog() << "scale compilation returned " << st << "\n";
  return "";

}


struct PtLargerMB {
   inline bool operator()(const LorentzMomentum& a,
                          const LorentzMomentum& b) const {
     return a.perp() > b.perp();
   }
};



bool loadlib=false;

Energy2 MatchboxScale::renormalizationScale() const {
  tcPDVector pd (mePartonData().begin() + 2, mePartonData().end());
  vector<LorentzMomentum> p (meMomenta().begin() + 2, meMomenta().end());
  tcPDPtr t1 = mePartonData()[0];
  tcPDPtr t2 = mePartonData()[1];
  tcCutsPtr cuts = lastCutsPtr();
  theJetFinder->cluster(pd, p, cuts, t1, t2);


  vector<Lorentz5Momentum> jet;
  vector<Lorentz5Momentum> lepton;
  vector<Lorentz5Momentum> boson;
  
  tcPDVector::const_iterator itpd = pd.begin();
  for (vector<LorentzMomentum>::const_iterator itp = p.begin() ;
       itp != p.end(); ++itp, ++itpd ) {
	      if ( (**itpd).coloured() ) {
		jet.push_back(*itp);
	      }
	      if ( abs((**itpd).id())>=22&&abs((**itpd).id())<=25 ) {
		boson.push_back(*itp);
	      }
	      if ( abs((**itpd).id())> 10&&abs((**itpd).id())< 17 ) {
		lepton.push_back(*itp);
	      }
      
       }


  std::sort(jet.begin(),jet.end(),PtLargerMB());  


  if (!loadlib)
    if ( !DynamicLoader::load(scalePath+"Scale.so") ) assert(0);

  return renScale(jet,lepton,boson);
}

Energy2 MatchboxScale::factorizationScale() const {
  return renormalizationScale();
}

// If needed, insert default implementations of virtual function defined
// in the InterfacedBase class here (using ThePEG-interfaced-impl in Emacs).


void MatchboxScale::persistentOutput(PersistentOStream & os) const {
  os << theJetFinder << scalePath;
}

void MatchboxScale::persistentInput(PersistentIStream & is, int) {
  is >> theJetFinder >> scalePath ;
}


// *** Attention *** The following static variable is needed for the type
// description system in ThePEG. Please check that the template arguments
// are correct (the class and its base class), and that the constructor
// arguments are correct (the class name and the name of the dynamically
// loadable library where the class implementation can be found).
DescribeClass<MatchboxScale,MatchboxScaleChoice>
  describeHerwigMatchboxScale("Herwig::MatchboxScale", "HwMatchboxScales.so");

void MatchboxScale::Init() {

  static ClassDocumentation<MatchboxScale> documentation
    ("MatchboxScale implements scale choices related to transverse momenta.");

  static Reference<MatchboxScale,JetFinder> interfaceJetFinder
    ("JetFinder",
     "A reference to the jet finder.",
     &MatchboxScale::theJetFinder, false, false, true, false, false);

  static Command<MatchboxScale> interfaceFunction
    ("Function",
     "Set the scale function.",
     &MatchboxScale::doFunction, false);




  static Parameter<MatchboxScale,string> interfaceScalePath
    	 ("ScalePath",
     	  "Prefix for the scalepath.",
     	  &MatchboxScale::scalePath, "",
     	  false, false);
    
}


