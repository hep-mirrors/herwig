#! /usr/bin/env python

import os,re,sys,fileinput,random,time,math,glob,functools,errno
from multiprocessing import Pool






def replacemachine(fileName, sourceText, replaceText):
    file = open(fileName, "r") 
    text = file.read() 
    file.close()
    file = open(fileName, "w")
    file.write(text.replace(sourceText, replaceText))
    file.close() 

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise   
 

def fillprocs():
  fileproc=open("proc.dat","w")
  fileproc.write("import model sm\n")
  fileproc.write("set EWscheme external\n")
  fileproc.write("define ubar =u~\n")
  fileproc.write("define dbar =d~\n")
  fileproc.write("define nu_mubar =vm~\n")
  fileproc.write("define nu_mu =vm\n")
  fileproc.write("define sbar =s~\n")
  fileproc.write("define cbar =c~\n")
  fileproc.write("define bbar =b~\n")
  fileproc.write("define tbar =t~\n")
  fileproc.write("define Z0 =z\n")
#  fileproc.write("define W+ =w+\n")
#  fileproc.write("define W-=w-\n")
  fileproc.write("define h0 =h\n")
  fileproc.write("define gamma =a \n")
  fileproc.write("define nu_e =ve \n")
  fileproc.write("define nu_mu =vm \n")
  fileproc.write("define nu_tau =vt \n")
  fileproc.write("define nu_ebar =ve~ \n")
  fileproc.write("define nu_mubar =vm~ \n")
  fileproc.write("define nu_taubar =vt~ \n")
  fileproc.write("define tau- =ta- \n")
  fileproc.write("define tau+ =ta+ \n")
  files=glob.glob('*.MG')
  first=True
  processmap=""
  procnr=0
  for filei in files:
    processmap+=filei+" "
    file = open(filei, "r")
    for line in file:
      linetmp=line
      procnr+=1
      processmap+=str(procnr) +"\n"
      if first:
	fileproc.write("generate "+linetmp+"@"+str(procnr)+"\n")
	first=False
      else:
	fileproc.write("add process "+linetmp+"@"+str(procnr)+"\n")
  fileproc.write("output matchbox MGout")
  fileproc.close()
  fileprocessmap=open("processmap.dat","w")
  fileprocessmap.write(processmap)
  fileprocessmap.close()

def replacefromto(xfile, xfrom,xto,repltext):
    file = open(xfile, "r") 
    text=""
    replace=False
    for line in file:
      if not replace:
	text+=line
      if xfrom in line:
	replace=True
	text+=repltext
      if replace and (xto in line):
	replace=False
    file.close() 
    file = open(xfile, "w")
    file.write(text)
    file.close() 
  

  
  
  
file = open("@prefix@/share/Herwig++/MadGraphInterface/param_card.dat.in", "r") 
text = file.read() 
file.close()
file = open("param_card.dat", "w")
params=open("MG-Parameter.dat", "r")
for line in params:
  a=line.split()
  #print a[0],"-->",a[1]
  text=text.replace(a[0],a[1])
params.close()
file.write(text)
file.close()   
pwdxx=os.getcwd() 



if not os.path.isdir(sys.argv[2]):
   print "The MadGraph Install path was not existend. It has been created for you."
   print "Just start Herwig++ read again.."
   mkdir_p(sys.argv[2])
   exit()

os.chdir(sys.argv[2])
if os.path.isfile("InterfaceMadGraph.so"):
  files=glob.glob('*.MG')
  containsall=True
  for file in files:
     contains=False
     fileprocessmap=open("processmap.dat","r")
     for line in fileprocessmap:
       if file in line:
	 contains=True
     containsall=(containsall and contains)
  if containsall:
    exit()    
  
 
fillprocs()
os.system("python "+sys.argv[1]+"/mg5_aMC proc.dat")
list=[]
pwd1=os.getcwd()
os.chdir(pwd1+"/"+"MGout/SubProcesses")
a=os.listdir('./')
pwd=os.getcwd()
text1h ="//#include \"MGout/SubProcesses/PN_Sigma_sm_xxprocessxx/PN_Sigma_sm_xxprocessxx.h\"\n"
text2h ="//static PN_Sigma_sm_xxprocessxx    xxprocessxx     ;\n"
text1cc="//PN_Sigma_sm_xxprocessxx             InterfaceMadGraph::xxprocessxx ;\n"
text2cc="//case N:  InterfaceMadGraph::xxprocessxx.calculate_wavefunctions(perm,hel);break;\n"
text3cc="//case N:  InterfaceMadGraph::xxprocessxx.setMomenta(p); break;\n"
text4cc="//case N:  return InterfaceMadGraph::xxprocessxx.get_jamp(T); break;\n"
text5cc="//case N:  InterfaceMadGraph::xxprocessxx.initProc(\"param_card.dat\"); break;\n"
text6cc="//case N: return InterfaceMadGraph::xxprocessxx.NCol(); break;\n"
text7cc="//case N: return InterfaceMadGraph::xxprocessxx.Colour(); break;\n"
makefile=""

for i in a:

  if os.path.isdir(pwd+"/"+i):
    N=re.findall('([0-9]+)', i)
    text1h +="#include \"MGout/SubProcesses/"+i+"/"+i+".h\"\n"
    text2h +="static "+i+"    obj_"+i+"     ;\n"
    text1cc+=i+"             InterfaceMadGraph::obj_"+i+" ;\n"
    text2cc+="case "+N[0]+":  InterfaceMadGraph::obj_"+i+".calculate_wavefunctions(perm,hel);break;\n"
    text3cc+="case "+N[0]+":  InterfaceMadGraph::obj_"+i+".setMomenta(p); break;\n"
    text4cc+="case "+N[0]+":  return InterfaceMadGraph::obj_"+i+".get_jamp(T); break;\n"
    text5cc+="case "+N[0]+":  InterfaceMadGraph::obj_"+i+".initProc(\""+pwd1+"/"+"MGout/Cards/"+"param_card.dat\"); break;\n"
    text6cc+="case "+N[0]+": return InterfaceMadGraph::obj_"+i+".NCol(); break;\n"
    text7cc+="case "+N[0]+": return InterfaceMadGraph::obj_"+i+".colorstring(i,j); break;\n"
    makefile+=" MGout/SubProcesses/"+i+"/"+i+".cc "
    os.chdir(pwd+"/"+i)
    replacemachine("CPPProcess.h","CPPProcess" , i)
    replacemachine("CPPProcess.cc","CPPProcess" , i)
    os.system("mv CPPProcess.h "+i+".h")
    os.system("mv CPPProcess.cc "+i+".cc")
    os.system("rm Makefile")
    file = open(i+".h", "r")
    onlyoneprocess = file.read()
    if "static const int nprocesses = 1;" not in onlyoneprocess:
       sys.exit()
    file.close()
    #replacemachine(i+".h","private:" , "//private:")

os.chdir(pwd1)
file = open("@prefix@/share/Herwig++/MadGraphInterface/InterfaceMadGraph.h.in", "r")
text = file.read()
file.close()
file = open("InterfaceMadGraph.h", "w")
text=text.replace("#include \"MGout/SubProcesses/PN_Sigma_sm_xxprocessxx/PN_Sigma_sm_xxprocessxx.h\"", text1h)
text=text.replace("static PN_Sigma_sm_xxprocessxx    xxprocessxx     ;", text2h)
file.write(text)
file.close()

file = open("@prefix@/share/Herwig++/MadGraphInterface/InterfaceMadGraph.cc.in", "r")
text = file.read()
file.close()
file = open("InterfaceMadGraph.cc", "w")
text=text.replace("PN_Sigma_sm_xxprocessxx             InterfaceMadGraph::xxprocessxx ;",text1cc)
text=text.replace("case N:  InterfaceMadGraph::xxprocessxx.calculate_wavefunctions(perm,hel);break;",text2cc)
text=text.replace("case N:  InterfaceMadGraph::xxprocessxx.setMomenta(p); break;",text3cc)
text=text.replace("case N:  return InterfaceMadGraph::xxprocessxx.get_jamp(T); break;",text4cc)
text=text.replace("case N:  InterfaceMadGraph::xxprocessxx.initProc(\"param_card.dat\"); break;",text5cc)
text=text.replace("case N: return InterfaceMadGraph::xxprocessxx.NCol(); break;",text6cc)
text=text.replace("case N: return InterfaceMadGraph::xxprocessxx.colorstring(i,j); break;",text7cc)
file.write(text)
file.close()

file = open("@prefix@/share/Herwig++/MadGraphInterface/Makefile-MG.in", "r")
text = file.read()
file.close()
file = open("Makefile", "w")
file.write(text)
file.write(makefile)
file.close()

replacemachine(sys.argv[2]+"/MGout/src/read_slha.cc","cout << \"Opened slha fil", "//cout << \"Opened slha fil")

os.system("make")
os.chdir(pwdxx)
os.system("cp param_card.dat "+sys.argv[2]+"/MGout/Cards/")
