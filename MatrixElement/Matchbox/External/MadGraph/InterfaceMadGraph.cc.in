#include "InterfaceMadGraph.h"
#include <cstdlib>
#include <iostream>
using namespace std;

void MG_InitProc(int i){ InterfaceMadGraph::initProc(i);};
void MG_Calculate_wavefunctions(const int perm[], const int hel[],int numofmom,int str){
   InterfaceMadGraph::calculate_wavefunctions(perm,hel,str);
};
void MG_SetMomenta(vector<double*> p,int numofmom,int str){
  InterfaceMadGraph::setMomenta(p,str);
};
std::complex<double> MG_Jamp(int T,int str){
  return InterfaceMadGraph::jamp(T,str);
};
int MG_NCol(int str){
  return InterfaceMadGraph::NCol(str);
};


int MG_Colour(int str, int i,int j){
  return InterfaceMadGraph::colorstring(str,i,j);
};


void MG_vxxxxx(double p[4],double n[4],int inc,complex<double> vc[6]){
  complex<double> Ninplus[6];
  complex<double> Noutminus[6];
  complex<double> Pinplus[6];
  complex<double> Poutplus[6];
  complex<double> cI(0.0,1.0);
  MG5_sm::ixxxxx(n, 0.0, +1, +1, Ninplus); //  |n+>
  MG5_sm::oxxxxx(p, 0.0, +1, +1, Poutplus); // <p+|
  MG5_sm::oxxxxx(n, 0.0, -1, +1, Noutminus);//  <n-|
  MG5_sm::ixxxxx(p, 0.0, +1, +1, Pinplus); // |p+>

  //<p+| gamma_mu |n+>
  vc[2] = (Ninplus[2] * Poutplus[4] + Ninplus[3] * Poutplus[5] + Ninplus[4] * Poutplus[2] + Ninplus[5] * Poutplus[3]);
  vc[3] =  (Ninplus[4] * Poutplus[3] + Ninplus[5] * Poutplus[2] - Ninplus[2] * Poutplus[5] - Ninplus[3] * Poutplus[4]);
  vc[4] =  (-cI * (Ninplus[2] * Poutplus[5] + Ninplus[5] * Poutplus[2]) + cI * (Ninplus[3] * Poutplus[4] + Ninplus[4] * Poutplus[3]));
  vc[5] =  (Ninplus[3] * Poutplus[5] + Ninplus[4] * Poutplus[2] - Ninplus[2] * Poutplus[4] - Ninplus[5] * Poutplus[3]);

  complex<double> denom= (Pinplus[2]*Noutminus[2]+Pinplus[3]*Noutminus[3]+Pinplus[4]*Noutminus[4]+Pinplus[5]*Noutminus[5])*sqrt(2.);
  if (inc>1){
  if (abs(vc[5])!=0.)
  denom*= (vc[5])/abs(vc[5]);
  if (abs(vc[3])!=0.)
  denom*= (vc[3])/abs(vc[3]);
  }
  vc[2]=-1.*vc[2]/denom;
  vc[3]=-1.*vc[3]/denom;
  vc[4]=-1.*vc[4]/denom;
  vc[5]=-1.*vc[5]/denom;
}


PN_Sigma_sm_xxprocessxx             InterfaceMadGraph::xxprocessxx ;

void InterfaceMadGraph::calculate_wavefunctions(const int perm[], const int hel[],int str){
switch (str){
case N:  InterfaceMadGraph::xxprocessxx.calculate_wavefunctions(perm,hel);break;
default: 
    break;}};

void InterfaceMadGraph::setMomenta(vector<double*> p,int str){
  switch (str){
case N:  InterfaceMadGraph::xxprocessxx.setMomenta(p); break;
default: 
    break;}};

std::complex<double> InterfaceMadGraph::jamp(int T,int str){
switch (str){
case N:  return InterfaceMadGraph::xxprocessxx.jamp(T); break;
default: 
    break;}};

void InterfaceMadGraph::initProc(int str){
switch (str){
case N:  InterfaceMadGraph::xxprocessxx.initProc("param_card.dat"); break;
default: 
    break;}};
    
int InterfaceMadGraph::colorstring(int str,int i, int j){
switch (str){
case N: return InterfaceMadGraph::xxprocessxx.colorstring(i,j); break;
default: 
    break;}};


int  InterfaceMadGraph::NCol(int str){
switch (str){
case N: return InterfaceMadGraph::xxprocessxx.NCol(); break;;
default:
    break;}};
    
    
