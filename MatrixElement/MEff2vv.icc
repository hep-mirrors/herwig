// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MEff2vv class.
//

namespace Herwig {

inline MEff2vv::MEff2vv() : theVec(0), theTen(0), theSca1(0), theSca2(0) {}

inline IBPtr MEff2vv::clone() const {
  return new_ptr(*this);
}

inline IBPtr MEff2vv::fullclone() const {
  return new_ptr(*this);
}

inline void MEff2vv::doinit() throw(InitException) {
  GeneralHardME::doinit();
  Energy mC = getParticleData(getOutgoing().first)->mass();
  Energy mD = getParticleData(getOutgoing().second)->mass();
  bool masslVec = (mC == 0. && mD == 0.) ? true : false;
  HPCount ndiags(numberOfDiags());
  theFerm.resize(ndiags);
  theVec.resize(ndiags);
  theTen.resize(ndiags);
  if(masslVec) theSca1.resize(ndiags);
  else theSca2.resize(ndiags);
  for(HPCount i = 0; i < ndiags; ++i) {
    HPDiagram current = getProcessInfo()[i];
    if(current.channelType == HPDiagram::tChannel) {
      if(current.intermediate->iSpin() == PDT::Spin1Half)
	theFerm[i] = 
	  make_pair(dynamic_ptr_cast<FFVVertexPtr>(current.vertices.first),
		    dynamic_ptr_cast<FFVVertexPtr>(current.vertices.second));
    }
    else if(current.channelType == HPDiagram::sChannel) {
      if(current.intermediate->iSpin() == PDT::Spin0) {
	if(masslVec) 
	  theSca1[i] = 
	    make_pair(dynamic_ptr_cast<FFSVertexPtr>(current.vertices.first),
		      dynamic_ptr_cast<GeneralSVVVertexPtr>
		      (current.vertices.second));
	else
	  theSca2[i] = 
	    make_pair(dynamic_ptr_cast<FFSVertexPtr>(current.vertices.first),
		      dynamic_ptr_cast<VVSVertexPtr>(current.vertices.second));
      }
      if(current.intermediate->iSpin() == PDT::Spin1)
	theVec[i] = 
	  make_pair(dynamic_ptr_cast<FFVVertexPtr>(current.vertices.first),
		    dynamic_ptr_cast<VVVVertexPtr>(current.vertices.second));
      if(current.intermediate->iSpin() == PDT::Spin2)
	theTen[i] = 
	  make_pair(dynamic_ptr_cast<FFTVertexPtr>(current.vertices.first),
		    dynamic_ptr_cast<VVTVertexPtr>(current.vertices.second));
    }
  }
  
}

}
