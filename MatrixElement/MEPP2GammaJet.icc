// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MEPP2GammaJet class.
//

namespace Herwig {

  inline MEPP2GammaJet::MEPP2GammaJet() : _maxflavour(5), _processopt(0) {}

inline MEPP2GammaJet::MEPP2GammaJet(const MEPP2GammaJet & x)
  : ME2to2Base(x), _gluonvertex(x._gluonvertex), _photonvertex(x._photonvertex),
    _maxflavour(x._maxflavour), _processopt(x._processopt) 
{}

inline IBPtr MEPP2GammaJet::clone() const {
  return new_ptr(*this);
}

inline IBPtr MEPP2GammaJet::fullclone() const {
  return new_ptr(*this);
}

inline void MEPP2GammaJet::doupdate() throw(UpdateException) {
  ME2to2Base::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MEPP2GammaJet::dofinish() {
  ME2to2Base::dofinish();
}

inline void MEPP2GammaJet::doinitrun() {
  ME2to2Base::doinitrun();
}

inline void MEPP2GammaJet::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ME2to2Base::rebind(trans);
  _gluonvertex =trans.translate(_gluonvertex );
  _photonvertex=trans.translate(_photonvertex);
}

inline IVector MEPP2GammaJet::getReferences() {
  IVector ret = ME2to2Base::getReferences();
  ret.push_back(_gluonvertex);
  ret.push_back(_photonvertex);
  return ret;
}

}
