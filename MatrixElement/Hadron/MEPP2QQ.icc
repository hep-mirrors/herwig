// -*- C++ -*-
//
// MEPP2QQ.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the MEPP2QQ class.
//

namespace Herwig {

inline MEPP2QQ::MEPP2QQ() : _quarkflavour(6), _process(0) {
  massOption(true ,1);
  massOption(false,1);
}

inline IBPtr MEPP2QQ::clone() const {
  return new_ptr(*this);
}

inline IBPtr MEPP2QQ::fullclone() const {
  return new_ptr(*this);
}

inline void MEPP2QQ::rebind(const TranslationMap & trans)
  throw(RebindException) {
  _gggvertex  = trans.translate( _gggvertex);
  _qqgvertex  = trans.translate( _qqgvertex);
  _gluon      = trans.translate( _gluon);
  for(unsigned int ix=0;ix<_quark.size();++ix) 
    {_quark[ix]=trans.translate(_quark[ix]);}
  for(unsigned int ix=0;ix<_antiquark.size();++ix)
    {_antiquark[ix]=trans.translate(_quark[ix]);}
  HwME2to2Base::rebind(trans);
}

inline IVector MEPP2QQ::getReferences() {
  IVector ret = HwME2to2Base::getReferences();
  ret.push_back(_gggvertex);
  ret.push_back(_qqgvertex);
  ret.push_back(_gluon);
  for(unsigned int ix=0;ix<_quark.size();++ix)
    {ret.push_back(_quark[ix]);}
  for(unsigned int ix=0;ix<_antiquark.size();++ix)
    {ret.push_back(_antiquark[ix]);}
  return ret;
}

}
