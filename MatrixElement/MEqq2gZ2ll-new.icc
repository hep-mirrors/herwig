// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the MEqq2gZ2ll class.
//

namespace Herwig {

inline MEqq2gZ2ll::MEqq2gZ2ll() : _maxflavour(5), _withNeutrinos(0) {}

inline MEqq2gZ2ll::MEqq2gZ2ll(const MEqq2gZ2ll & x)
  : ME2to2Base(x), 
    _theFFZVertex(x._theFFZVertex), _theFFPVertex(x._theFFPVertex), 
    _Z0(x._Z0) ,_gamma(x._gamma),
    _maxflavour(x._maxflavour), _withNeutrinos(x._withNeutrinos) {}
  
inline IBPtr MEqq2gZ2ll::clone() const {
  return new_ptr(*this);
}

inline IBPtr MEqq2gZ2ll::fullclone() const {
  return new_ptr(*this);
}

inline void MEqq2gZ2ll::doupdate() throw(UpdateException) {
  ME2to2Base::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void MEqq2gZ2ll::doinit() throw(InitException) {
  ME2to2Base::doinit();
  _Z0=getParticleData(ThePEG::ParticleID::Z0);
  _gamma=getParticleData(ThePEG::ParticleID::gamma);
  // cast the SM pointer to the Herwig SM pointer
  ThePEG::Ptr<Herwig::StandardModel>::transient_const_pointer 
    hwsm=ThePEG::dynamic_ptr_cast< ThePEG::Ptr<Herwig::StandardModel>
    ::transient_const_pointer>(standardModel());
  // do the initialisation
  if(hwsm)
    {
      _theFFZVertex = hwsm->vertexFFZ();
      _theFFPVertex = hwsm->vertexFFP();
    }
  else
    {throw InitException();}
}

inline void MEqq2gZ2ll::dofinish() {
  ME2to2Base::dofinish();
}

inline void MEqq2gZ2ll::doinitrun() {
  ME2to2Base::doinitrun();
}

inline void MEqq2gZ2ll::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  _theFFZVertex = trans.translate(_theFFZVertex);
  _theFFPVertex = trans.translate(_theFFPVertex);
  _Z0           = trans.translate(_Z0);
  _gamma        = trans.translate(_gamma);
  ME2to2Base::rebind(trans);
}

inline IVector MEqq2gZ2ll::getReferences() {
  IVector ret = ME2to2Base::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
