// -*- C++ -*-
//
// This is the implementation of the non-inlined, non-templated member
// functions of the MEPPto3D2Jet class.
//

#include "MEPPto3D2Jet.h"
#include "ThePEG/Interface/ClassDocumentation.h"
#include "ThePEG/Interface/Reference.h"
#include "ThePEG/Interface/Parameter.h"
#include "ThePEG/Interface/Switch.h"
#include "ThePEG/EventRecord/Particle.h"
#include "ThePEG/Repository/UseRandom.h"
#include "ThePEG/Repository/EventGenerator.h"
#include "ThePEG/Utilities/DescribeClass.h"
#include "ThePEG/Persistency/PersistentOStream.h"
#include "ThePEG/Persistency/PersistentIStream.h"
#include "ThePEG/PDT/EnumParticles.h"
#include "ThePEG/MatrixElement/Tree2toNDiagram.h"
#include "ThePEG/Utilities/EnumIO.h"
#include "ThePEG/StandardModel/StandardModelBase.h"
#include "ThePEG/Helicity/WaveFunction/TensorWaveFunction.h"
#include "ThePEG/Helicity/WaveFunction/VectorWaveFunction.h"
#include "Herwig/MatrixElement/ProductionMatrixElement.h"
#include "Herwig/MatrixElement/HardVertex.h"

using namespace Herwig;

void MEPPto3D2Jet::doinit() {
  HwMEBase::doinit();
  // get the non-perturbative ME
  O1_ = params_->singletMEProduction<2>(state_,n_,1,2);
  // set the mass option
  massOption(vector<unsigned int>({mOpt_+1,0}));
}

IBPtr MEPPto3D2Jet::clone() const {
  return new_ptr(*this);
}

IBPtr MEPPto3D2Jet::fullclone() const {
  return new_ptr(*this);
}

void MEPPto3D2Jet::persistentOutput(PersistentOStream & os) const {
  os << params_ << ounit(O1_,GeV*GeV2*GeV2*GeV2) << oenum(state_) << n_ << mOpt_;
}

void MEPPto3D2Jet::persistentInput(PersistentIStream & is, int) {
  is >> params_ >> iunit(O1_,GeV*GeV2*GeV2*GeV2) >> ienum(state_) >> n_ >> mOpt_;
}

//The following static variable is needed for the type
// description system in ThePEG.
DescribeClass<MEPPto3D2Jet,HwMEBase>
describeHerwigMEPPto3D2Jet("Herwig::MEPPto3D2Jet",
			     "HwOniumParameters.so HwMEHadronOnium.so");

void MEPPto3D2Jet::Init() {

  static ClassDocumentation<MEPPto3D2Jet> documentation
    ("The MEPPto3D2Jet class implements the g g to 3D2 g processes");

  static Reference<MEPPto3D2Jet,OniumParameters> interfaceParameters
    ("Parameters",
     "Quarkonium parameters",
     &MEPPto3D2Jet::params_, false, false, true, false, false);
  
  static Switch<MEPPto3D2Jet,OniumState> interfaceState
    ("State",
     "The type of onium state",
     &MEPPto3D2Jet::state_, ccbar, false, false);
  static SwitchOption interfaceStateccbar
    (interfaceState,
     "ccbar",
     "Charmonium state",
     ccbar);
  static SwitchOption interfaceStatebbbar
    (interfaceState,
     "bbbar",
     "Bottomonium state",
     bbbar);
  
  static Parameter<MEPPto3D2Jet,unsigned int> interfacePrincipalQuantumNumber
    ("PrincipalQuantumNumber",
     "The principle quantum number of the states",
     &MEPPto3D2Jet::n_, 1, 1, 10,
     false, false, Interface::limited);

  static Switch<MEPPto3D2Jet,unsigned int> interfaceMassOption
    ("MassOption",
     "Mass of the treatment of the 3D2 mass",
     &MEPPto3D2Jet::mOpt_, 0, false, false);
  static SwitchOption interfaceMassOptionOnShell
    (interfaceMassOption,
     "OnShell",
     "Use the on-shell mass",
     0);
  static SwitchOption interfaceMassOptionOffShell
    (interfaceMassOption,
     "OffShell",
     "Use an off-shell mass generated by the MassGenerator object for the 3D2 state.",
     1);
}

void MEPPto3D2Jet::getDiagrams() const {
  // construct the meson PDG code from quark ids
  unsigned int iq = 4+state_;
  tcPDPtr ps = getParticleData(long(iq*110 + 20005 + (n_-1)*100000));
  tcPDPtr g = getParticleData(ParticleID::g);
  add(new_ptr((Tree2toNDiagram(2), g, g, 1, ps, 1, g , -1)));
}

Selector<MEBase::DiagramIndex>
MEPPto3D2Jet::diagrams(const DiagramVector & diags) const {
  Selector<DiagramIndex> sel;
  for ( DiagramIndex i = 0; i < diags.size(); ++i ) 
    if ( diags[i]->id() == -1 ) sel.insert(1.0, i);
  return sel;
}

Selector<const ColourLines *>
MEPPto3D2Jet::colourGeometries(tcDiagPtr ) const {
  static ColourLines c1("1 -2,  2  4, -1 -4");
  static ColourLines c2("1  4, -4 -2,  2 -1");
  Selector<const ColourLines *> sel;
  sel.insert(0.5, &c1);
  sel.insert(0.5, &c2);
  return sel;
}

Energy2 MEPPto3D2Jet::scale() const {
  return sHat();
}

double MEPPto3D2Jet::me2() const {
  Energy M = meMomenta()[2].mass();
  Energy2 M2=sqr(M);
  Energy4 um(sqr(uHat()-M2)),tm(sqr(tHat()-M2)),sm(sqr(sHat()-M2));
  double output = 16.*O1_*pow(Constants::pi*standardModel()->alphaS(scale()),3)/(27.*pow<7,1>(M))*
    (32*sqr(M2)*(pow<10,1>(M2)*pow<3,1>(tHat())-3*pow<9,1>(M2)*pow<4,1>(tHat())+5*pow<8,1>(M2)*pow<5,1>(tHat())-11*pow<7,1>(M2)*pow<6,1>(tHat())
		 +20*pow<6,1>(M2)*pow<7,1>(tHat())-20*pow<5,1>(M2)*pow<8,1>(tHat())+10*pow<4,1>(M2)*pow<9,1>(tHat())-2*pow<3,1>(M2)*pow<10,1>(tHat())
		 +9*pow<10,1>(M2)*sqr(tHat())*uHat()-64*pow<9,1>(M2)*pow<3,1>(tHat())*uHat()+180*pow<8,1>(M2)*pow<4,1>(tHat())*uHat()
		 -280*pow<7,1>(M2)*pow<5,1>(tHat())*uHat()+269*pow<6,1>(M2)*pow<6,1>(tHat())*uHat()-144*pow<5,1>(M2)*pow<7,1>(tHat())*uHat()
		 +16*pow<4,1>(M2)*pow<8,1>(tHat())*uHat()+20*pow<3,1>(M2)*pow<9,1>(tHat())*uHat()-6*sqr(M2)*pow<10,1>(tHat())*uHat()
		 +9*pow<10,1>(M2)*tHat()*sqr(uHat())-130*pow<9,1>(M2)*sqr(tHat())*sqr(uHat())+611*pow<8,1>(M2)*pow<3,1>(tHat())*sqr(uHat())
		 -1369*pow<7,1>(M2)*pow<4,1>(tHat())*sqr(uHat())+1716*pow<6,1>(M2)*pow<5,1>(tHat())*sqr(uHat())-1283*pow<5,1>(M2)*pow<6,1>(tHat())*sqr(uHat())
		 +568*pow<4,1>(M2)*pow<7,1>(tHat())*sqr(uHat())-156*pow<3,1>(M2)*pow<8,1>(tHat())*sqr(uHat())+50*sqr(M2)*pow<9,1>(tHat())*sqr(uHat())
		 -16*M2*pow<10,1>(tHat())*sqr(uHat())+pow<10,1>(M2)*pow<3,1>(uHat())-64*pow<9,1>(M2)*tHat()*pow<3,1>(uHat())+611*pow<8,1>(M2)*sqr(tHat())*pow<3,1>(uHat())
		 -2208*pow<7,1>(M2)*pow<3,1>(tHat())*pow<3,1>(uHat())+3927*pow<6,1>(M2)*pow<4,1>(tHat())*pow<3,1>(uHat())-3888*pow<5,1>(M2)*pow<5,1>(tHat())*pow<3,1>(uHat())
		 +2365*pow<4,1>(M2)*pow<6,1>(tHat())*pow<3,1>(uHat())-1072*pow<3,1>(M2)*pow<7,1>(tHat())*pow<3,1>(uHat())+472*sqr(M2)*pow<8,1>(tHat())*pow<3,1>(uHat())
		 -160*M2*pow<9,1>(tHat())*pow<3,1>(uHat())+16*pow<10,1>(tHat())*pow<3,1>(uHat())-3*pow<9,1>(M2)*pow<4,1>(uHat())+180*pow<8,1>(M2)*tHat()*pow<4,1>(uHat())
		 -1369*pow<7,1>(M2)*sqr(tHat())*pow<4,1>(uHat())+3927*pow<6,1>(M2)*pow<3,1>(tHat())*pow<4,1>(uHat())-5450*pow<5,1>(M2)*pow<4,1>(tHat())*pow<4,1>(uHat())
		 +4181*pow<4,1>(M2)*pow<5,1>(tHat())*pow<4,1>(uHat())-2230*pow<3,1>(M2)*pow<6,1>(tHat())*pow<4,1>(uHat())+1172*sqr(M2)*pow<7,1>(tHat())*pow<4,1>(uHat())
		 -496*M2*pow<8,1>(tHat())*pow<4,1>(uHat())+80*pow<9,1>(tHat())*pow<4,1>(uHat())+5*pow<8,1>(M2)*pow<5,1>(uHat())-280*pow<7,1>(M2)*tHat()*pow<5,1>(uHat())
		 +1716*pow<6,1>(M2)*sqr(tHat())*pow<5,1>(uHat())-3888*pow<5,1>(M2)*pow<3,1>(tHat())*pow<5,1>(uHat())+4181*pow<4,1>(M2)*pow<4,1>(tHat())*pow<5,1>(uHat())
		 -2664*pow<3,1>(M2)*pow<5,1>(tHat())*pow<5,1>(uHat())+1570*sqr(M2)*pow<6,1>(tHat())*pow<5,1>(uHat())-832*M2*pow<7,1>(tHat())*pow<5,1>(uHat())
		 +192*pow<8,1>(tHat())*pow<5,1>(uHat())-11*pow<7,1>(M2)*pow<6,1>(uHat())+269*pow<6,1>(M2)*tHat()*pow<6,1>(uHat())-1283*pow<5,1>(M2)*sqr(tHat())*pow<6,1>(uHat())
		 +2365*pow<4,1>(M2)*pow<3,1>(tHat())*pow<6,1>(uHat())-2230*pow<3,1>(M2)*pow<4,1>(tHat())*pow<6,1>(uHat())+1570*sqr(M2)*pow<5,1>(tHat())*pow<6,1>(uHat())
		 -960*M2*pow<6,1>(tHat())*pow<6,1>(uHat())+288*pow<7,1>(tHat())*pow<6,1>(uHat())+20*pow<6,1>(M2)*pow<7,1>(uHat())-144*pow<5,1>(M2)*tHat()*pow<7,1>(uHat())
		 +568*pow<4,1>(M2)*sqr(tHat())*pow<7,1>(uHat())-1072*pow<3,1>(M2)*pow<3,1>(tHat())*pow<7,1>(uHat())+1172*sqr(M2)*pow<4,1>(tHat())*pow<7,1>(uHat())
		 -832*M2*pow<5,1>(tHat())*pow<7,1>(uHat())+288*pow<6,1>(tHat())*pow<7,1>(uHat())-20*pow<5,1>(M2)*pow<8,1>(uHat())+16*pow<4,1>(M2)*tHat()*pow<8,1>(uHat())
		 -156*pow<3,1>(M2)*sqr(tHat())*pow<8,1>(uHat())+472*sqr(M2)*pow<3,1>(tHat())*pow<8,1>(uHat())-496*M2*pow<4,1>(tHat())*pow<8,1>(uHat())
		 +192*pow<5,1>(tHat())*pow<8,1>(uHat())+10*pow<4,1>(M2)*pow<9,1>(uHat())+20*pow<3,1>(M2)*tHat()*pow<9,1>(uHat())+50*sqr(M2)*sqr(tHat())*pow<9,1>(uHat())
		 -160*M2*pow<3,1>(tHat())*pow<9,1>(uHat())+80*pow<4,1>(tHat())*pow<9,1>(uHat())-2*pow<3,1>(M2)*pow<10,1>(uHat())-6*sqr(M2)*tHat()*pow<10,1>(uHat())
		 -16*M2*sqr(tHat())*pow<10,1>(uHat())+16*pow<3,1>(tHat())*pow<10,1>(uHat())))/(3.*pow<5,1>(M2-tHat())*pow<5,1>(M2-uHat())*pow<5,1>(tHat()+uHat()));
  // test vs PRD 45, 116
  // Energy7 R02 = params_->secondDerivativeRadialWaveFunctionSquared(state_,n_);
  // Energy6 Q(sHat()*tHat()*uHat());
  // Energy4 P(sHat()*tHat()+tHat()*uHat()+uHat()*sHat());
  // double test = 16.*Constants::pi*200.*Constants::pi*pow(standardModel()->alphaS(scale()),3)*R02/(9.*pow<3,1>(M)*pow<5,1>(Q-M2*P))*
  //   (sqr(P)*Q*(43*pow<6,1>(M2)+110*pow<3,1>(M2)*Q+16*sqr(Q))
  //    -sqr(M2)*P*Q*(6*pow<6,1>(M2)+157*pow<3,1>(M2)*Q+28*sqr(Q))
  //    -M2*pow<3,1>(P)*(pow<6,1>(M2)+26*pow<3,1>(M2)*Q+16*sqr(Q))
  //    +14*pow<7,1>(M2)*sqr(Q)+123*pow<4,1>(M2)*pow<3,1>(Q)
  //    -2*pow<3,1>(M2)*pow<5,1>(P)-6*sqr(M2)*pow<4,1>(P)*Q-64*M2*pow<4,1>(Q));
  // cerr << "testing matrix element " << output << " " << test << " "
  //      << (output-test)/(output+test) << " " << output/test << "\n";
  return output;
}

void MEPPto3D2Jet::constructVertex(tSubProPtr sub) {
  using namespace ThePEG::Helicity;
  // extract the particles in the hard process
  // only one order
  ParticleVector hard;
  hard.reserve(4);
  hard.push_back(sub->incoming().first);
  hard.push_back(sub->incoming().second);
  hard.push_back(sub->outgoing()[0]);
  hard.push_back(sub->outgoing()[1]);
  // boost to partonic CMS
  Lorentz5Momentum pcms = hard[0]->momentum()+hard[1]->momentum();
  LorentzRotation boost(-pcms.boostVector());
  for(PPtr part : hard) part->transform(boost);
  // set the wavefunctions
  vector<VectorWaveFunction> g1,g2,g4;
  vector<TensorWaveFunction> psi;
  VectorWaveFunction( g1,hard[0],incoming,false, true,true,vector_phase);
  VectorWaveFunction( g2,hard[1],incoming,false, true,true,vector_phase);
  TensorWaveFunction(psi,hard[2],outgoing,true ,false,true,tensor_phase);
  VectorWaveFunction( g4,hard[3],outgoing,true , true,true,vector_phase);
  // extract kinematic variables
  Energy M = hard[2]->mass();
  Energy2 M2 = sqr(hard[2]->mass());
  double phi = hard[2]->momentum().phi();
  Energy2 sh = (hard[0]->momentum()+hard[1]->momentum()).m2();
  Energy2 th = (hard[0]->momentum()-hard[2]->momentum()).m2();
  Energy2 uh = (hard[0]->momentum()-hard[3]->momentum()).m2();
  Energy2 um(uh-M2),tm(th-M2),sm(sh-M2);
  Complex phase = exp(Complex(0.,phi));
  // Energy rstu = sqrt(th*uh/sh);
  // calculate the matrix element
  ProductionMatrixElement me(PDT::Spin1,PDT::Spin1,PDT::Spin2,PDT::Spin1);
  me(0,0,0,0)=(8*pow<3,1>(M)*pow(phase,3)*sqrt(sh)*(th-uh)*sqrt(th*uh)*(-(pow<3,1>(M2)*(sh+uh))-sqr(sh)*uh*(sh+uh)+sqr(M2)*(sqr(sh)+4*sh*uh+sqr(uh))-M2*sh*(sqr(sh)+2*sh*uh+3*sqr(uh))))/(sqrt(3)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(0,0,0,2)=0;
  me(0,0,1,0)=(4*M2*sqr(phase)*sh*(2*sqr(th)*sqr(uh)*sqr(th+uh)+2*pow<4,1>(M2)*(sqr(th)-th*uh+sqr(uh))+pow<3,1>(M2)*(-3*pow<3,1>(th)+sqr(th)*uh+th*sqr(uh)-3*pow<3,1>(uh))+M2*th*uh*(3*pow<3,1>(th)-11*sqr(th)*uh-11*th*sqr(uh)+3*pow<3,1>(uh))+sqr(M2)*(pow<4,1>(th)-2*pow<3,1>(th)*uh+12*sqr(th)*sqr(uh)-2*th*pow<3,1>(uh)+pow<4,1>(uh))))/(sqrt(3)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(0,0,1,2)=0;
  me(0,0,2,0)=(4*sqrt(2)*pow<3,1>(M)*phase*sh*sqrt(sh)*(th-uh)*sqrt(th*uh)*(pow<3,1>(M2)-3*M2*th*uh-sqr(M2)*(th+uh)+2*th*uh*(th+uh)))/(sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(0,0,2,2)=0;
  me(0,0,3,0)=(8*M2*sqr(sh)*th*uh*(pow<3,1>(M2)-3*M2*th*uh+th*uh*(th+uh)))/(sqrt(3)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(0,0,3,2)=0;
  me(0,0,4,0)=0;
  me(0,0,4,2)=0;
  me(0,2,0,0)=(8*pow<3,1>(M)*phase*sqrt(sh)*uh*sqrt(th*uh)*(pow<4,1>(M2)-3*pow<3,1>(M2)*uh+2*sqr(M2)*uh*(th+uh)+2*sqr(th)*uh*(th+uh)-2*M2*th*uh*(2*th+uh)))/(sqrt(3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(0,2,0,2)=(-8*pow<3,1>(M)*sh*sqrt(sh)*sqr(uh)*sqrt(th*uh)*(-2*sqr(M2)+M2*uh+th*uh))/(sqrt(3)*phase*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(0,2,1,0)=(4*M2*th*(2*pow<3,1>(M2)*sh*(2*sh-th)+pow<4,1>(M2)*(sh+th)-2*sqr(sh)*sqr(th)*(sh+th)+2*M2*sh*th*(2*sqr(sh)+sh*th-2*sqr(th))-sqr(M2)*(8*pow<3,1>(sh)+14*sqr(sh)*th-sh*sqr(th)+pow<3,1>(th)))*uh)/(sqrt(3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(0,2,1,2)=(4*M2*sh*sqr(uh)*(pow<4,1>(M2)-9*pow<3,1>(M2)*th+M2*th*(2*th-3*uh)*uh-2*sqr(th)*uh*(th+uh)+sqr(M2)*(6*sqr(th)+8*th*uh-sqr(uh))))/(sqrt(3)*sqr(phase)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(0,2,2,0)=(-4*sqrt(2)*pow<3,1>(M)*sqrt(sh)*th*sqrt(th*uh)*(2*sqr(M2)*(sh-uh)*uh+pow<3,1>(M2)*(-sh+uh)+M2*sqr(uh)*(-sh+uh)+2*sh*uh*sqr(sh+uh)))/(phase*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(0,2,2,2)=(4*sqrt(2)*pow<3,1>(M)*sqrt(sh)*(2*sqr(M2)*(sh-th)*th+pow<3,1>(M2)*(-sh+th)+M2*sqr(th)*(-sh+th)+2*sh*th*sqr(sh+th))*uh*sqrt(th*uh))/(pow(phase,3)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(0,2,3,0)=(-4*M2*sh*sqr(th)*(pow<4,1>(M2)-9*pow<3,1>(M2)*uh-2*th*sqr(uh)*(th+uh)+M2*th*uh*(-3*th+2*uh)+sqr(M2)*(-sqr(th)+8*th*uh+6*sqr(uh))))/(sqrt(3)*sqr(phase)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(0,2,3,2)=(-4*M2*th*uh*(2*pow<3,1>(M2)*sh*(2*sh-uh)+pow<4,1>(M2)*(sh+uh)-2*sqr(sh)*sqr(uh)*(sh+uh)+2*M2*sh*uh*(2*sqr(sh)+sh*uh-2*sqr(uh))-sqr(M2)*(8*pow<3,1>(sh)+14*sqr(sh)*uh-sh*sqr(uh)+pow<3,1>(uh))))/(sqrt(3)*pow(phase,4)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(0,2,4,0)=(8*pow<3,1>(M)*sh*sqrt(sh)*sqr(th)*sqrt(th*uh)*(-2*sqr(M2)+M2*th+th*uh))/(sqrt(3)*pow(phase,3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(0,2,4,2)=(-8*pow<3,1>(M)*sqrt(sh)*th*sqrt(th*uh)*(pow<4,1>(M2)-3*pow<3,1>(M2)*th+2*sqr(M2)*th*(th+uh)+2*th*sqr(uh)*(th+uh)-2*M2*th*uh*(th+2*uh)))/(sqrt(3)*pow(phase,5)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,0,0)=(-8*pow<3,1>(M)*pow(phase,5)*sqrt(sh)*th*sqrt(th*uh)*(pow<4,1>(M2)-3*pow<3,1>(M2)*th+2*sqr(M2)*th*(th+uh)+2*th*sqr(uh)*(th+uh)-2*M2*th*uh*(th+2*uh)))/(sqrt(3)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,0,2)=(8*pow<3,1>(M)*pow(phase,3)*sh*sqrt(sh)*sqr(th)*sqrt(th*uh)*(-2*sqr(M2)+M2*th+th*uh))/(sqrt(3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(2,0,1,0)=(4*M2*pow(phase,4)*th*uh*(2*pow<3,1>(M2)*sh*(2*sh-uh)+pow<4,1>(M2)*(sh+uh)-2*sqr(sh)*sqr(uh)*(sh+uh)+2*M2*sh*uh*(2*sqr(sh)+sh*uh-2*sqr(uh))-sqr(M2)*(8*pow<3,1>(sh)+14*sqr(sh)*uh-sh*sqr(uh)+pow<3,1>(uh))))/(sqrt(3)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,1,2)=(4*M2*sqr(phase)*sh*sqr(th)*(pow<4,1>(M2)-9*pow<3,1>(M2)*uh-2*th*sqr(uh)*(th+uh)+M2*th*uh*(-3*th+2*uh)+sqr(M2)*(-sqr(th)+8*th*uh+6*sqr(uh))))/(sqrt(3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(2,0,2,0)=(4*sqrt(2)*pow<3,1>(M)*pow(phase,3)*sqrt(sh)*(2*sqr(M2)*(sh-th)*th+pow<3,1>(M2)*(-sh+th)+M2*sqr(th)*(-sh+th)+2*sh*th*sqr(sh+th))*uh*sqrt(th*uh))/(pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,2,2)=(-4*sqrt(2)*pow<3,1>(M)*phase*sqrt(sh)*th*sqrt(th*uh)*(2*sqr(M2)*(sh-uh)*uh+pow<3,1>(M2)*(-sh+uh)+M2*sqr(uh)*(-sh+uh)+2*sh*uh*sqr(sh+uh)))/(pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(2,0,3,0)=(-4*M2*sqr(phase)*sh*sqr(uh)*(pow<4,1>(M2)-9*pow<3,1>(M2)*th+M2*th*(2*th-3*uh)*uh-2*sqr(th)*uh*(th+uh)+sqr(M2)*(6*sqr(th)+8*th*uh-sqr(uh))))/(sqrt(3)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,3,2)=(-4*M2*th*(2*pow<3,1>(M2)*sh*(2*sh-th)+pow<4,1>(M2)*(sh+th)-2*sqr(sh)*sqr(th)*(sh+th)+2*M2*sh*th*(2*sqr(sh)+sh*th-2*sqr(th))-sqr(M2)*(8*pow<3,1>(sh)+14*sqr(sh)*th-sh*sqr(th)+pow<3,1>(th)))*uh)/(sqrt(3)*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(2,0,4,0)=(-8*pow<3,1>(M)*phase*sh*sqrt(sh)*sqr(uh)*sqrt(th*uh)*(-2*sqr(M2)+M2*uh+th*uh))/(sqrt(3)*pow<3,1>(sm)*pow<3,1>(tm)*sqr(um));
  me(2,0,4,2)=(8*pow<3,1>(M)*sqrt(sh)*uh*sqrt(th*uh)*(pow<4,1>(M2)-3*pow<3,1>(M2)*uh+2*sqr(M2)*uh*(th+uh)+2*sqr(th)*uh*(th+uh)-2*M2*th*uh*(2*th+uh)))/(sqrt(3)*phase*pow<3,1>(sm)*sqr(tm)*pow<3,1>(um));
  me(2,2,0,0)=0;
  me(2,2,0,2)=0;
  me(2,2,1,0)=0;
  me(2,2,1,2)=(-8*M2*sqr(sh)*th*uh*(pow<3,1>(M2)-3*M2*th*uh+th*uh*(th+uh)))/(sqrt(3)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(2,2,2,0)=0;
  me(2,2,2,2)=(4*sqrt(2)*pow<3,1>(M)*sh*sqrt(sh)*(th-uh)*sqrt(th*uh)*(pow<3,1>(M2)-3*M2*th*uh-sqr(M2)*(th+uh)+2*th*uh*(th+uh)))/(phase*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(2,2,3,0)=0;
  me(2,2,3,2)=(-4*M2*sh*(2*sqr(th)*sqr(uh)*sqr(th+uh)+2*pow<4,1>(M2)*(sqr(th)-th*uh+sqr(uh))+pow<3,1>(M2)*(-3*pow<3,1>(th)+sqr(th)*uh+th*sqr(uh)-3*pow<3,1>(uh))+M2*th*uh*(3*pow<3,1>(th)-11*sqr(th)*uh-11*th*sqr(uh)+3*pow<3,1>(uh))+sqr(M2)*(pow<4,1>(th)-2*pow<3,1>(th)*uh+12*sqr(th)*sqr(uh)-2*th*pow<3,1>(uh)+pow<4,1>(uh))))/(sqrt(3)*sqr(phase)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  me(2,2,4,0)=0;
  me(2,2,4,2)=(8*pow<3,1>(M)*sqrt(sh)*(th-uh)*sqrt(th*uh)*(-(pow<3,1>(M2)*(sh+uh))-sqr(sh)*uh*(sh+uh)+sqr(M2)*(sqr(sh)+4*sh*uh+sqr(uh))-M2*sh*(sqr(sh)+2*sh*uh+3*sqr(uh))))/(sqrt(3)*pow(phase,3)*sqr(sm)*pow<3,1>(tm)*pow<3,1>(um));
  // test the spin averaged result
  // Energy6 Q(sh*th*uh);
  // Energy4 P(sh*th+th*uh+uh*sh);
  // double test = 32.*sqr(M2)/3/pow<5,1>(Q-M2*P)*
  //   (sqr(P)*Q*(43*pow<6,1>(M2)+110*pow<3,1>(M2)*Q+16*sqr(Q))
  //    -sqr(M2)*P*Q*(6*pow<6,1>(M2)+157*pow<3,1>(M2)*Q+28*sqr(Q))
  //    -M2*pow<3,1>(P)*(pow<6,1>(M2)+26*pow<3,1>(M2)*Q+16*sqr(Q))
  //    +14*pow<7,1>(M2)*sqr(Q)+123*pow<4,1>(M2)*pow<3,1>(Q)
  //    -2*pow<3,1>(M2)*pow<5,1>(P)-6*sqr(M2)*pow<4,1>(P)*Q-64*M2*pow<4,1>(Q));
  // double aver = me.average();
  // cerr << "testing spin correlations " << test << " " << me.average() << " "
  //      << abs(test-aver)/(test+aver) << "\n";
  // construct the vertex
  HardVertexPtr hardvertex = new_ptr(HardVertex());
  // // set the matrix element for the vertex
  hardvertex->ME(me);
  // set the pointers and to and from the vertex
  for(unsigned int i = 0; i < hard.size(); ++i)
    hard[i]->spinInfo()->productionVertex(hardvertex);
  // boost back to lab
  boost = LorentzRotation(pcms.boostVector());
  for(PPtr part : hard)
    part->transform(boost);
}
