// -*- C++ -*-
//
// MRST.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2011 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the MRST class.
//

namespace Herwig {


inline IBPtr MRST::clone() const {
  return new_ptr(*this);
}

inline IBPtr MRST::fullclone() const {
  return new_ptr(*this);
}

inline double MRST::polderivative(double x1, double x2, double x3,
				  double y1, double y2, double y3) const {
  // returns the estimate of the derivative at x2 obtained by a polynomial 
  // interpolation using the three points (x_i,y_i)
  return (x3*x3*(y1-y2) - 2.0*x2*(x3*(y1-y2) + x1*(y2-y3)) +
          x2*x2*(y1-y3) + x1*x1*(y2-y3))/((x1-x2)*(x1-x3)*(x2-x3));
}

inline int MRST::locate(double xx[],int n,double x) const {
  // returns an integer j such that x lies inbetween xx[j] and xx[j+1]. unit
  // offset of increasing ordered array xx assumed. n is the length of the
  // array (xx[n] highest element)
  int ju,jm,jl(0),j;
  ju=n+1;

  while (ju-jl>1) {
    jm=(ju+jl)/2; // compute a mid point.
    if(x >= xx[jm]) jl=jm;
    else ju=jm;
  }
  if(x==xx[1]) j=1;
  else if(x==xx[n]) j=n-1;
  else j=jl;

  return j;
}

inline double MRST::lookup(PDFFlavour i, int n, int m, double u, double t) const {
  double value = 0.0;
  for(int l=4;l>=1;l--) {
    value=t*value+((c[i][n][m][l][4]*u+c[i][n][m][l][3])*u +
		   c[i][n][m][l][2])*u+c[i][n][m][l][1];
  }
  return value;
}



}
