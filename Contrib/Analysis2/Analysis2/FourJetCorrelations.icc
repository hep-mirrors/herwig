// -*- C++ -*-

// (C) 2007-2009 Simon Plaetzer -- sp@particle.uni-karlsruhe.de

namespace Analysis2 {

inline FourJetCorrelations::FourJetCorrelations()
  : _cosAlpha34(""), _cosChiBZ(""),
    _cosPhiKSW(""), _cosThetaNR("")
{}

inline IBPtr FourJetCorrelations::clone() const {
  return new_ptr(*this);
}

inline IBPtr FourJetCorrelations::fullclone() const {
  return new_ptr(*this);
}

inline double FourJetCorrelations::cosChiBZ(const vector<Lorentz5Momentum>& p) {
  if (p.size() == 4) {
    ThreeVector<Energy2> v1 = p[0].vect().cross(p[1].vect());
    ThreeVector<Energy2> v2 = p[2].vect().cross(p[3].vect());
    return cos(v1.angle(v2)); 
  } 
  else return 123;
}

inline double FourJetCorrelations::cosPhiKSW(const vector<Lorentz5Momentum>& p) {
  if (p.size() == 4) {
    ThreeVector<Energy2> v1 = p[0].vect().cross(p[3].vect());
    ThreeVector<Energy2> v2 = p[1].vect().cross(p[2].vect());
    double alpha1 = v1.angle(v2);
    v1 = p[0].vect().cross(p[2].vect());
    v2 = p[1].vect().cross(p[3].vect());
    double alpha2 = v1.angle(v2);
    return cos((alpha1+alpha2)/2.);
  } 
  else return 123; 
}

inline double FourJetCorrelations::cosThetaNR(const vector<Lorentz5Momentum>& p) {
  if (p.size() == 4) {
    ThreeVector<Energy> v1 = p[0].vect() - p[1].vect();
    ThreeVector<Energy> v2 = p[2].vect() - p[3].vect();
    return cos(v1.angle(v2));
  }
  else return 123; 
}

inline double FourJetCorrelations::cosAlpha34(const vector<Lorentz5Momentum>& p) {
  if (p.size() == 4)
    return cos(p[2].vect().angle(p[3].vect()));
  else 
    return 123; 
}

// If needed, insert default implementations of virtual function defined
// in the InterfacedBase class here (using ThePEG-interfaced-impl in Emacs).


}
