#! /usr/bin/env python

## --------------------
## Herwig-Parallel
## --------------------
## Author: Daniel Rauch
## Date:   25 Feb 2015
## --------------------

import sys
import os
import shutil
import datetime
from subprocess import call
from subprocess import check_output
from ConfigParser import SafeConfigParser
from optparse import OptionParser
from hwp import checkConfig

# load Herwig-Parallel configuration file
configFileName = os.path.dirname(os.path.realpath(sys.argv[0])) + "/../config/herwig-parallel.conf"
configParser = SafeConfigParser()
configParser.read(configFileName)

# load cluster configuration file
configFileNameClusters = os.path.dirname(os.path.realpath(sys.argv[0])) + "/../config/clusters.conf"
configParserClusters = SafeConfigParser()
configParserClusters.read(configFileNameClusters)

# load queue configuration file
configFileNameQueues = os.path.dirname(os.path.realpath(sys.argv[0])) + "/../config/queues.conf"
configParserQueues = SafeConfigParser()
configParserQueues.read(configFileNameQueues)

# sanity checks for cluster and queue configuration
queues = checkConfig(configParserClusters,configParserQueues)

# set defaults
default_settings  = ['runqueue','runjobs','events']
default_variables = [ queues[0],'1',      '1k']
for i in range(len(default_settings)):
  try:
    default_variables[i] = configParser.get('defaults',default_settings[i])
  except:
    pass

# setup command line options & parameters
optionParser = OptionParser(usage="%prog [options] runname")
optionParser.add_option("-e", "--events", dest="events", default=default_variables[2], help="number of events per run [default: %default]. The suffixes k/m/g may be used to indicate factors of thousands, millions and billions.")
optionParser.add_option("-j", "--jobs", dest="jobs", default=default_variables[1], help="number of parallel runs [default: %default]")
optionParser.add_option("-q", "--queue", dest="queue", default=default_variables[0], help=repr(queues).replace('[','').replace(']','').replace("'",'')+" [default: %default]")
opts, args = optionParser.parse_args()

# sanity checks for command line arguments
if len(args) <> 1:
  sys.stderr.write("Must specify an unambiguous runname!\n")
  sys.exit(1)
if not opts.queue in queues:
  sys.stderr.write("The specified queue '"+opts.queue+"' was not configured in Herwig-Parallel/config/queues.conf! Please choose a different queue or modify the configuration file.")
  sys.exit(1)

run_name = args[0].strip('/')
cwd = os.getcwd()

# check if run exists
if not os.path.exists(run_name):
  sys.stderr.write("The specified run "+run_name+" does not exist!\n")
  sys.exit(1)

line = '===================================='
for i in range(len(run_name)): line += '='
print(line)
print("HERWIG-PARALLEL: Adding jobs to run {}".format(run_name))
print(line)
print("")

# read required information from 'run.info' file
jobs = []
seeds = []
f_run_info = open(run_name+'/run.info','r')
l = 0
for line in f_run_info:
  l += 1
  if l == 1: cluster = line.replace('\n','')
  elif l == 3: setupfile_title = line.replace('\n','').split('/')[-1]
  elif l == 4:
    generator = line.replace('\n','')
    runfile_title = generator+'.run'
  elif l == 9: runscript_title = line.replace('\n','').split('/')[-1]
  elif l == 10: seed_mode = line.replace('\n','')
  elif l == 11:
    if seed_mode == 'file':
      seed_file = line.replace('\n','')
  elif l > 11:
    jobs.append(int(line.replace('\n','').split()[1].replace('#','').replace(':','')))
    seeds.append(int(line.replace('\n','').split()[5]))
f_run_info.close()

events = float(str(opts.events).replace('k','').replace('K','').replace('m','').replace('M','').replace('g','').replace('G',''))
power = 0
power += (str(opts.events).count('k')+str(opts.events).count('K'))*3
power += (str(opts.events).count('m')+str(opts.events).count('M'))*6
power += (str(opts.events).count('g')+str(opts.events).count('G'))*9
events = int(events*10.0**power)

nJobs = len(jobs)
runscript = run_name + '/in/' + runscript_title
runfile = run_name + '/read/' + runfile_title

if seed_mode == 'ascending':
  s = seeds[len(seeds)-1]
  for j in range(len(jobs)+1,len(jobs)+1+int(opts.jobs)):
    s += 1
    seeds.append(s)
elif seed_mode == 'file':
  try:
    f_seeds = open(run_name+'/in/'+seed_file,'r')
  except:
    sys.stderr.write('The seed file cannot be opened!\n')
    sys.exit(1)
  seeds = []
  for line in f_seeds:
    try:
      seeds.append(int(line.replace('\n','')))
    except:
      pass
  f_seeds.close()
  if len(seeds) < len(jobs)+int(opts.jobs):
    sys.stderr.write("The specified seed file only contains "+str(len(seeds))+" seed"+('s' if len(seeds)>1 else '')+".\n")
    sys.stderr.write("This is too few for the requested number of "+str(len(jobs)+int(opts.jobs))+" job"+('s' if len(jobs)+int(opts.jobs)>1 else '')+".\n")
    sys.exit(1)

f_run_info = open(run_name+"/run.info","a")
f_run_log = open(run_name+'/run.log','a')

for r in range(nJobs+1,nJobs+int(opts.jobs)+1):
  os.chdir(cwd)
  dir_name = run_name+"/"+str(r)
  
  # create new directories and copy runfile there
  if not os.path.exists(dir_name):
    try:
      os.makedirs(dir_name)
    except:
      print("could not create run directory {}".format(dir_name))
  if setupfile_title != '': shutil.copyfile(run_name+'/read/'+setupfile_title,dir_name+'/'+setupfile_title)
  shutil.copyfile(runfile, dir_name+'/'+runfile_title)
  shutil.copyfile(runscript, dir_name+'/'+runscript_title)
  call("chmod u+x "+dir_name+'/'+runscript_title, shell=True) # set execute permission (lost during copying)
  os.makedirs(dir_name+'/Herwig')
  call('cd '+dir_name+'/Herwig; ln -s ../../read/Herwig/Build', shell=True)         # symlink build directory
  shutil.copytree(run_name+'/read/Herwig/'+generator,dir_name+'/Herwig/'+generator) # copy run directory
  if os.path.exists(run_name+'/read/Herwig/MG_tmp'):
    shutil.copytree(run_name+'/read/Herwig/MG_tmp',dir_name+'/Matchbox/MG_tmp')
  if os.path.exists(run_name+'/read/Matchbox/MG_tmp'):
    shutil.copytree(run_name+'/read/Matchbox/MG_tmp',dir_name+'/Matchbox/MG_tmp')

  # start new jobs
  os.chdir(cwd+'/'+dir_name)
  call("sed -i 's/@HOSTNAME@/hostname > parallel.hostname/' "+runscript_title, shell=True)
  call("sed -i 's/@RUNFILE@/"+runfile_title+"/' "+runscript_title, shell=True)
  call("sed -i 's/@EVENTS@/"+str(events)+"/' "+runscript_title, shell=True)
  call("sed -i 's/@SEED@/"+str(seeds[r-1])+"/' "+runscript_title, shell=True)
  call("sed -i 's/@SETUPFILE@/"+('' if setupfile_title=='' else '--setupfile='+setupfile_title)+"/' "+runscript_title, shell=True)
  call("sed -i 's/@CLEANUP@/rm -f "+runfile_title+"; rm -rf Herwig; rm -rf Matchbox /' "+runscript_title, shell=True)
  command = configParserQueues.get(opts.queue, 'submit').replace('@SCRIPT@',runscript_title)
  print("adding job #{}: {}".format(r,command))
  try:
    output = check_output("cd "+cwd+"/"+dir_name+"; "+command, shell=True).strip().replace('\n',' ')
  except Exception, err:
    sys.stderr.write("\n--------------------------------------------------")
    sys.stderr.write(err)
    sys.stderr.write("--------------------------------------------------\n")
    f_run_info.close()
    f_run_log.close()
    sys.exit(1)
  else:
    print(" > {}\n".format(output))
    jobid = check_output("echo '"+output+"' | "+configParserClusters.get(configParserQueues.get(opts.queue,'cluster'),'jobid'), shell=True)
    f_run_info.write("job #"+str(r)+": id "+jobid+" seed "+str(seeds[r-1])+" events "+str(events)+"\n")
    f_run_log.write(datetime.datetime.now().isoformat(' ')+': herwig-parallel-addjobs: adding job #{}\n'.format(r))

f_run_info.close()
f_run_log.close()
