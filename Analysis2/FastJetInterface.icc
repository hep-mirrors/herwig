// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the FastJetInterface class.
//

namespace Herwig {

inline FastJetInterface::FastJetInterface()
  : _jetFinder(fastjet::kt_algorithm), _strategy(fastjet::Best),
    _recombinationScheme(fastjet::E_scheme)
{}

  inline FastJetInterface::FastJetInterface (const FastJetInterface& x)
    : JetFinder(x), _jetFinder(x._jetFinder), _strategy(x._strategy),
      _recombinationScheme(x._recombinationScheme)
  {}

inline IBPtr FastJetInterface::clone() const {
  return new_ptr(*this);
}

inline IBPtr FastJetInterface::fullclone() const {
  return new_ptr(*this);
}

inline int FastJetInterface::jetFinder () const {
  return _jetFinder;
}

inline int FastJetInterface::recombinationScheme () const {
  return _recombinationScheme;
}

inline int FastJetInterface::strategy () const {
  return _strategy;
}

inline const fastjet::JetDefinition& FastJetInterface::jetDefintion () const {
  return _jetDefinition;
}

inline const vector<fastjet::PseudoJet>& FastJetInterface::lastPseudojets () const {
  return _lastPseudojets;
}

inline const fastjet::ClusterSequence& FastJetInterface::lastClusterSequence () const {
  return *_lastClusterSequence;
}

inline void FastJetInterface::findJets () {
  convert(_lastClusterSequence->inclusive_jets());
}

inline void FastJetInterface::findJetsN (unsigned int nJets) {
  int inJets = (int)nJets;
  convert(_lastClusterSequence->exclusive_jets(inJets));
}

inline void FastJetInterface::findJetsD () {
  convert(_lastClusterSequence->exclusive_jets(sqr(dCut()/GeV)));
}

inline void FastJetInterface::findJetsY () {
  Energy2 res = yCut()*_E2vis;
  convert(_lastClusterSequence->exclusive_jets(res/GeV2));
}

inline Energy FastJetInterface::getDMerge (unsigned int nJets) const {
  int inJets = (int)nJets;
  return sqrt(_lastClusterSequence->exclusive_dmerge(inJets))*GeV;
}

inline double FastJetInterface::getYMerge (unsigned int nJets) const {
  int inJets = (int)nJets;
  Energy dn = getDMerge (inJets);
  return sqr(dn)/_E2vis;
}


// If needed, insert default implementations of virtual function defined
// in the InterfacedBase class here (using ThePEG-interfaced-impl in Emacs).

inline void FastJetInterface::doinitrun() {
  JetFinder::doinitrun();

  fastjet::JetFinder theJetFinder = fastjet::kt_algorithm;
  switch(_jetFinder) {
  case 0: theJetFinder = fastjet::kt_algorithm; break;
  case 1: theJetFinder = fastjet::cambridge_algorithm;; break;
  case 99: throw Exception() << "FastJet plugins not yet supported by FastJet interface";
  }

  fastjet::RecombinationScheme theRecombinationScheme = fastjet::E_scheme;
  switch(_recombinationScheme) {
  case 0: theRecombinationScheme = fastjet::E_scheme; break;
  case 1: theRecombinationScheme = fastjet::pt_scheme; break;
  case 2: theRecombinationScheme = fastjet::pt2_scheme; break;
  case 3: theRecombinationScheme = fastjet::Et_scheme; break;
  case 4: theRecombinationScheme = fastjet::Et2_scheme; break;
  case 5: theRecombinationScheme = fastjet::BIpt_scheme; break;
  case 6: theRecombinationScheme = fastjet::BIpt2_scheme; break;
  case 99: throw Exception() << "FastJet user defined recombination not yet supported by FastJet interface";
  }

  fastjet::Strategy theStrategy = fastjet::Best;
  switch(_strategy) {
  case -4: theStrategy = fastjet::N2MinHeapTiled; break;
  case -3: theStrategy = fastjet::N2Tiled; break;
  case -2: theStrategy = fastjet::N2PoorTiled; break;
  case -1: theStrategy = fastjet::N2Plain; break;
  case 0: theStrategy = fastjet::N3Dumb; break;
  case 1: theStrategy = fastjet::Best; break;
  case 2: theStrategy = fastjet::NlnN; break;
  case 3: theStrategy = fastjet::NlnN3pi; break;
  case 4: theStrategy = fastjet::NlnN4pi; break;
  case 14: theStrategy = fastjet::NlnNCam4pi; break;
  case 13: theStrategy = fastjet::NlnNCam2pi2R; break;
  case 12: theStrategy = fastjet::NlnNCam; break;
  case 999: throw Exception() << "FastJet plugins not yet supported by FastJet interface";
  }

  _jetDefinition = fastjet::JetDefinition(theJetFinder,R(),theRecombinationScheme,theStrategy);
}

inline void FastJetInterface::dofinish() {
  JetFinder::dofinish();
}

}
