// -*- C++ -*-
//
// ThreeBodyAllOnCalculator.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the ThreeBodyAllOnCalculator class.
//

namespace Herwig {
using namespace ThePEG;

template <class T>
inline ThreeBodyAllOnCalculator<T>::
ThreeBodyAllOnCalculator(vector<double> inweights,
			 vector<int> intype,
			 vector<Energy> inmass, 
			 vector<Energy> inwidth, 
			 vector<double> inpow,
			 T inme, int mode, 
			 Energy m1,Energy m2,Energy m3)
  : _channelweights(inweights),_channeltype(intype),_channelmass(inmass),
    _channelwidth(inwidth),_channelpower(inpow),_theME(inme),_mode(mode),
    _thechannel(0),_souter(ZERO)
{
  _m.resize(4);
  _m[1]=m1;_m[2]=m2;_m[3]=m3;
  _m2.resize(4);
  for(int ix=1;ix<4;++ix) {
    _m2[ix]=sqr(_m[ix]);
  }
}

template <class T>
inline void ThreeBodyAllOnCalculator<T>::resetMass(int id,Energy inmass) {
  if(id<4) {
    _m[id]=inmass;
    _m2[id]=inmass*inmass;
  }
  else throw Exception() << "Tried to set invalid mass in " 
			 << "ThreeBodyAllOnCalculator::resetMass()"
			 << Exception::runerror;
}

template <class T>
inline Energy ThreeBodyAllOnCalculator<T>::getMass(const int id) const {
  if(id<4) return _m[id];
  else throw Exception() << "Tried to get invalid mass in " 
			 << "ThreeBodyAllOnCalculator::getMass()"
			 << Exception::runerror;
}

template <class T>
inline Energy ThreeBodyAllOnCalculator<T>::otherMass(const int id) const {
  if(id==1)      return _m[2]+_m[3];
  else if(id==2) return _m[1]+_m[3];
  else if(id==3) return _m[1]+_m[2];
  else throw Exception() << "Tried to get invalid mass in " 
			 << "ThreeBodyAllOnCalculator::otherMass()"
			 << Exception::runerror;
}

template <class T>
inline ThreeBodyAllOnCalculator<T>::Outer::
Outer(typename Ptr< ThreeBodyAllOnCalculator<T> >::const_pointer in) 
  : _integrand(in)
{}

template <class T>
inline Energy4 ThreeBodyAllOnCalculator<T>::Outer::operator() (double x) const {
  Energy2 low, upp;
  _integrand->outerVariables(x,low,upp);
  return _integrator.value(*_integrand,low,upp);
}

}
