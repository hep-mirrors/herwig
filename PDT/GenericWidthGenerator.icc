// -*- C++ -*-
//
// GenericWidthGenerator.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the GenericWidthGenerator class.
//

namespace Herwig {
using namespace ThePEG;

inline GenericWidthGenerator::GenericWidthGenerator() 
  : _mass(),_prefactor(0.),_initialize(false),_BRnorm(true),_npoints(50),
    _BRminimum(0.01), _intorder(1)
{}

inline IBPtr GenericWidthGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr GenericWidthGenerator::fullclone() const {
  return new_ptr(*this);
}

inline Energy GenericWidthGenerator::partial2BodyWidth(int imode,Energy q) const {
  return partial2BodyWidth(imode,q,_MEmass1[imode],_MEmass2[imode]);
}

inline int GenericWidthGenerator::MEcode(int imode) const {
  return _MEcode[imode];
}

inline double GenericWidthGenerator::MEcoupling(int imode) const {
  return _MEcoupling[imode];
}

inline Energy GenericWidthGenerator::mass() const {
  return _mass;
}

inline bool GenericWidthGenerator::initialize() const {
  return _initialize;
}

inline tPDPtr GenericWidthGenerator::particle() const {
  return _theParticle;
}

inline DecayMap GenericWidthGenerator::rate(const ParticleData & in) const {
  return in.decaySelector();
}

inline bool GenericWidthGenerator::accept(const ParticleData & in) const {
  if(!_theParticle) return false;
  return in.id() == _theParticle->id() ||
    ( in.CC() && in.CC()->id() == _theParticle->id() );
}
}
