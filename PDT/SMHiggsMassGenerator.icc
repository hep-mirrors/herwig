// -*- C++ -*-
//
// SMHiggsMassGenerator.icc is a part of Herwig++ - A multi-purpose Monte Carlo event generator
// Copyright (C) 2002-2007 The Herwig Collaboration
//
// Herwig++ is licenced under version 2 of the GPL, see COPYING for details.
// Please respect the MCnet academic guidelines, see GUIDELINES for details.
//
//
// This is the implementation of the inlined member functions of
// the SMHiggsMassGenerator class.
//

namespace Herwig {

inline SMHiggsMassGenerator::SMHiggsMassGenerator() : _shape(1) 
{}

inline IBPtr SMHiggsMassGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr SMHiggsMassGenerator::fullclone() const {
  return new_ptr(*this);
}

inline InvEnergy2 SMHiggsMassGenerator::BreitWignerWeight(Energy q,int shape) const {
  useMe();
  pair<Energy,Energy> widths = shape!=2 ? _hwidth->width(q,*particle()) :
    make_pair(nominalWidth(),nominalWidth());
  Energy2 q2 = sqr(q);
  Energy4 sq=sqr(q2-sqr(nominalMass()));
  Energy2 num = widths.first*q;
  if(_shape==1) num *= pow<4,1>(nominalMass()/q);
  if(shape==3) num=GeV2;
  return num/Constants::pi/(sq+sqr(widths.second*sqr(nominalMass())/q));
}

inline double SMHiggsMassGenerator::weight(Energy q,int shape) const {
  Energy2 q2    = sqr(q);
  Energy2 mass2 = sqr(nominalMass());
  Energy2 mwidth= nominalMass()*nominalWidth();
  return BreitWignerWeight(q,shape)*(sqr(mass2-q2)+sqr(mwidth))/mwidth;
}

}
